{"version":3,"file":"1.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/core/components/PasswordInput/PasswordInput.tsx","webpack:///webpack:///./public/app/features/profile/ChangePasswordForm.tsx","webpack:///webpack:///./public/app/features/profile/ChangePasswordPage.tsx"],"sourcesContent":["import React, { ChangeEvent, forwardRef } from 'react';\r\nimport { Input, FormLabel } from '@grafana/ui';\r\n\r\nexport interface Props {\r\n  label: string;\r\n  value: string | undefined;\r\n  onChange: (value: string) => void;\r\n}\r\n\r\nexport const PasswordInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\r\n  <>\r\n    <FormLabel className=\"width-8\">{props.label}</FormLabel>\r\n    <Input\r\n      className=\"gf-form-input max-width-22\"\r\n      type=\"password\"\r\n      onChange={(event: ChangeEvent<HTMLInputElement>) => props.onChange(event.target.value)}\r\n      value={props.value}\r\n    />\r\n  </>\r\n));\r\n","import React, { PureComponent, MouseEvent } from 'react';\r\nimport config from 'app/core/config';\r\nimport { Button, LinkButton } from '@grafana/ui';\r\nimport { ChangePasswordFields } from 'app/core/utils/UserProvider';\r\nimport { PasswordInput } from 'app/core/components/PasswordInput/PasswordInput';\r\n\r\nexport interface Props {\r\n  isSaving: boolean;\r\n  onChangePassword: (payload: ChangePasswordFields) => void;\r\n}\r\n\r\nexport interface State {\r\n  oldPassword: string;\r\n  newPassword: string;\r\n  confirmNew: string;\r\n}\r\n\r\nexport class ChangePasswordForm extends PureComponent<Props, State> {\r\n  state: State = {\r\n    oldPassword: '',\r\n    newPassword: '',\r\n    confirmNew: '',\r\n  };\r\n\r\n  onOldPasswordChange = (oldPassword: string) => {\r\n    this.setState({ oldPassword });\r\n  };\r\n\r\n  onNewPasswordChange = (newPassword: string) => {\r\n    this.setState({ newPassword });\r\n  };\r\n\r\n  onConfirmPasswordChange = (confirmNew: string) => {\r\n    this.setState({ confirmNew });\r\n  };\r\n\r\n  onSubmitChangePassword = (event: MouseEvent<HTMLInputElement>) => {\r\n    event.preventDefault();\r\n    this.props.onChangePassword({ ...this.state });\r\n  };\r\n\r\n  render() {\r\n    const { oldPassword, newPassword, confirmNew } = this.state;\r\n    const { isSaving } = this.props;\r\n    const { ldapEnabled, authProxyEnabled } = config;\r\n\r\n    if (ldapEnabled || authProxyEnabled) {\r\n      return <p>You cannot change password when ldap or auth proxy authentication is enabled.</p>;\r\n    }\r\n\r\n    return (\r\n      <form name=\"userForm\" className=\"gf-form-group\">\r\n        <div className=\"gf-form max-width-30\">\r\n          <PasswordInput label=\"Old Password\" onChange={this.onOldPasswordChange} value={oldPassword} />\r\n        </div>\r\n        <div className=\"gf-form max-width-30\">\r\n          <PasswordInput label=\"New Password\" onChange={this.onNewPasswordChange} value={newPassword} />\r\n        </div>\r\n        <div className=\"gf-form max-width-30\">\r\n          <PasswordInput label=\"Confirm Password\" onChange={this.onConfirmPasswordChange} value={confirmNew} />\r\n        </div>\r\n        <div className=\"gf-form-button-row\">\r\n          <Button variant=\"primary\" onClick={this.onSubmitChangePassword} disabled={isSaving}>\r\n            Change Password\r\n          </Button>\r\n          <LinkButton variant=\"transparent\" href={`${config.appSubUrl}/profile`}>\r\n            Cancel\r\n          </LinkButton>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChangePasswordForm;\r\n","import React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\nimport { StoreState } from 'app/types';\r\nimport { NavModel } from '@grafana/data';\r\nimport { getNavModel } from 'app/core/selectors/navModel';\r\nimport { UserProvider } from 'app/core/utils/UserProvider';\r\nimport Page from 'app/core/components/Page/Page';\r\nimport { ChangePasswordForm } from './ChangePasswordForm';\r\n\r\nexport interface Props {\r\n  navModel: NavModel;\r\n}\r\n\r\nexport class ChangePasswordPage extends PureComponent<Props> {\r\n  render() {\r\n    const { navModel } = this.props;\r\n    return (\r\n      <Page navModel={navModel}>\r\n        <UserProvider>\r\n          {({ changePassword }, states) => (\r\n            <Page.Contents>\r\n              <h3 className=\"page-sub-heading\">Change Your Password</h3>\r\n              <ChangePasswordForm onChangePassword={changePassword} isSaving={states.changePassword} />\r\n            </Page.Contents>\r\n          )}\r\n        </UserProvider>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState) {\r\n  return {\r\n    navModel: getNavModel(state.navIndex, `change-password`),\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(ChangePasswordPage));\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AAEA;AAaA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAiCA;AA/BA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAMA;AACA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AC1EA;AACA;AACA;AAGA;AACA;AACA;AACA;AAMA;AAAA;AAAA;;AAgBA;AAfA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAHA;AASA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;A","sourceRoot":""}