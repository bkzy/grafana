{"version":3,"file":"AlertRuleList.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/core/components/FilterInput/FilterInput.tsx","webpack:///webpack:///./public/app/features/alerting/AlertRuleItem.tsx","webpack:///webpack:///./public/app/features/alerting/AlertRuleList.tsx","webpack:///webpack:///./public/app/features/alerting/state/actions.ts","webpack:///webpack:///./public/app/features/alerting/state/selectors.ts"],"sourcesContent":["import React, { forwardRef } from 'react';\r\nimport { escapeStringForRegex, unEscapeStringFromRegex } from '@grafana/data';\r\n\r\nexport interface Props {\r\n  value: string | undefined;\r\n  placeholder?: string;\r\n  labelClassName?: string;\r\n  inputClassName?: string;\r\n  onChange: (value: string) => void;\r\n}\r\n\r\nexport const FilterInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\r\n  <label className={props.labelClassName}>\r\n    <input\r\n      ref={ref}\r\n      type=\"text\"\r\n      className={props.inputClassName}\r\n      value={unEscapeStringFromRegex(props.value)}\r\n      onChange={event => props.onChange(escapeStringForRegex(event.target.value))}\r\n      placeholder={props.placeholder ? props.placeholder : null}\r\n    />\r\n    <i className=\"gf-form-input-icon fa fa-search\" />\r\n  </label>\r\n));\r\n","import React, { PureComponent } from 'react';\r\n// @ts-ignore\r\nimport Highlighter from 'react-highlight-words';\r\nimport classNames from 'classnames';\r\nimport { AlertRule } from '../../types';\r\n\r\nexport interface Props {\r\n  rule: AlertRule;\r\n  search: string;\r\n  onTogglePause: () => void;\r\n}\r\n\r\nclass AlertRuleItem extends PureComponent<Props> {\r\n  renderText(text: string) {\r\n    return (\r\n      <Highlighter\r\n        highlightClassName=\"highlight-search-match\"\r\n        textToHighlight={text}\r\n        searchWords={[this.props.search]}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { rule, onTogglePause } = this.props;\r\n\r\n    const iconClassName = classNames({\r\n      fa: true,\r\n      'fa-play': rule.state === 'paused',\r\n      'fa-pause': rule.state !== 'paused',\r\n    });\r\n\r\n    const ruleUrl = `${rule.url}?panelId=${rule.panelId}&fullscreen&edit&tab=alert`;\r\n\r\n    return (\r\n      <li className=\"alert-rule-item\">\r\n        <span className={`alert-rule-item__icon ${rule.stateClass}`}>\r\n          <i className={rule.stateIcon} />\r\n        </span>\r\n        <div className=\"alert-rule-item__body\">\r\n          <div className=\"alert-rule-item__header\">\r\n            <div className=\"alert-rule-item__name\">\r\n              <a href={ruleUrl}>{this.renderText(rule.name)}</a>\r\n            </div>\r\n            <div className=\"alert-rule-item__text\">\r\n              <span className={`${rule.stateClass}`}>{this.renderText(rule.stateText)}</span>\r\n              <span className=\"alert-rule-item__time\"> for {rule.stateAge}</span>\r\n            </div>\r\n          </div>\r\n          {rule.info && <div className=\"small muted alert-rule-item__info\">{this.renderText(rule.info)}</div>}\r\n        </div>\r\n\r\n        <div className=\"alert-rule-item__actions\">\r\n          <button\r\n            className=\"btn btn-small btn-inverse alert-list__btn width-2\"\r\n            title=\"Pausing an alert rule prevents it from executing\"\r\n            onClick={onTogglePause}\r\n          >\r\n            <i className={iconClassName} />\r\n          </button>\r\n          <a className=\"btn btn-small btn-inverse alert-list__btn width-2\" href={ruleUrl} title=\"Edit alert rule\">\r\n            <i className=\"gicon gicon-cog\" />\r\n          </a>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AlertRuleItem;\r\n","import React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\nimport Page from 'app/core/components/Page/Page';\r\nimport AlertRuleItem from './AlertRuleItem';\r\nimport appEvents from 'app/core/app_events';\r\nimport { updateLocation } from 'app/core/actions';\r\nimport { getNavModel } from 'app/core/selectors/navModel';\r\nimport { AlertRule, CoreEvents, StoreState } from 'app/types';\r\nimport { getAlertRulesAsync, togglePauseAlertRule } from './state/actions';\r\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\r\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\r\nimport { NavModel } from '@grafana/data';\r\nimport { setSearchQuery } from './state/reducers';\r\n\r\nexport interface Props {\r\n  navModel: NavModel;\r\n  alertRules: AlertRule[];\r\n  updateLocation: typeof updateLocation;\r\n  getAlertRulesAsync: typeof getAlertRulesAsync;\r\n  setSearchQuery: typeof setSearchQuery;\r\n  togglePauseAlertRule: typeof togglePauseAlertRule;\r\n  stateFilter: string;\r\n  search: string;\r\n  isLoading: boolean;\r\n}\r\n\r\nexport class AlertRuleList extends PureComponent<Props, any> {\r\n  stateFilters = [\r\n    { text: 'All', value: 'all' },\r\n    { text: 'OK', value: 'ok' },\r\n    { text: 'Not OK', value: 'not_ok' },\r\n    { text: 'Alerting', value: 'alerting' },\r\n    { text: 'No Data', value: 'no_data' },\r\n    { text: 'Paused', value: 'paused' },\r\n    { text: 'Pending', value: 'pending' },\r\n  ];\r\n\r\n  componentDidMount() {\r\n    this.fetchRules();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props) {\r\n    if (prevProps.stateFilter !== this.props.stateFilter) {\r\n      this.fetchRules();\r\n    }\r\n  }\r\n\r\n  async fetchRules() {\r\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\r\n  }\r\n\r\n  getStateFilter(): string {\r\n    const { stateFilter } = this.props;\r\n    if (stateFilter) {\r\n      return stateFilter.toString();\r\n    }\r\n    return 'all';\r\n  }\r\n\r\n  onStateFilterChanged = (evt: React.ChangeEvent<HTMLSelectElement>) => {\r\n    this.props.updateLocation({\r\n      query: { state: evt.target.value },\r\n    });\r\n  };\r\n\r\n  onOpenHowTo = () => {\r\n    appEvents.emit(CoreEvents.showModal, {\r\n      src: 'public/app/features/alerting/partials/alert_howto.html',\r\n      modalClass: 'confirm-modal',\r\n      model: {},\r\n    });\r\n  };\r\n\r\n  onSearchQueryChange = (value: string) => {\r\n    this.props.setSearchQuery(value);\r\n  };\r\n\r\n  onTogglePause = (rule: AlertRule) => {\r\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\r\n  };\r\n\r\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\r\n    return (\r\n      <option key={value} value={value}>\r\n        {text}\r\n      </option>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { navModel, alertRules, search, isLoading } = this.props;\r\n\r\n    return (\r\n      <Page navModel={navModel}>\r\n        <Page.Contents isLoading={isLoading}>\r\n          <div className=\"page-action-bar\">\r\n            <div className=\"gf-form gf-form--grow\">\r\n              <FilterInput\r\n                labelClassName=\"gf-form--has-input-icon gf-form--grow\"\r\n                inputClassName=\"gf-form-input\"\r\n                placeholder=\"Search alerts\"\r\n                value={search}\r\n                onChange={this.onSearchQueryChange}\r\n              />\r\n            </div>\r\n            <div className=\"gf-form\">\r\n              <label className=\"gf-form-label\">States</label>\r\n\r\n              <div className=\"gf-form-select-wrapper width-13\">\r\n                <select className=\"gf-form-input\" onChange={this.onStateFilterChanged} value={this.getStateFilter()}>\r\n                  {this.stateFilters.map(this.alertStateFilterOption)}\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"page-action-bar__spacer\" />\r\n            <a className=\"btn btn-secondary\" onClick={this.onOpenHowTo}>\r\n              How to add an alert\r\n            </a>\r\n          </div>\r\n          <section>\r\n            <ol className=\"alert-rule-list\">\r\n              {alertRules.map(rule => (\r\n                <AlertRuleItem\r\n                  rule={rule}\r\n                  key={rule.id}\r\n                  search={search}\r\n                  onTogglePause={() => this.onTogglePause(rule)}\r\n                />\r\n              ))}\r\n            </ol>\r\n          </section>\r\n        </Page.Contents>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n  navModel: getNavModel(state.navIndex, 'alert-list'),\r\n  alertRules: getAlertRuleItems(state.alertRules),\r\n  stateFilter: state.location.query.state,\r\n  search: getSearchQuery(state.alertRules),\r\n  isLoading: state.alertRules.isLoading,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  updateLocation,\r\n  getAlertRulesAsync,\r\n  setSearchQuery,\r\n  togglePauseAlertRule,\r\n};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(AlertRuleList));\r\n","import { getBackendSrv } from '@grafana/runtime';\r\nimport { AlertRuleDTO, ThunkResult } from 'app/types';\r\nimport { loadAlertRules, loadedAlertRules } from './reducers';\r\n\r\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\r\n  return async dispatch => {\r\n    dispatch(loadAlertRules());\r\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\r\n    dispatch(loadedAlertRules(rules));\r\n  };\r\n}\r\n\r\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\r\n  return async (dispatch, getState) => {\r\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\r\n    const stateFilter = getState().location.query.state || 'all';\r\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\r\n  };\r\n}\r\n","import { AlertRulesState } from 'app/types';\r\n\r\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\r\n\r\nexport const getAlertRuleItems = (state: AlertRulesState) => {\r\n  const regex = new RegExp(state.searchQuery, 'i');\r\n\r\n  return state.items.filter(item => {\r\n    return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info);\r\n  });\r\n};\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAEA;AAQA;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AASA;AAAA;AAAA;;AAuDA;AAtDA;AACA;AAOA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAAA;AAGA;AAGA;AACA;AAKA;AAEA;AACA;AAKA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAcA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAKA;;AAgDA;AAlGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;AACA;;AAAA;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAgCA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAQA;AACA;AAEA;AACA;AAKA;AACA;AAIA;AACA;AAcA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;ACzJA;AAEA;AAEA;AAAA;AACA;;;;;AACA;AACA;;AAAA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;;AACA;;AAAA;AACA;AACA;;;;AACA;AACA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;A","sourceRoot":""}