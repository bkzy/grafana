{"version":3,"file":"AppRootPage.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/features/plugins/AppRootPage.tsx"],"sourcesContent":["// Libraries\r\nimport React, { Component } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\n\r\n// Types\r\nimport { StoreState } from 'app/types';\r\nimport { UrlQueryMap } from '@grafana/runtime';\r\n\r\nimport Page from 'app/core/components/Page/Page';\r\nimport { getPluginSettings } from './PluginSettingsCache';\r\nimport { importAppPlugin } from './plugin_loader';\r\nimport { AppPlugin, AppPluginMeta, PluginType, NavModel, AppEvents } from '@grafana/data';\r\nimport { getLoadingNav } from './PluginPage';\r\nimport { getNotFoundNav, getWarningNav } from 'app/core/nav_model_srv';\r\nimport { appEvents } from 'app/core/core';\r\n\r\ninterface Props {\r\n  pluginId: string; // From the angular router\r\n  query: UrlQueryMap;\r\n  path: string;\r\n  slug?: string;\r\n}\r\n\r\ninterface State {\r\n  loading: boolean;\r\n  plugin?: AppPlugin;\r\n  nav: NavModel;\r\n}\r\n\r\nexport function getAppPluginPageError(meta: AppPluginMeta) {\r\n  if (!meta) {\r\n    return 'Unknown Plugin';\r\n  }\r\n  if (meta.type !== PluginType.app) {\r\n    return 'Plugin must be an app';\r\n  }\r\n  if (!meta.enabled) {\r\n    return 'Application Not Enabled';\r\n  }\r\n  return null;\r\n}\r\n\r\nclass AppRootPage extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      nav: getLoadingNav(),\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { pluginId } = this.props;\r\n\r\n    try {\r\n      const app = await getPluginSettings(pluginId).then(info => {\r\n        const error = getAppPluginPageError(info);\r\n        if (error) {\r\n          appEvents.emit(AppEvents.alertError, [error]);\r\n          this.setState({ nav: getWarningNav(error) });\r\n          return null;\r\n        }\r\n        return importAppPlugin(info);\r\n      });\r\n      this.setState({ plugin: app, loading: false });\r\n    } catch (err) {\r\n      this.setState({ plugin: null, loading: false, nav: getNotFoundNav() });\r\n    }\r\n  }\r\n\r\n  onNavChanged = (nav: NavModel) => {\r\n    this.setState({ nav });\r\n  };\r\n\r\n  render() {\r\n    const { path, query } = this.props;\r\n    const { loading, plugin, nav } = this.state;\r\n\r\n    if (plugin && !plugin.root) {\r\n      // TODO? redirect to plugin page?\r\n      return <div>No Root App</div>;\r\n    }\r\n\r\n    return (\r\n      <Page navModel={nav}>\r\n        <Page.Contents isLoading={loading}>\r\n          {!loading && plugin && (\r\n            <plugin.root meta={plugin.meta} query={query} path={path} onNavChanged={this.onNavChanged} />\r\n          )}\r\n        </Page.Contents>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n  pluginId: state.location.routeParams.pluginId,\r\n  slug: state.location.routeParams.slug,\r\n  query: state.location.query,\r\n  path: state.location.path,\r\n});\r\n\r\nexport default hot(module)(connect(mapStateToProps)(AppRootPage));\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AA2BA;AACA;AACA;AA3BA;AACA;AACA;AACA;;AACA;AAEA;;;;;;;AACA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AARA;AASA;;;;AAEA;;;;;;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAOA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;A","sourceRoot":""}