{"version":3,"file":"CreateTeam.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/features/teams/CreateTeam.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\r\nimport Page from 'app/core/components/Page/Page';\r\nimport { hot } from 'react-hot-loader';\r\nimport { FormField, Button } from '@grafana/ui';\r\nimport { NavModel } from '@grafana/data';\r\nimport { getBackendSrv } from '@grafana/runtime';\r\nimport { updateLocation } from '../../core/actions';\r\nimport { connect } from 'react-redux';\r\nimport { getNavModel } from 'app/core/selectors/navModel';\r\nimport { StoreState } from 'app/types';\r\n\r\nexport interface Props {\r\n  navModel: NavModel;\r\n  updateLocation: typeof updateLocation;\r\n}\r\n\r\ninterface State {\r\n  name: string;\r\n  email: string;\r\n}\r\n\r\nexport class CreateTeam extends PureComponent<Props, State> {\r\n  state: State = {\r\n    name: '',\r\n    email: '',\r\n  };\r\n\r\n  create = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    const { name, email } = this.state;\r\n\r\n    const result = await getBackendSrv().post('/api/teams', { name, email });\r\n    if (result.teamId) {\r\n      this.props.updateLocation({ path: `/org/teams/edit/${result.teamId}` });\r\n    }\r\n  };\r\n\r\n  onEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      email: event.target.value,\r\n    });\r\n  };\r\n\r\n  onNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      name: event.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { navModel } = this.props;\r\n    const { name, email } = this.state;\r\n\r\n    return (\r\n      <Page navModel={navModel}>\r\n        <Page.Contents>\r\n          <>\r\n            <h3 className=\"page-sub-heading\">New Team</h3>\r\n\r\n            <form className=\"gf-form-group\" onSubmit={this.create}>\r\n              <FormField\r\n                className=\"gf-form\"\r\n                label=\"Name\"\r\n                value={name}\r\n                onChange={this.onNameChange}\r\n                inputWidth={30}\r\n                labelWidth={10}\r\n                required\r\n              />\r\n              <FormField\r\n                type=\"email\"\r\n                className=\"gf-form\"\r\n                label=\"Email\"\r\n                value={email}\r\n                onChange={this.onEmailChange}\r\n                inputWidth={30}\r\n                labelWidth={10}\r\n                placeholder=\"email@test.com\"\r\n                tooltip=\"This is optional and is primarily used for allowing custom team avatars.\"\r\n              />\r\n              <div className=\"gf-form-button-row\">\r\n                <Button type=\"submit\" variant=\"primary\">\r\n                  Create\r\n                </Button>\r\n              </div>\r\n            </form>\r\n          </>\r\n        </Page.Contents>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState) {\r\n  return {\r\n    navModel: getNavModel(state.navIndex, 'teams'),\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  updateLocation,\r\n};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(CreateTeam));\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAaA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;AACA;AAEA;AAEA;;AAAA;AACA;AACA;AACA;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AA4CA;AA1CA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AASA;AAWA;AACA;AASA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;A","sourceRoot":""}