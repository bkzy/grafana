{"version":3,"file":"DataSourceDashboards.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/features/datasources/DashboardsTable.tsx","webpack:///webpack:///./public/app/features/datasources/DataSourceDashboards.tsx"],"sourcesContent":["import React, { FC } from 'react';\r\nimport { PluginDashboard } from '../../types';\r\n\r\nexport interface Props {\r\n  dashboards: PluginDashboard[];\r\n  onImport: (dashboard: PluginDashboard, overwrite: boolean) => void;\r\n  onRemove: (dashboard: PluginDashboard) => void;\r\n}\r\n\r\nconst DashboardsTable: FC<Props> = ({ dashboards, onImport, onRemove }) => {\r\n  function buttonText(dashboard: PluginDashboard) {\r\n    return dashboard.revision !== dashboard.importedRevision ? 'Update' : 'Re-import';\r\n  }\r\n\r\n  return (\r\n    <table className=\"filter-table\">\r\n      <tbody>\r\n        {dashboards.map((dashboard, index) => {\r\n          return (\r\n            <tr key={`${dashboard.dashboardId}-${index}`}>\r\n              <td className=\"width-1\">\r\n                <i className=\"gicon gicon-dashboard\" />\r\n              </td>\r\n              <td>\r\n                {dashboard.imported ? (\r\n                  <a href={dashboard.importedUrl}>{dashboard.title}</a>\r\n                ) : (\r\n                  <span>{dashboard.title}</span>\r\n                )}\r\n              </td>\r\n              <td style={{ textAlign: 'right' }}>\r\n                {!dashboard.imported ? (\r\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, false)}>\r\n                    Import\r\n                  </button>\r\n                ) : (\r\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, true)}>\r\n                    {buttonText(dashboard)}\r\n                  </button>\r\n                )}\r\n                {dashboard.imported && (\r\n                  <button className=\"btn btn-danger btn-small\" onClick={() => onRemove(dashboard)}>\r\n                    <i className=\"fa fa-trash\" />\r\n                  </button>\r\n                )}\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default DashboardsTable;\r\n","// Libraries\r\nimport React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\n\r\n// Components\r\nimport Page from 'app/core/components/Page/Page';\r\nimport DashboardTable from './DashboardsTable';\r\n\r\n// Actions & Selectors\r\nimport { getNavModel } from 'app/core/selectors/navModel';\r\nimport { getRouteParamsId } from 'app/core/selectors/location';\r\nimport { loadDataSource } from './state/actions';\r\nimport { loadPluginDashboards } from '../plugins/state/actions';\r\nimport { importDashboard, removeDashboard } from '../dashboard/state/actions';\r\nimport { getDataSource } from './state/selectors';\r\n\r\n// Types\r\nimport { PluginDashboard, StoreState } from 'app/types';\r\nimport { DataSourceSettings } from '@grafana/data';\r\nimport { NavModel } from '@grafana/data';\r\n\r\nexport interface Props {\r\n  navModel: NavModel;\r\n  dashboards: PluginDashboard[];\r\n  dataSource: DataSourceSettings;\r\n  pageId: number;\r\n  importDashboard: typeof importDashboard;\r\n  loadDataSource: typeof loadDataSource;\r\n  loadPluginDashboards: typeof loadPluginDashboards;\r\n  removeDashboard: typeof removeDashboard;\r\n  isLoading: boolean;\r\n}\r\n\r\nexport class DataSourceDashboards extends PureComponent<Props> {\r\n  async componentDidMount() {\r\n    const { loadDataSource, pageId } = this.props;\r\n\r\n    await loadDataSource(pageId);\r\n    this.props.loadPluginDashboards();\r\n  }\r\n\r\n  onImport = (dashboard: PluginDashboard, overwrite: boolean) => {\r\n    const { dataSource, importDashboard } = this.props;\r\n    const data: any = {\r\n      pluginId: dashboard.pluginId,\r\n      path: dashboard.path,\r\n      overwrite,\r\n      inputs: [],\r\n    };\r\n\r\n    if (dataSource) {\r\n      data.inputs.push({\r\n        name: '*',\r\n        type: 'datasource',\r\n        pluginId: dataSource.type,\r\n        value: dataSource.name,\r\n      });\r\n    }\r\n\r\n    importDashboard(data, dashboard.title);\r\n  };\r\n\r\n  onRemove = (dashboard: PluginDashboard) => {\r\n    this.props.removeDashboard(dashboard.importedUri);\r\n  };\r\n\r\n  render() {\r\n    const { dashboards, navModel, isLoading } = this.props;\r\n    return (\r\n      <Page navModel={navModel}>\r\n        <Page.Contents isLoading={isLoading}>\r\n          <DashboardTable\r\n            dashboards={dashboards}\r\n            onImport={(dashboard, overwrite) => this.onImport(dashboard, overwrite)}\r\n            onRemove={dashboard => this.onRemove(dashboard)}\r\n          />\r\n        </Page.Contents>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState) {\r\n  const pageId = getRouteParamsId(state.location);\r\n  return {\r\n    navModel: getNavModel(state.navIndex, `datasource-dashboards-${pageId}`),\r\n    pageId: pageId,\r\n    dashboards: state.plugins.dashboards,\r\n    dataSource: getDataSource(state.dataSources, pageId),\r\n    isLoading: state.plugins.isLoadingPluginDashboards,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  importDashboard,\r\n  loadDataSource,\r\n  loadPluginDashboards,\r\n  removeDashboard,\r\n};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(DataSourceDashboards));\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAOA;AACA;AASA;AAEA;AAMA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAmBA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAgBA;AA9CA;;;;;;AACA;AAEA;;AAAA;AACA;;;;;AACA;AA2BA;AAAA;AACA;AACA;AAEA;AACA;AAQA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;A","sourceRoot":""}