{"version":3,"file":"DataSourceSettingsPage.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/features/datasources/settings/BasicSettings.tsx","webpack:///webpack:///./public/app/features/datasources/settings/ButtonRow.tsx","webpack:///webpack:///./public/app/features/datasources/settings/DataSourceSettingsPage.tsx","webpack:///webpack:///./public/app/features/datasources/settings/PluginSettings.tsx","webpack:///webpack:///./public/app/features/plugins/PluginStateInfo.tsx"],"sourcesContent":["import React, { FC } from 'react';\r\nimport { FormLabel, Input, Switch } from '@grafana/ui';\r\nimport { e2e } from '@grafana/e2e';\r\n\r\nexport interface Props {\r\n  dataSourceName: string;\r\n  isDefault: boolean;\r\n  onNameChange: (name: string) => void;\r\n  onDefaultChange: (value: boolean) => void;\r\n}\r\n\r\nconst BasicSettings: FC<Props> = ({ dataSourceName, isDefault, onDefaultChange, onNameChange }) => {\r\n  return (\r\n    <div className=\"gf-form-group\" aria-label=\"Datasource settings page basic settings\">\r\n      <div className=\"gf-form-inline\">\r\n        <div className=\"gf-form max-width-30\" style={{ marginRight: '3px' }}>\r\n          <FormLabel\r\n            tooltip={\r\n              'The name is used when you select the data source in panels. The Default data source is ' +\r\n              'preselected in new panels.'\r\n            }\r\n          >\r\n            Name\r\n          </FormLabel>\r\n          <Input\r\n            className=\"gf-form-input max-width-23\"\r\n            type=\"text\"\r\n            value={dataSourceName}\r\n            placeholder=\"Name\"\r\n            onChange={event => onNameChange(event.target.value)}\r\n            required\r\n            aria-label={e2e.pages.DataSource.selectors.name}\r\n          />\r\n        </div>\r\n        <Switch\r\n          label=\"Default\"\r\n          checked={isDefault}\r\n          onChange={event => {\r\n            // @ts-ignore\r\n            onDefaultChange(event.target.checked);\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BasicSettings;\r\n","import React, { FC } from 'react';\r\nimport { e2e } from '@grafana/e2e';\r\n\r\nimport config from 'app/core/config';\r\n\r\nexport interface Props {\r\n  isReadOnly: boolean;\r\n  onDelete: () => void;\r\n  onSubmit: (event: any) => void;\r\n  onTest: (event: any) => void;\r\n}\r\n\r\nconst ButtonRow: FC<Props> = ({ isReadOnly, onDelete, onSubmit, onTest }) => {\r\n  return (\r\n    <div className=\"gf-form-button-row\">\r\n      {!isReadOnly && (\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn-primary\"\r\n          disabled={isReadOnly}\r\n          onClick={event => onSubmit(event)}\r\n          aria-label={e2e.pages.DataSource.selectors.saveAndTest}\r\n        >\r\n          Save &amp; Test\r\n        </button>\r\n      )}\r\n      {isReadOnly && (\r\n        <button type=\"submit\" className=\"btn btn-success\" onClick={onTest}>\r\n          Test\r\n        </button>\r\n      )}\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-danger\"\r\n        disabled={isReadOnly}\r\n        onClick={onDelete}\r\n        aria-label={e2e.pages.DataSource.selectors.delete}\r\n      >\r\n        Delete\r\n      </button>\r\n      <a className=\"btn btn-inverse\" href={`${config.appSubUrl}/datasources`}>\r\n        Back\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonRow;\r\n","// Libraries\r\nimport React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\nimport isString from 'lodash/isString';\r\nimport { e2e } from '@grafana/e2e';\r\n// Components\r\nimport Page from 'app/core/components/Page/Page';\r\nimport { GenericDataSourcePlugin, PluginSettings } from './PluginSettings';\r\nimport BasicSettings from './BasicSettings';\r\nimport ButtonRow from './ButtonRow';\r\n// Services & Utils\r\nimport appEvents from 'app/core/app_events';\r\nimport { getBackendSrv } from 'app/core/services/backend_srv';\r\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\r\n// Actions & selectors\r\nimport { getDataSource, getDataSourceMeta } from '../state/selectors';\r\nimport { deleteDataSource, loadDataSource, updateDataSource } from '../state/actions';\r\nimport { getNavModel } from 'app/core/selectors/navModel';\r\nimport { getRouteParamsId } from 'app/core/selectors/location';\r\n// Types\r\nimport { CoreEvents, StoreState } from 'app/types/';\r\nimport { UrlQueryMap } from '@grafana/runtime';\r\nimport { DataSourcePluginMeta, DataSourceSettings, NavModel } from '@grafana/data';\r\nimport { getDataSourceLoadingNav } from '../state/navModel';\r\nimport PluginStateinfo from 'app/features/plugins/PluginStateInfo';\r\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\r\nimport { dataSourceLoaded, setDataSourceName, setIsDefault } from '../state/reducers';\r\n\r\nexport interface Props {\r\n  navModel: NavModel;\r\n  dataSource: DataSourceSettings;\r\n  dataSourceMeta: DataSourcePluginMeta;\r\n  pageId: number;\r\n  deleteDataSource: typeof deleteDataSource;\r\n  loadDataSource: typeof loadDataSource;\r\n  setDataSourceName: typeof setDataSourceName;\r\n  updateDataSource: typeof updateDataSource;\r\n  setIsDefault: typeof setIsDefault;\r\n  dataSourceLoaded: typeof dataSourceLoaded;\r\n  plugin?: GenericDataSourcePlugin;\r\n  query: UrlQueryMap;\r\n  page?: string;\r\n}\r\n\r\ninterface State {\r\n  plugin?: GenericDataSourcePlugin;\r\n  isTesting?: boolean;\r\n  testingMessage?: string;\r\n  testingStatus?: string;\r\n  loadError?: any;\r\n}\r\n\r\nexport class DataSourceSettingsPage extends PureComponent<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      plugin: props.plugin,\r\n    };\r\n  }\r\n\r\n  async loadPlugin(pluginId?: string) {\r\n    const { dataSourceMeta } = this.props;\r\n    let importedPlugin: GenericDataSourcePlugin;\r\n\r\n    try {\r\n      importedPlugin = await importDataSourcePlugin(dataSourceMeta);\r\n    } catch (e) {\r\n      console.log('Failed to import plugin module', e);\r\n    }\r\n\r\n    this.setState({ plugin: importedPlugin });\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { loadDataSource, pageId } = this.props;\r\n    if (isNaN(pageId)) {\r\n      this.setState({ loadError: 'Invalid ID' });\r\n      return;\r\n    }\r\n    try {\r\n      await loadDataSource(pageId);\r\n      if (!this.state.plugin) {\r\n        await this.loadPlugin();\r\n      }\r\n    } catch (err) {\r\n      this.setState({ loadError: err });\r\n    }\r\n  }\r\n\r\n  onSubmit = async (evt: React.FormEvent<HTMLFormElement>) => {\r\n    evt.preventDefault();\r\n\r\n    await this.props.updateDataSource({ ...this.props.dataSource });\r\n\r\n    this.testDataSource();\r\n  };\r\n\r\n  onTest = async (evt: React.FormEvent<HTMLFormElement>) => {\r\n    evt.preventDefault();\r\n\r\n    this.testDataSource();\r\n  };\r\n\r\n  onDelete = () => {\r\n    appEvents.emit(CoreEvents.showConfirmModal, {\r\n      title: 'Delete',\r\n      text: 'Are you sure you want to delete this data source?',\r\n      yesText: 'Delete',\r\n      icon: 'fa-trash',\r\n      onConfirm: () => {\r\n        this.confirmDelete();\r\n      },\r\n    });\r\n  };\r\n\r\n  confirmDelete = () => {\r\n    this.props.deleteDataSource();\r\n  };\r\n\r\n  onModelChange = (dataSource: DataSourceSettings) => {\r\n    this.props.dataSourceLoaded(dataSource);\r\n  };\r\n\r\n  isReadOnly() {\r\n    return this.props.dataSource.readOnly === true;\r\n  }\r\n\r\n  renderIsReadOnlyMessage() {\r\n    return (\r\n      <div className=\"grafana-info-box span8\">\r\n        This datasource was added by config and cannot be modified using the UI. Please contact your server admin to\r\n        update this datasource.\r\n      </div>\r\n    );\r\n  }\r\n\r\n  async testDataSource() {\r\n    const dsApi = await getDatasourceSrv().get(this.props.dataSource.name);\r\n\r\n    if (!dsApi.testDatasource) {\r\n      return;\r\n    }\r\n\r\n    this.setState({ isTesting: true, testingMessage: 'Testing...', testingStatus: 'info' });\r\n\r\n    getBackendSrv().withNoBackendCache(async () => {\r\n      try {\r\n        const result = await dsApi.testDatasource();\r\n\r\n        this.setState({\r\n          isTesting: false,\r\n          testingStatus: result.status,\r\n          testingMessage: result.message,\r\n        });\r\n      } catch (err) {\r\n        let message = '';\r\n\r\n        if (err.statusText) {\r\n          message = 'HTTP Error ' + err.statusText;\r\n        } else {\r\n          message = err.message;\r\n        }\r\n\r\n        this.setState({\r\n          isTesting: false,\r\n          testingStatus: 'error',\r\n          testingMessage: message,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  get hasDataSource() {\r\n    return this.props.dataSource.id > 0;\r\n  }\r\n\r\n  renderLoadError(loadError: any) {\r\n    let showDelete = false;\r\n    let msg = loadError.toString();\r\n    if (loadError.data) {\r\n      if (loadError.data.message) {\r\n        msg = loadError.data.message;\r\n      }\r\n    } else if (isString(loadError)) {\r\n      showDelete = true;\r\n    }\r\n\r\n    const node = {\r\n      text: msg,\r\n      subTitle: 'Data Source Error',\r\n      icon: 'fa fa-fw fa-warning',\r\n    };\r\n    const nav = {\r\n      node: node,\r\n      main: node,\r\n    };\r\n\r\n    return (\r\n      <Page navModel={nav}>\r\n        <Page.Contents>\r\n          <div>\r\n            <div className=\"gf-form-button-row\">\r\n              {showDelete && (\r\n                <button type=\"submit\" className=\"btn btn-danger\" onClick={this.onDelete}>\r\n                  Delete\r\n                </button>\r\n              )}\r\n              <a className=\"btn btn-inverse\" href=\"datasources\">\r\n                Back\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </Page.Contents>\r\n      </Page>\r\n    );\r\n  }\r\n\r\n  renderConfigPageBody(page: string) {\r\n    const { plugin } = this.state;\r\n    if (!plugin || !plugin.configPages) {\r\n      return null; // still loading\r\n    }\r\n\r\n    for (const p of plugin.configPages) {\r\n      if (p.id === page) {\r\n        return <p.body plugin={plugin} query={this.props.query} />;\r\n      }\r\n    }\r\n\r\n    return <div>Page Not Found: {page}</div>;\r\n  }\r\n\r\n  renderSettings() {\r\n    const { dataSourceMeta, setDataSourceName, setIsDefault, dataSource } = this.props;\r\n    const { testingMessage, testingStatus, plugin } = this.state;\r\n\r\n    return (\r\n      <form onSubmit={this.onSubmit}>\r\n        {this.isReadOnly() && this.renderIsReadOnlyMessage()}\r\n        {dataSourceMeta.state && (\r\n          <div className=\"gf-form\">\r\n            <label className=\"gf-form-label width-10\">Plugin state</label>\r\n            <label className=\"gf-form-label gf-form-label--transparent\">\r\n              <PluginStateinfo state={dataSourceMeta.state} />\r\n            </label>\r\n          </div>\r\n        )}\r\n\r\n        <BasicSettings\r\n          dataSourceName={dataSource.name}\r\n          isDefault={dataSource.isDefault}\r\n          onDefaultChange={state => setIsDefault(state)}\r\n          onNameChange={name => setDataSourceName(name)}\r\n        />\r\n\r\n        {plugin && (\r\n          <PluginSettings\r\n            plugin={plugin}\r\n            dataSource={dataSource}\r\n            dataSourceMeta={dataSourceMeta}\r\n            onModelChange={this.onModelChange}\r\n          />\r\n        )}\r\n\r\n        <div className=\"gf-form-group\">\r\n          {testingMessage && (\r\n            <div className={`alert-${testingStatus} alert`} aria-label={e2e.pages.DataSource.selectors.alert}>\r\n              <div className=\"alert-icon\">\r\n                {testingStatus === 'error' ? (\r\n                  <i className=\"fa fa-exclamation-triangle\" />\r\n                ) : (\r\n                  <i className=\"fa fa-check\" />\r\n                )}\r\n              </div>\r\n              <div className=\"alert-body\">\r\n                <div className=\"alert-title\" aria-label={e2e.pages.DataSource.selectors.alertMessage}>\r\n                  {testingMessage}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <ButtonRow\r\n          onSubmit={event => this.onSubmit(event)}\r\n          isReadOnly={this.isReadOnly()}\r\n          onDelete={this.onDelete}\r\n          onTest={event => this.onTest(event)}\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { navModel, page } = this.props;\r\n    const { loadError } = this.state;\r\n\r\n    if (loadError) {\r\n      return this.renderLoadError(loadError);\r\n    }\r\n\r\n    return (\r\n      <Page navModel={navModel}>\r\n        <Page.Contents isLoading={!this.hasDataSource}>\r\n          {this.hasDataSource && <div>{page ? this.renderConfigPageBody(page) : this.renderSettings()}</div>}\r\n        </Page.Contents>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState) {\r\n  const pageId = getRouteParamsId(state.location);\r\n  const dataSource = getDataSource(state.dataSources, pageId);\r\n  const page = state.location.query.page as string;\r\n\r\n  return {\r\n    navModel: getNavModel(\r\n      state.navIndex,\r\n      page ? `datasource-page-${page}` : `datasource-settings-${pageId}`,\r\n      getDataSourceLoadingNav('settings')\r\n    ),\r\n    dataSource: getDataSource(state.dataSources, pageId),\r\n    dataSourceMeta: getDataSourceMeta(state.dataSources, dataSource.type),\r\n    pageId: pageId,\r\n    query: state.location.query,\r\n    page,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  deleteDataSource,\r\n  loadDataSource,\r\n  setDataSourceName,\r\n  updateDataSource,\r\n  setIsDefault,\r\n  dataSourceLoaded,\r\n};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(DataSourceSettingsPage));\r\n","import React, { PureComponent } from 'react';\r\nimport _ from 'lodash';\r\nimport {\r\n  DataSourceSettings,\r\n  DataSourcePlugin,\r\n  DataSourcePluginMeta,\r\n  DataSourceApi,\r\n  DataQuery,\r\n  DataSourceJsonData,\r\n} from '@grafana/data';\r\nimport { getAngularLoader, AngularComponent } from '@grafana/runtime';\r\n\r\nexport type GenericDataSourcePlugin = DataSourcePlugin<DataSourceApi<DataQuery, DataSourceJsonData>>;\r\n\r\nexport interface Props {\r\n  plugin: GenericDataSourcePlugin;\r\n  dataSource: DataSourceSettings;\r\n  dataSourceMeta: DataSourcePluginMeta;\r\n  onModelChange: (dataSource: DataSourceSettings) => void;\r\n}\r\n\r\nexport class PluginSettings extends PureComponent<Props> {\r\n  element: any;\r\n  component: AngularComponent;\r\n  scopeProps: {\r\n    ctrl: { datasourceMeta: DataSourcePluginMeta; current: DataSourceSettings };\r\n    onModelChanged: (dataSource: DataSourceSettings) => void;\r\n  };\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.scopeProps = {\r\n      ctrl: { datasourceMeta: props.dataSourceMeta, current: _.cloneDeep(props.dataSource) },\r\n      onModelChanged: this.onModelChanged,\r\n    };\r\n    this.onModelChanged = this.onModelChanged.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { plugin } = this.props;\r\n\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (!plugin.components.ConfigEditor) {\r\n      // React editor is not specified, let's render angular editor\r\n      // How to apprach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\r\n      const loader = getAngularLoader();\r\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\r\n\r\n      this.component = loader.load(this.element, this.scopeProps, template);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props) {\r\n    const { plugin } = this.props;\r\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\r\n      this.scopeProps.ctrl.current = _.cloneDeep(this.props.dataSource);\r\n\r\n      this.component.digest();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.component) {\r\n      this.component.destroy();\r\n    }\r\n  }\r\n\r\n  onModelChanged = (dataSource: DataSourceSettings) => {\r\n    this.props.onModelChange(dataSource);\r\n  };\r\n\r\n  render() {\r\n    const { plugin, dataSource } = this.props;\r\n\r\n    if (!plugin) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div ref={element => (this.element = element)}>\r\n        {plugin.components.ConfigEditor &&\r\n          React.createElement(plugin.components.ConfigEditor, {\r\n            options: dataSource,\r\n            onOptionsChange: this.onModelChanged,\r\n          })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PluginSettings;\r\n","import React, { FC } from 'react';\r\nimport { AlphaNotice } from '@grafana/ui';\r\nimport { PluginState } from '@grafana/data';\r\nimport { css } from 'emotion';\r\n\r\ninterface Props {\r\n  state?: PluginState;\r\n}\r\n\r\nfunction getPluginStateInfoText(state?: PluginState): string | null {\r\n  switch (state) {\r\n    case PluginState.alpha:\r\n      return 'Alpha Plugin: This plugin is a work in progress and updates may include breaking changes';\r\n    case PluginState.beta:\r\n      return 'Beta Plugin: There could be bugs and minor breaking changes to this plugin';\r\n  }\r\n  return null;\r\n}\r\n\r\nconst PluginStateinfo: FC<Props> = props => {\r\n  const text = getPluginStateInfoText(props.state);\r\n\r\n  if (!text) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <AlphaNotice\r\n      state={props.state}\r\n      text={text}\r\n      className={css`\r\n        margin-left: 16px;\r\n      `}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PluginStateinfo;\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AASA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AAKA;AAUA;AAIA;AACA;AACA;AAKA;AAEA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AASA;AAAA;AACA;AAEA;AAWA;AAKA;AASA;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AA0BA;AAAA;AACA;AAAA;AAqCA;;;;AACA;AAEA;;AAAA;AAEA;;;;AACA;AAEA;;AACA;AAEA;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAlEA;AACA;AACA;;AACA;AAEA;;;;;;AACA;;;;AAIA;;AAAA;;;;AAEA;;;AAGA;;;;;AACA;AAEA;;;;;;AACA;AACA;AACA;AACA;AACA;;;;AAEA;;AAAA;AACA;AACA;;AAAA;;;;;AAGA;;;;;;AAEA;AAoCA;AACA;AACA;AAEA;AACA;AAMA;AAEA;;;;;;AACA;;AAAA;AAEA;AACA;AACA;AAEA;AAEA;;;;;;AAEA;;AAAA;AAEA;AACA;AACA;AACA;AACA;;;;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AAEA;;;;;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AAQA;AAEA;;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;AAEA;;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AAOA;AASA;AAGA;AAOA;AACA;AAQA;AAQA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;ACrVA;AACA;AASA;AAWA;AAAA;AAQA;AAAA;AA0CA;AACA;AACA;AAzCA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;AC9FA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AASA;AAEA;;;;;;A","sourceRoot":""}