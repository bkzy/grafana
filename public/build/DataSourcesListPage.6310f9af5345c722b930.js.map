{"version":3,"file":"DataSourcesListPage.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/core/components/FilterInput/FilterInput.tsx","webpack:///webpack:///./public/app/core/components/OrgActionBar/OrgActionBar.tsx","webpack:///webpack:///./public/app/features/datasources/DataSourcesList.tsx","webpack:///webpack:///./public/app/features/datasources/DataSourcesListItem.tsx","webpack:///webpack:///./public/app/features/datasources/DataSourcesListPage.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\r\nimport { escapeStringForRegex, unEscapeStringFromRegex } from '@grafana/data';\r\n\r\nexport interface Props {\r\n  value: string | undefined;\r\n  placeholder?: string;\r\n  labelClassName?: string;\r\n  inputClassName?: string;\r\n  onChange: (value: string) => void;\r\n}\r\n\r\nexport const FilterInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\r\n  <label className={props.labelClassName}>\r\n    <input\r\n      ref={ref}\r\n      type=\"text\"\r\n      className={props.inputClassName}\r\n      value={unEscapeStringFromRegex(props.value)}\r\n      onChange={event => props.onChange(escapeStringForRegex(event.target.value))}\r\n      placeholder={props.placeholder ? props.placeholder : null}\r\n    />\r\n    <i className=\"gf-form-input-icon fa fa-search\" />\r\n  </label>\r\n));\r\n","import React, { PureComponent } from 'react';\r\nimport LayoutSelector, { LayoutMode } from '../LayoutSelector/LayoutSelector';\r\nimport { FilterInput } from '../FilterInput/FilterInput';\r\n\r\nexport interface Props {\r\n  searchQuery: string;\r\n  layoutMode?: LayoutMode;\r\n  onSetLayoutMode?: (mode: LayoutMode) => {};\r\n  setSearchQuery: (value: string) => {};\r\n  linkButton: { href: string; title: string };\r\n  target?: string;\r\n}\r\n\r\nexport default class OrgActionBar extends PureComponent<Props> {\r\n  render() {\r\n    const { searchQuery, layoutMode, onSetLayoutMode, linkButton, setSearchQuery, target } = this.props;\r\n    const linkProps = { href: linkButton.href };\r\n\r\n    if (target) {\r\n      (linkProps as any).target = target;\r\n    }\r\n\r\n    return (\r\n      <div className=\"page-action-bar\">\r\n        <div className=\"gf-form gf-form--grow\">\r\n          <FilterInput\r\n            labelClassName=\"gf-form--has-input-icon\"\r\n            inputClassName=\"gf-form-input width-20\"\r\n            value={searchQuery}\r\n            onChange={setSearchQuery}\r\n            placeholder={'Filter by name or type'}\r\n          />\r\n          <LayoutSelector mode={layoutMode} onLayoutModeChanged={(mode: LayoutMode) => onSetLayoutMode(mode)} />\r\n        </div>\r\n        <div className=\"page-action-bar__spacer\" />\r\n        <a className=\"btn btn-primary\" {...linkProps}>\r\n          {linkButton.title}\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// Libraries\r\nimport React, { PureComponent } from 'react';\r\nimport classNames from 'classnames';\r\n\r\n// Components\r\nimport DataSourcesListItem from './DataSourcesListItem';\r\n\r\n// Types\r\nimport { DataSourceSettings } from '@grafana/data';\r\nimport { LayoutMode, LayoutModes } from '../../core/components/LayoutSelector/LayoutSelector';\r\n\r\nexport interface Props {\r\n  dataSources: DataSourceSettings[];\r\n  layoutMode: LayoutMode;\r\n}\r\n\r\nexport class DataSourcesList extends PureComponent<Props> {\r\n  render() {\r\n    const { dataSources, layoutMode } = this.props;\r\n\r\n    const listStyle = classNames({\r\n      'card-section': true,\r\n      'card-list-layout-grid': layoutMode === LayoutModes.Grid,\r\n      'card-list-layout-list': layoutMode === LayoutModes.List,\r\n    });\r\n\r\n    return (\r\n      <section className={listStyle}>\r\n        <ol className=\"card-list\">\r\n          {dataSources.map((dataSource, index) => {\r\n            return <DataSourcesListItem dataSource={dataSource} key={`${dataSource.id}-${index}`} />;\r\n          })}\r\n        </ol>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataSourcesList;\r\n","import React, { PureComponent } from 'react';\r\nimport { DataSourceSettings } from '@grafana/data';\r\nimport { e2e } from '@grafana/e2e';\r\n\r\nexport interface Props {\r\n  dataSource: DataSourceSettings;\r\n}\r\n\r\nexport class DataSourcesListItem extends PureComponent<Props> {\r\n  render() {\r\n    const { dataSource } = this.props;\r\n    return (\r\n      <li className=\"card-item-wrapper\">\r\n        <a className=\"card-item\" href={`datasources/edit/${dataSource.id}`}>\r\n          <div className=\"card-item-header\">\r\n            <div className=\"card-item-type\">{dataSource.type}</div>\r\n          </div>\r\n          <div className=\"card-item-body\">\r\n            <figure className=\"card-item-figure\">\r\n              <img src={dataSource.typeLogoUrl} alt={dataSource.name} />\r\n            </figure>\r\n            <div className=\"card-item-details\">\r\n              <div className=\"card-item-name\" aria-label={e2e.pages.DataSources.selectors.dataSources(dataSource.name)}>\r\n                {dataSource.name}\r\n                {dataSource.isDefault && <span className=\"btn btn-secondary btn-small card-item-label\">default</span>}\r\n              </div>\r\n              <div className=\"card-item-sub-name\">{dataSource.url}</div>\r\n            </div>\r\n          </div>\r\n        </a>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataSourcesListItem;\r\n","// Libraries\r\nimport React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { hot } from 'react-hot-loader';\r\n// Components\r\nimport Page from 'app/core/components/Page/Page';\r\nimport OrgActionBar from 'app/core/components/OrgActionBar/OrgActionBar';\r\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\r\nimport DataSourcesList from './DataSourcesList';\r\n// Types\r\nimport { DataSourceSettings, NavModel } from '@grafana/data';\r\nimport { StoreState } from 'app/types';\r\nimport { LayoutMode } from 'app/core/components/LayoutSelector/LayoutSelector';\r\n// Actions\r\nimport { loadDataSources } from './state/actions';\r\nimport { getNavModel } from 'app/core/selectors/navModel';\r\n\r\nimport {\r\n  getDataSources,\r\n  getDataSourcesCount,\r\n  getDataSourcesLayoutMode,\r\n  getDataSourcesSearchQuery,\r\n} from './state/selectors';\r\nimport { setDataSourcesLayoutMode, setDataSourcesSearchQuery } from './state/reducers';\r\n\r\nexport interface Props {\r\n  navModel: NavModel;\r\n  dataSources: DataSourceSettings[];\r\n  dataSourcesCount: number;\r\n  layoutMode: LayoutMode;\r\n  searchQuery: string;\r\n  hasFetched: boolean;\r\n  loadDataSources: typeof loadDataSources;\r\n  setDataSourcesLayoutMode: typeof setDataSourcesLayoutMode;\r\n  setDataSourcesSearchQuery: typeof setDataSourcesSearchQuery;\r\n}\r\n\r\nconst emptyListModel = {\r\n  title: 'There are no data sources defined yet',\r\n  buttonIcon: 'gicon gicon-datasources',\r\n  buttonLink: 'datasources/new',\r\n  buttonTitle: 'Add data source',\r\n  proTip: 'You can also define data sources through configuration files.',\r\n  proTipLink: 'http://docs.grafana.org/administration/provisioning/#datasources?utm_source=grafana_ds_list',\r\n  proTipLinkTitle: 'Learn more',\r\n  proTipTarget: '_blank',\r\n};\r\n\r\nexport class DataSourcesListPage extends PureComponent<Props> {\r\n  componentDidMount() {\r\n    this.fetchDataSources();\r\n  }\r\n\r\n  async fetchDataSources() {\r\n    return await this.props.loadDataSources();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      dataSources,\r\n      dataSourcesCount,\r\n      navModel,\r\n      layoutMode,\r\n      searchQuery,\r\n      setDataSourcesSearchQuery,\r\n      setDataSourcesLayoutMode,\r\n      hasFetched,\r\n    } = this.props;\r\n\r\n    const linkButton = {\r\n      href: 'datasources/new',\r\n      title: 'Add data source',\r\n    };\r\n\r\n    return (\r\n      <Page navModel={navModel}>\r\n        <Page.Contents isLoading={!hasFetched}>\r\n          <>\r\n            {hasFetched && dataSourcesCount === 0 && <EmptyListCTA {...emptyListModel} />}\r\n            {hasFetched &&\r\n              dataSourcesCount > 0 && [\r\n                <OrgActionBar\r\n                  layoutMode={layoutMode}\r\n                  searchQuery={searchQuery}\r\n                  onSetLayoutMode={mode => setDataSourcesLayoutMode(mode)}\r\n                  setSearchQuery={query => setDataSourcesSearchQuery(query)}\r\n                  linkButton={linkButton}\r\n                  key=\"action-bar\"\r\n                />,\r\n                <DataSourcesList dataSources={dataSources} layoutMode={layoutMode} key=\"list\" />,\r\n              ]}\r\n          </>\r\n        </Page.Contents>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState) {\r\n  return {\r\n    navModel: getNavModel(state.navIndex, 'datasources'),\r\n    dataSources: getDataSources(state.dataSources),\r\n    layoutMode: getDataSourcesLayoutMode(state.dataSources),\r\n    dataSourcesCount: getDataSourcesCount(state.dataSources),\r\n    searchQuery: getDataSourcesSearchQuery(state.dataSources),\r\n    hasFetched: state.dataSources.hasFetched,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  loadDataSources,\r\n  setDataSourcesSearchQuery,\r\n  setDataSourcesLayoutMode,\r\n};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(DataSourcesListPage));\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAEA;AAQA;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AAWA;AAAA;AAAA;;AA4BA;AA3BA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAOA;AAEA;AACA;AAKA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AAEA;AACA;AAIA;AAOA;AAAA;AAAA;;AAoBA;AAnBA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAIA;AACA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;ACtCA;AAEA;AAMA;AAAA;AAAA;;AAyBA;AAxBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAMA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;AAgDA;AA/CA;AACA;AACA;AAEA;;;;AACA;AAAA;;;;AACA;AAEA;AACA;AAWA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAKA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;A","sourceRoot":""}