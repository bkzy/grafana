{"version":3,"file":"FolderPermissions.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/features/folders/FolderPermissions.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\nimport Page from 'app/core/components/Page/Page';\r\nimport { Tooltip } from '@grafana/ui';\r\nimport { NavModel } from '@grafana/data';\r\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\r\nimport { getNavModel } from 'app/core/selectors/navModel';\r\nimport { StoreState, FolderState } from 'app/types';\r\nimport { DashboardAcl, PermissionLevel, NewDashboardAclItem } from 'app/types/acl';\r\nimport {\r\n  getFolderByUid,\r\n  getFolderPermissions,\r\n  updateFolderPermission,\r\n  removeFolderPermission,\r\n  addFolderPermission,\r\n} from './state/actions';\r\nimport { getLoadingNav } from './state/navModel';\r\nimport PermissionList from 'app/core/components/PermissionList/PermissionList';\r\nimport AddPermission from 'app/core/components/PermissionList/AddPermission';\r\nimport PermissionsInfo from 'app/core/components/PermissionList/PermissionsInfo';\r\n\r\nexport interface Props {\r\n  navModel: NavModel;\r\n  folderUid: string;\r\n  folder: FolderState;\r\n  getFolderByUid: typeof getFolderByUid;\r\n  getFolderPermissions: typeof getFolderPermissions;\r\n  updateFolderPermission: typeof updateFolderPermission;\r\n  removeFolderPermission: typeof removeFolderPermission;\r\n  addFolderPermission: typeof addFolderPermission;\r\n}\r\n\r\nexport interface State {\r\n  isAdding: boolean;\r\n}\r\n\r\nexport class FolderPermissions extends PureComponent<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isAdding: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getFolderByUid(this.props.folderUid);\r\n    this.props.getFolderPermissions(this.props.folderUid);\r\n  }\r\n\r\n  onOpenAddPermissions = () => {\r\n    this.setState({ isAdding: true });\r\n  };\r\n\r\n  onRemoveItem = (item: DashboardAcl) => {\r\n    this.props.removeFolderPermission(item);\r\n  };\r\n\r\n  onPermissionChanged = (item: DashboardAcl, level: PermissionLevel) => {\r\n    this.props.updateFolderPermission(item, level);\r\n  };\r\n\r\n  onAddPermission = (newItem: NewDashboardAclItem) => {\r\n    return this.props.addFolderPermission(newItem);\r\n  };\r\n\r\n  onCancelAddPermission = () => {\r\n    this.setState({ isAdding: false });\r\n  };\r\n\r\n  render() {\r\n    const { navModel, folder } = this.props;\r\n    const { isAdding } = this.state;\r\n\r\n    if (folder.id === 0) {\r\n      return (\r\n        <Page navModel={navModel}>\r\n          <Page.Contents isLoading={true}>\r\n            <span />\r\n          </Page.Contents>\r\n        </Page>\r\n      );\r\n    }\r\n\r\n    const folderInfo = { title: folder.title, url: folder.url, id: folder.id };\r\n\r\n    return (\r\n      <Page navModel={navModel}>\r\n        <Page.Contents>\r\n          <div className=\"page-action-bar\">\r\n            <h3 className=\"page-sub-heading\">Folder Permissions</h3>\r\n            <Tooltip placement=\"auto\" content={<PermissionsInfo />}>\r\n              <div className=\"page-sub-heading-icon\">\r\n                <i className=\"gicon gicon-question gicon--has-hover\" />\r\n              </div>\r\n            </Tooltip>\r\n            <div className=\"page-action-bar__spacer\" />\r\n            <button className=\"btn btn-primary pull-right\" onClick={this.onOpenAddPermissions} disabled={isAdding}>\r\n              Add Permission\r\n            </button>\r\n          </div>\r\n          <SlideDown in={isAdding}>\r\n            <AddPermission onAddPermission={this.onAddPermission} onCancel={this.onCancelAddPermission} />\r\n          </SlideDown>\r\n          <PermissionList\r\n            items={folder.permissions}\r\n            onRemoveItem={this.onRemoveItem}\r\n            onPermissionChanged={this.onPermissionChanged}\r\n            isFetching={false}\r\n            folderInfo={folderInfo}\r\n          />\r\n        </Page.Contents>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n  const uid = state.location.routeParams.uid;\r\n  return {\r\n    navModel: getNavModel(state.navIndex, `folder-permissions-${uid}`, getLoadingNav(1)),\r\n    folderUid: uid,\r\n    folder: state.folder,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  getFolderByUid,\r\n  getFolderPermissions,\r\n  updateFolderPermission,\r\n  removeFolderPermission,\r\n  addFolderPermission,\r\n};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(FolderPermissions));\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAOA;AACA;AACA;AACA;AAiBA;AAAA;AACA;AAAA;AAaA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AA5BA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AAsBA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AAEA;AAUA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;A","sourceRoot":""}