{"version":3,"file":"FolderSettingsPage.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/features/folders/FolderSettingsPage.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\nimport { NavModel } from '@grafana/data';\r\nimport { Input } from '@grafana/ui';\r\nimport Page from 'app/core/components/Page/Page';\r\nimport appEvents from 'app/core/app_events';\r\nimport { getNavModel } from 'app/core/selectors/navModel';\r\nimport { CoreEvents, FolderState, StoreState } from 'app/types';\r\nimport { deleteFolder, getFolderByUid, saveFolder } from './state/actions';\r\nimport { getLoadingNav } from './state/navModel';\r\nimport { setFolderTitle } from './state/reducers';\r\n\r\nexport interface Props {\r\n  navModel: NavModel;\r\n  folderUid: string;\r\n  folder: FolderState;\r\n  getFolderByUid: typeof getFolderByUid;\r\n  setFolderTitle: typeof setFolderTitle;\r\n  saveFolder: typeof saveFolder;\r\n  deleteFolder: typeof deleteFolder;\r\n}\r\n\r\nexport interface State {\r\n  isLoading: boolean;\r\n}\r\n\r\nexport class FolderSettingsPage extends PureComponent<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoading: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getFolderByUid(this.props.folderUid);\r\n  }\r\n\r\n  onTitleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.props.setFolderTitle(evt.target.value);\r\n  };\r\n\r\n  onSave = async (evt: React.FormEvent<HTMLFormElement>) => {\r\n    evt.preventDefault();\r\n    evt.stopPropagation();\r\n    this.setState({ isLoading: true });\r\n    await this.props.saveFolder(this.props.folder);\r\n    this.setState({ isLoading: false });\r\n  };\r\n\r\n  onDelete = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n    evt.stopPropagation();\r\n    evt.preventDefault();\r\n\r\n    appEvents.emit(CoreEvents.showConfirmModal, {\r\n      title: 'Delete',\r\n      text: `Do you want to delete this folder and all its dashboards?`,\r\n      icon: 'fa-trash',\r\n      yesText: 'Delete',\r\n      onConfirm: () => {\r\n        this.props.deleteFolder(this.props.folder.uid);\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { navModel, folder } = this.props;\r\n\r\n    return (\r\n      <Page navModel={navModel}>\r\n        <Page.Contents isLoading={this.state.isLoading}>\r\n          <h3 className=\"page-sub-heading\">Folder Settings</h3>\r\n\r\n          <div className=\"section gf-form-group\">\r\n            <form name=\"folderSettingsForm\" onSubmit={this.onSave}>\r\n              <div className=\"gf-form\">\r\n                <label className=\"gf-form-label width-7\">Name</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"gf-form-input width-30\"\r\n                  value={folder.title}\r\n                  onChange={this.onTitleChange}\r\n                />\r\n              </div>\r\n              <div className=\"gf-form-button-row\">\r\n                <button type=\"submit\" className=\"btn btn-primary\" disabled={!folder.canSave || !folder.hasChanged}>\r\n                  Save\r\n                </button>\r\n                <button className=\"btn btn-danger\" onClick={this.onDelete} disabled={!folder.canSave}>\r\n                  Delete\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </Page.Contents>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n  const uid = state.location.routeParams.uid;\r\n\r\n  return {\r\n    navModel: getNavModel(state.navIndex, `folder-settings-${uid}`, getLoadingNav(2)),\r\n    folderUid: uid,\r\n    folder: state.folder,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  getFolderByUid,\r\n  saveFolder,\r\n  setFolderTitle,\r\n  deleteFolder,\r\n};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(FolderSettingsPage));\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;AAAA;AACA;AAAA;AAWA;AACA;AACA;AAEA;;;;AACA;AACA;AACA;AACA;;AAAA;AACA;;;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;AACA;AACA;;AACA;AAEA;AACA;AACA;AA6BA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AAGA;AASA;AACA;AAAA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;A","sourceRoot":""}