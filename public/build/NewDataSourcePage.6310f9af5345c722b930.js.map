{"version":3,"file":"NewDataSourcePage.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/core/components/FilterInput/FilterInput.tsx","webpack:///webpack:///./public/app/features/datasources/NewDataSourcePage.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\r\nimport { escapeStringForRegex, unEscapeStringFromRegex } from '@grafana/data';\r\n\r\nexport interface Props {\r\n  value: string | undefined;\r\n  placeholder?: string;\r\n  labelClassName?: string;\r\n  inputClassName?: string;\r\n  onChange: (value: string) => void;\r\n}\r\n\r\nexport const FilterInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\r\n  <label className={props.labelClassName}>\r\n    <input\r\n      ref={ref}\r\n      type=\"text\"\r\n      className={props.inputClassName}\r\n      value={unEscapeStringFromRegex(props.value)}\r\n      onChange={event => props.onChange(escapeStringForRegex(event.target.value))}\r\n      placeholder={props.placeholder ? props.placeholder : null}\r\n    />\r\n    <i className=\"gf-form-input-icon fa fa-search\" />\r\n  </label>\r\n));\r\n","import React, { FC, PureComponent } from 'react';\r\nimport classNames from 'classnames';\r\nimport { connect } from 'react-redux';\r\nimport { hot } from 'react-hot-loader';\r\nimport { DataSourcePluginMeta, NavModel } from '@grafana/data';\r\nimport { List } from '@grafana/ui';\r\nimport { e2e } from '@grafana/e2e';\r\n\r\nimport Page from 'app/core/components/Page/Page';\r\nimport { DataSourcePluginCategory, StoreState } from 'app/types';\r\nimport { addDataSource, loadDataSourcePlugins } from './state/actions';\r\nimport { getDataSourcePlugins } from './state/selectors';\r\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\r\nimport { setDataSourceTypeSearchQuery } from './state/reducers';\r\n\r\nexport interface Props {\r\n  navModel: NavModel;\r\n  plugins: DataSourcePluginMeta[];\r\n  categories: DataSourcePluginCategory[];\r\n  isLoading: boolean;\r\n  addDataSource: typeof addDataSource;\r\n  loadDataSourcePlugins: typeof loadDataSourcePlugins;\r\n  searchQuery: string;\r\n  setDataSourceTypeSearchQuery: typeof setDataSourceTypeSearchQuery;\r\n}\r\n\r\nclass NewDataSourcePage extends PureComponent<Props> {\r\n  searchInput: HTMLElement;\r\n\r\n  componentDidMount() {\r\n    this.props.loadDataSourcePlugins();\r\n    this.searchInput.focus();\r\n  }\r\n\r\n  onDataSourceTypeClicked = (plugin: DataSourcePluginMeta) => {\r\n    this.props.addDataSource(plugin);\r\n  };\r\n\r\n  onSearchQueryChange = (value: string) => {\r\n    this.props.setDataSourceTypeSearchQuery(value);\r\n  };\r\n\r\n  renderPlugins(plugins: DataSourcePluginMeta[]) {\r\n    if (!plugins || !plugins.length) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <List\r\n        items={plugins}\r\n        getItemKey={item => item.id.toString()}\r\n        renderItem={item => (\r\n          <DataSourceTypeCard\r\n            plugin={item}\r\n            onClick={() => this.onDataSourceTypeClicked(item)}\r\n            onLearnMoreClick={this.onLearnMoreClick}\r\n          />\r\n        )}\r\n      />\r\n    );\r\n  }\r\n\r\n  onLearnMoreClick = (evt: React.SyntheticEvent<HTMLElement>) => {\r\n    evt.stopPropagation();\r\n  };\r\n\r\n  renderCategories() {\r\n    const { categories } = this.props;\r\n\r\n    return (\r\n      <>\r\n        {categories.map(category => (\r\n          <div className=\"add-data-source-category\" key={category.id}>\r\n            <div className=\"add-data-source-category__header\">{category.title}</div>\r\n            {this.renderPlugins(category.plugins)}\r\n          </div>\r\n        ))}\r\n        <div className=\"add-data-source-more\">\r\n          <a\r\n            className=\"btn btn-inverse\"\r\n            href=\"https://grafana.com/plugins?type=datasource&utm_source=grafana_add_ds\"\r\n            target=\"_blank\"\r\n            rel=\"noopener\"\r\n          >\r\n            Find more data source plugins on grafana.com\r\n          </a>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { navModel, isLoading, searchQuery, plugins } = this.props;\r\n\r\n    return (\r\n      <Page navModel={navModel}>\r\n        <Page.Contents isLoading={isLoading}>\r\n          <div className=\"page-action-bar\">\r\n            <div className=\"gf-form gf-form--grow\">\r\n              <FilterInput\r\n                ref={elem => (this.searchInput = elem)}\r\n                labelClassName=\"gf-form--has-input-icon\"\r\n                inputClassName=\"gf-form-input width-30\"\r\n                value={searchQuery}\r\n                onChange={this.onSearchQueryChange}\r\n                placeholder=\"Filter by name or type\"\r\n              />\r\n            </div>\r\n            <div className=\"page-action-bar__spacer\" />\r\n            <a className=\"btn btn-secondary\" href=\"datasources\">\r\n              Cancel\r\n            </a>\r\n          </div>\r\n          <div>\r\n            {searchQuery && this.renderPlugins(plugins)}\r\n            {!searchQuery && this.renderCategories()}\r\n          </div>\r\n        </Page.Contents>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\ninterface DataSourceTypeCardProps {\r\n  plugin: DataSourcePluginMeta;\r\n  onClick: () => void;\r\n  onLearnMoreClick: (evt: React.SyntheticEvent<HTMLElement>) => void;\r\n}\r\n\r\nconst DataSourceTypeCard: FC<DataSourceTypeCardProps> = props => {\r\n  const { plugin, onLearnMoreClick } = props;\r\n  const isPhantom = plugin.module === 'phantom';\r\n  const onClick = !isPhantom ? props.onClick : () => {};\r\n\r\n  // find first plugin info link\r\n  const learnMoreLink = plugin.info.links && plugin.info.links.length > 0 ? plugin.info.links[0] : null;\r\n  const mainClassName = classNames('add-data-source-item', {\r\n    'add-data-source-item--phantom': isPhantom,\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className={mainClassName}\r\n      onClick={onClick}\r\n      aria-label={e2e.pages.AddDataSource.selectors.dataSourcePlugins(plugin.name)}\r\n    >\r\n      <img className=\"add-data-source-item-logo\" src={plugin.info.logos.small} />\r\n      <div className=\"add-data-source-item-text-wrapper\">\r\n        <span className=\"add-data-source-item-text\">{plugin.name}</span>\r\n        {plugin.info.description && <span className=\"add-data-source-item-desc\">{plugin.info.description}</span>}\r\n      </div>\r\n      <div className=\"add-data-source-item-actions\">\r\n        {learnMoreLink && (\r\n          <a\r\n            className=\"btn btn-inverse\"\r\n            href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\r\n            target=\"_blank\"\r\n            rel=\"noopener\"\r\n            onClick={onLearnMoreClick}\r\n          >\r\n            {learnMoreLink.name} <i className=\"fa fa-external-link add-datasource-item-actions__btn-icon\" />\r\n          </a>\r\n        )}\r\n        {!isPhantom && <button className=\"btn btn-primary\">Select</button>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport function getNavModel(): NavModel {\r\n  const main = {\r\n    icon: 'gicon gicon-add-datasources',\r\n    id: 'datasource-new',\r\n    text: 'Add data source',\r\n    href: 'datasources/new',\r\n    subTitle: 'Choose a data source type',\r\n  };\r\n\r\n  return {\r\n    main: main,\r\n    node: main,\r\n  };\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState) {\r\n  return {\r\n    navModel: getNavModel(),\r\n    plugins: getDataSourcePlugins(state.dataSources),\r\n    searchQuery: state.dataSources.dataSourceTypeSearchQuery,\r\n    categories: state.dataSources.categories,\r\n    isLoading: state.dataSources.isLoadingDataSources,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  addDataSource,\r\n  loadDataSourcePlugins,\r\n  setDataSourceTypeSearchQuery,\r\n};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(NewDataSourcePage));\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAEA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAaA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAEA;AACA;AACA;AAsBA;AACA;AACA;;AAyDA;AA5FA;AACA;AACA;AACA;AAUA;AAAA;AACA;AACA;AACA;AAEA;AAaA;AAMA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AAGA;AACA;AAWA;AAEA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AASA;AACA;AAIA;AACA;AACA;AAKA;AACA;AAAA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAQA;;AAAA;AAGA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;A","sourceRoot":""}