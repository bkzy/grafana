{"version":3,"file":"OrgDetailsPage.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/features/org/OrgDetailsPage.tsx","webpack:///webpack:///./public/app/features/org/OrgProfile.tsx","webpack:///webpack:///./public/app/features/org/state/actions.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\nimport { NavModel } from '@grafana/data';\r\n\r\nimport Page from 'app/core/components/Page/Page';\r\nimport OrgProfile from './OrgProfile';\r\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\r\nimport { loadOrganization, updateOrganization } from './state/actions';\r\nimport { Organization, StoreState } from 'app/types';\r\nimport { getNavModel } from 'app/core/selectors/navModel';\r\nimport { setOrganizationName } from './state/reducers';\r\n\r\nexport interface Props {\r\n  navModel: NavModel;\r\n  organization: Organization;\r\n  loadOrganization: typeof loadOrganization;\r\n  setOrganizationName: typeof setOrganizationName;\r\n  updateOrganization: typeof updateOrganization;\r\n}\r\n\r\nexport class OrgDetailsPage extends PureComponent<Props> {\r\n  async componentDidMount() {\r\n    await this.props.loadOrganization();\r\n  }\r\n\r\n  onOrgNameChange = (name: string) => {\r\n    this.props.setOrganizationName(name);\r\n  };\r\n\r\n  onUpdateOrganization = () => {\r\n    this.props.updateOrganization();\r\n  };\r\n\r\n  render() {\r\n    const { navModel, organization } = this.props;\r\n    const isLoading = Object.keys(organization).length === 0;\r\n\r\n    return (\r\n      <Page navModel={navModel}>\r\n        <Page.Contents isLoading={isLoading}>\r\n          {!isLoading && (\r\n            <div>\r\n              <OrgProfile\r\n                onOrgNameChange={name => this.onOrgNameChange(name)}\r\n                onSubmit={this.onUpdateOrganization}\r\n                orgName={organization.name}\r\n              />\r\n              <SharedPreferences resourceUri=\"org\" />\r\n            </div>\r\n          )}\r\n        </Page.Contents>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState) {\r\n  return {\r\n    navModel: getNavModel(state.navIndex, 'org-settings'),\r\n    organization: state.organization.organization,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  loadOrganization,\r\n  setOrganizationName,\r\n  updateOrganization,\r\n};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(OrgDetailsPage));\r\n","import React, { ChangeEvent, FC } from 'react';\r\nimport { Input } from '@grafana/ui';\r\n\r\nexport interface Props {\r\n  orgName: string;\r\n  onSubmit: () => void;\r\n  onOrgNameChange: (orgName: string) => void;\r\n}\r\n\r\nconst OrgProfile: FC<Props> = ({ onSubmit, onOrgNameChange, orgName }) => {\r\n  return (\r\n    <div>\r\n      <h3 className=\"page-sub-heading\">Organization profile</h3>\r\n      <form\r\n        name=\"orgForm\"\r\n        className=\"gf-form-group\"\r\n        onSubmit={event => {\r\n          event.preventDefault();\r\n          onSubmit();\r\n        }}\r\n      >\r\n        <div className=\"gf-form-inline\">\r\n          <div className=\"gf-form max-width-28\">\r\n            <span className=\"gf-form-label\">Organization name</span>\r\n            <Input\r\n              className=\"gf-form-input\"\r\n              type=\"text\"\r\n              onChange={(event: ChangeEvent<HTMLInputElement>) => onOrgNameChange(event.target.value)}\r\n              value={orgName}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"gf-form-button-row\">\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Save\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrgProfile;\r\n","import { ThunkResult } from 'app/types';\r\nimport { getBackendSrv } from '@grafana/runtime';\r\nimport { organizationLoaded } from './reducers';\r\n\r\nexport function loadOrganization(): ThunkResult<any> {\r\n  return async dispatch => {\r\n    const organizationResponse = await getBackendSrv().get('/api/org');\r\n    dispatch(organizationLoaded(organizationResponse));\r\n\r\n    return organizationResponse;\r\n  };\r\n}\r\n\r\nexport function updateOrganization(): ThunkResult<any> {\r\n  return async (dispatch, getStore) => {\r\n    const organization = getStore().organization.organization;\r\n\r\n    await getBackendSrv().put('/api/org', { name: organization.name });\r\n\r\n    dispatch(loadOrganization());\r\n  };\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAUA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAEA;AACA;AACA;;AAuBA;AAjCA;;;;AACA;;AAAA;;;;;AACA;AAUA;AAAA;AACA;AACA;AAEA;AAEA;AAGA;AAKA;AAMA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACtEA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AAAA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AAOA;AAEA;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AAEA;AAAA;AACA;;;;AACA;;AAAA;AACA;AAEA;;;AACA;AACA;AAEA;AAAA;AACA;;;;;AACA;AAEA;;AAAA;AAEA;;;;AACA;AACA;;;;;A","sourceRoot":""}