{"version":3,"file":"PluginListPage.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/core/components/FilterInput/FilterInput.tsx","webpack:///webpack:///./public/app/core/components/OrgActionBar/OrgActionBar.tsx","webpack:///webpack:///./public/app/features/plugins/PluginList.tsx","webpack:///webpack:///./public/app/features/plugins/PluginListItem.tsx","webpack:///webpack:///./public/app/features/plugins/PluginListPage.tsx","webpack:///webpack:///./public/app/features/plugins/state/selectors.ts"],"sourcesContent":["import React, { forwardRef } from 'react';\r\nimport { escapeStringForRegex, unEscapeStringFromRegex } from '@grafana/data';\r\n\r\nexport interface Props {\r\n  value: string | undefined;\r\n  placeholder?: string;\r\n  labelClassName?: string;\r\n  inputClassName?: string;\r\n  onChange: (value: string) => void;\r\n}\r\n\r\nexport const FilterInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\r\n  <label className={props.labelClassName}>\r\n    <input\r\n      ref={ref}\r\n      type=\"text\"\r\n      className={props.inputClassName}\r\n      value={unEscapeStringFromRegex(props.value)}\r\n      onChange={event => props.onChange(escapeStringForRegex(event.target.value))}\r\n      placeholder={props.placeholder ? props.placeholder : null}\r\n    />\r\n    <i className=\"gf-form-input-icon fa fa-search\" />\r\n  </label>\r\n));\r\n","import React, { PureComponent } from 'react';\r\nimport LayoutSelector, { LayoutMode } from '../LayoutSelector/LayoutSelector';\r\nimport { FilterInput } from '../FilterInput/FilterInput';\r\n\r\nexport interface Props {\r\n  searchQuery: string;\r\n  layoutMode?: LayoutMode;\r\n  onSetLayoutMode?: (mode: LayoutMode) => {};\r\n  setSearchQuery: (value: string) => {};\r\n  linkButton: { href: string; title: string };\r\n  target?: string;\r\n}\r\n\r\nexport default class OrgActionBar extends PureComponent<Props> {\r\n  render() {\r\n    const { searchQuery, layoutMode, onSetLayoutMode, linkButton, setSearchQuery, target } = this.props;\r\n    const linkProps = { href: linkButton.href };\r\n\r\n    if (target) {\r\n      (linkProps as any).target = target;\r\n    }\r\n\r\n    return (\r\n      <div className=\"page-action-bar\">\r\n        <div className=\"gf-form gf-form--grow\">\r\n          <FilterInput\r\n            labelClassName=\"gf-form--has-input-icon\"\r\n            inputClassName=\"gf-form-input width-20\"\r\n            value={searchQuery}\r\n            onChange={setSearchQuery}\r\n            placeholder={'Filter by name or type'}\r\n          />\r\n          <LayoutSelector mode={layoutMode} onLayoutModeChanged={(mode: LayoutMode) => onSetLayoutMode(mode)} />\r\n        </div>\r\n        <div className=\"page-action-bar__spacer\" />\r\n        <a className=\"btn btn-primary\" {...linkProps}>\r\n          {linkButton.title}\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { FC } from 'react';\r\nimport classNames from 'classnames';\r\nimport PluginListItem from './PluginListItem';\r\nimport { PluginMeta } from '@grafana/data';\r\nimport { LayoutMode, LayoutModes } from '../../core/components/LayoutSelector/LayoutSelector';\r\n\r\ninterface Props {\r\n  plugins: PluginMeta[];\r\n  layoutMode: LayoutMode;\r\n}\r\n\r\nconst PluginList: FC<Props> = props => {\r\n  const { plugins, layoutMode } = props;\r\n\r\n  const listStyle = classNames({\r\n    'card-section': true,\r\n    'card-list-layout-grid': layoutMode === LayoutModes.Grid,\r\n    'card-list-layout-list': layoutMode === LayoutModes.List,\r\n  });\r\n\r\n  return (\r\n    <section className={listStyle}>\r\n      <ol className=\"card-list\">\r\n        {plugins.map((plugin, index) => {\r\n          return <PluginListItem plugin={plugin} key={`${plugin.name}-${index}`} />;\r\n        })}\r\n      </ol>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default PluginList;\r\n","import React, { FC } from 'react';\r\nimport { PluginMeta } from '@grafana/data';\r\n\r\ninterface Props {\r\n  plugin: PluginMeta;\r\n}\r\n\r\nconst PluginListItem: FC<Props> = props => {\r\n  const { plugin } = props;\r\n\r\n  return (\r\n    <li className=\"card-item-wrapper\">\r\n      <a className=\"card-item\" href={`plugins/${plugin.id}/`}>\r\n        <div className=\"card-item-header\">\r\n          <div className=\"card-item-type\">{plugin.type}</div>\r\n          {plugin.hasUpdate && (\r\n            <div className=\"card-item-notice\">\r\n              <span bs-tooltip=\"plugin.latestVersion\">Update available!</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"card-item-body\">\r\n          <figure className=\"card-item-figure\">\r\n            <img src={plugin.info.logos.small} />\r\n          </figure>\r\n          <div className=\"card-item-details\">\r\n            <div className=\"card-item-name\">{plugin.name}</div>\r\n            <div className=\"card-item-sub-name\">{`By ${plugin.info.author.name}`}</div>\r\n          </div>\r\n        </div>\r\n      </a>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default PluginListItem;\r\n","import React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\nimport Page from 'app/core/components/Page/Page';\r\nimport OrgActionBar from 'app/core/components/OrgActionBar/OrgActionBar';\r\nimport PluginList from './PluginList';\r\nimport { loadPlugins } from './state/actions';\r\nimport { getNavModel } from 'app/core/selectors/navModel';\r\nimport { getLayoutMode, getPlugins, getPluginsSearchQuery } from './state/selectors';\r\nimport { LayoutMode } from 'app/core/components/LayoutSelector/LayoutSelector';\r\nimport { NavModel, PluginMeta } from '@grafana/data';\r\nimport { StoreState } from 'app/types';\r\nimport { setPluginsLayoutMode, setPluginsSearchQuery } from './state/reducers';\r\n\r\nexport interface Props {\r\n  navModel: NavModel;\r\n  plugins: PluginMeta[];\r\n  layoutMode: LayoutMode;\r\n  searchQuery: string;\r\n  hasFetched: boolean;\r\n  loadPlugins: typeof loadPlugins;\r\n  setPluginsLayoutMode: typeof setPluginsLayoutMode;\r\n  setPluginsSearchQuery: typeof setPluginsSearchQuery;\r\n}\r\n\r\nexport class PluginListPage extends PureComponent<Props> {\r\n  componentDidMount() {\r\n    this.fetchPlugins();\r\n  }\r\n\r\n  async fetchPlugins() {\r\n    await this.props.loadPlugins();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      hasFetched,\r\n      navModel,\r\n      plugins,\r\n      layoutMode,\r\n      setPluginsLayoutMode,\r\n      setPluginsSearchQuery,\r\n      searchQuery,\r\n    } = this.props;\r\n\r\n    const linkButton = {\r\n      href: 'https://grafana.com/plugins?utm_source=grafana_plugin_list',\r\n      title: 'Find more plugins on Grafana.com',\r\n    };\r\n\r\n    return (\r\n      <Page navModel={navModel}>\r\n        <Page.Contents isLoading={!hasFetched}>\r\n          <>\r\n            <OrgActionBar\r\n              searchQuery={searchQuery}\r\n              layoutMode={layoutMode}\r\n              onSetLayoutMode={mode => setPluginsLayoutMode(mode)}\r\n              setSearchQuery={query => setPluginsSearchQuery(query)}\r\n              linkButton={linkButton}\r\n            />\r\n            {hasFetched && plugins && plugins && <PluginList plugins={plugins} layoutMode={layoutMode} />}\r\n          </>\r\n        </Page.Contents>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState) {\r\n  return {\r\n    navModel: getNavModel(state.navIndex, 'plugins'),\r\n    plugins: getPlugins(state.plugins),\r\n    layoutMode: getLayoutMode(state.plugins),\r\n    searchQuery: getPluginsSearchQuery(state.plugins),\r\n    hasFetched: state.plugins.hasFetched,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  loadPlugins,\r\n  setPluginsLayoutMode,\r\n  setPluginsSearchQuery,\r\n};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(PluginListPage));\r\n","import { PluginsState } from 'app/types/plugins';\r\n\r\nexport const getPlugins = (state: PluginsState) => {\r\n  const regex = new RegExp(state.searchQuery, 'i');\r\n\r\n  return state.plugins.filter(item => {\r\n    return regex.test(item.name) || regex.test(item.info.author.name) || regex.test(item.info.description);\r\n  });\r\n};\r\n\r\nexport const getPluginsSearchQuery = (state: PluginsState) => state.searchQuery;\r\nexport const getLayoutMode = (state: PluginsState) => state.layoutMode;\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAEA;AAQA;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AAWA;AAAA;AAAA;;AA4BA;AA3BA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAOA;AAEA;AACA;AAKA;AACA;AAAA;;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAIA;AAEA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAaA;AAAA;AAAA;;AA0CA;AAzCA;AACA;AACA;AAEA;;;;AACA;;AAAA;;;;;AACA;AAEA;AACA;AAUA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAOA;AAKA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACnFA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;;;A","sourceRoot":""}