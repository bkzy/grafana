{"version":3,"file":"PluginPage.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/core/components/PluginHelp/PluginHelp.tsx","webpack:///webpack:///./public/app/features/datasources/DashboardsTable.tsx","webpack:///webpack:///./public/app/features/plugins/PluginDashboards.tsx","webpack:///webpack:///./public/app/features/plugins/PluginPage.tsx","webpack:///webpack:///./public/app/features/plugins/wrappers/AppConfigWrapper.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { renderMarkdown } from '@grafana/data';\r\nimport { getBackendSrv } from '@grafana/runtime';\r\n\r\ninterface Props {\r\n  plugin: {\r\n    name: string;\r\n    id: string;\r\n  };\r\n  type: string;\r\n}\r\n\r\ninterface State {\r\n  isError: boolean;\r\n  isLoading: boolean;\r\n  help: string;\r\n}\r\n\r\nexport class PluginHelp extends PureComponent<Props, State> {\r\n  state = {\r\n    isError: false,\r\n    isLoading: false,\r\n    help: '',\r\n  };\r\n\r\n  componentDidMount(): void {\r\n    this.loadHelp();\r\n  }\r\n\r\n  constructPlaceholderInfo() {\r\n    return 'No plugin help or readme markdown file was found';\r\n  }\r\n\r\n  loadHelp = () => {\r\n    const { plugin, type } = this.props;\r\n    this.setState({ isLoading: true });\r\n\r\n    getBackendSrv()\r\n      .get(`/api/plugins/${plugin.id}/markdown/${type}`)\r\n      .then((response: string) => {\r\n        const helpHtml = renderMarkdown(response);\r\n\r\n        if (response === '' && type === 'help') {\r\n          this.setState({\r\n            isError: false,\r\n            isLoading: false,\r\n            help: this.constructPlaceholderInfo(),\r\n          });\r\n        } else {\r\n          this.setState({\r\n            isError: false,\r\n            isLoading: false,\r\n            help: helpHtml,\r\n          });\r\n        }\r\n      })\r\n      .catch(() => {\r\n        this.setState({\r\n          isError: true,\r\n          isLoading: false,\r\n        });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { type } = this.props;\r\n    const { isError, isLoading, help } = this.state;\r\n\r\n    if (isLoading) {\r\n      return <h2>Loading help...</h2>;\r\n    }\r\n\r\n    if (isError) {\r\n      return <h3>'Error occurred when loading help'</h3>;\r\n    }\r\n\r\n    if (type === 'panel_help' && help === '') {\r\n    }\r\n\r\n    return <div className=\"markdown-html\" dangerouslySetInnerHTML={{ __html: help }} />;\r\n  }\r\n}\r\n","import React, { FC } from 'react';\r\nimport { PluginDashboard } from '../../types';\r\n\r\nexport interface Props {\r\n  dashboards: PluginDashboard[];\r\n  onImport: (dashboard: PluginDashboard, overwrite: boolean) => void;\r\n  onRemove: (dashboard: PluginDashboard) => void;\r\n}\r\n\r\nconst DashboardsTable: FC<Props> = ({ dashboards, onImport, onRemove }) => {\r\n  function buttonText(dashboard: PluginDashboard) {\r\n    return dashboard.revision !== dashboard.importedRevision ? 'Update' : 'Re-import';\r\n  }\r\n\r\n  return (\r\n    <table className=\"filter-table\">\r\n      <tbody>\r\n        {dashboards.map((dashboard, index) => {\r\n          return (\r\n            <tr key={`${dashboard.dashboardId}-${index}`}>\r\n              <td className=\"width-1\">\r\n                <i className=\"gicon gicon-dashboard\" />\r\n              </td>\r\n              <td>\r\n                {dashboard.imported ? (\r\n                  <a href={dashboard.importedUrl}>{dashboard.title}</a>\r\n                ) : (\r\n                  <span>{dashboard.title}</span>\r\n                )}\r\n              </td>\r\n              <td style={{ textAlign: 'right' }}>\r\n                {!dashboard.imported ? (\r\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, false)}>\r\n                    Import\r\n                  </button>\r\n                ) : (\r\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, true)}>\r\n                    {buttonText(dashboard)}\r\n                  </button>\r\n                )}\r\n                {dashboard.imported && (\r\n                  <button className=\"btn btn-danger btn-small\" onClick={() => onRemove(dashboard)}>\r\n                    <i className=\"fa fa-trash\" />\r\n                  </button>\r\n                )}\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default DashboardsTable;\r\n","import React, { PureComponent } from 'react';\r\n\r\nimport extend from 'lodash/extend';\r\n\r\nimport { PluginDashboard } from 'app/types';\r\nimport { getBackendSrv } from 'app/core/services/backend_srv';\r\nimport { appEvents } from 'app/core/core';\r\nimport DashboardsTable from 'app/features/datasources/DashboardsTable';\r\nimport { AppEvents, PluginMeta, DataSourceApi } from '@grafana/data';\r\n\r\ninterface Props {\r\n  plugin: PluginMeta;\r\n  datasource?: DataSourceApi;\r\n}\r\n\r\ninterface State {\r\n  dashboards: PluginDashboard[];\r\n  loading: boolean;\r\n}\r\n\r\nexport class PluginDashboards extends PureComponent<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      dashboards: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const pluginId = this.props.plugin.id;\r\n    getBackendSrv()\r\n      .get(`/api/plugins/${pluginId}/dashboards`)\r\n      .then((dashboards: any) => {\r\n        this.setState({ dashboards, loading: false });\r\n      });\r\n  }\r\n\r\n  importAll = () => {\r\n    this.importNext(0);\r\n  };\r\n\r\n  private importNext = (index: number) => {\r\n    const { dashboards } = this.state;\r\n    return this.import(dashboards[index], true).then(() => {\r\n      if (index + 1 < dashboards.length) {\r\n        return new Promise(resolve => {\r\n          setTimeout(() => {\r\n            this.importNext(index + 1).then(() => {\r\n              resolve();\r\n            });\r\n          }, 500);\r\n        });\r\n      } else {\r\n        return Promise.resolve();\r\n      }\r\n    });\r\n  };\r\n\r\n  import = (dash: PluginDashboard, overwrite: boolean) => {\r\n    const { plugin, datasource } = this.props;\r\n\r\n    const installCmd: any = {\r\n      pluginId: plugin.id,\r\n      path: dash.path,\r\n      overwrite: overwrite,\r\n      inputs: [],\r\n    };\r\n\r\n    if (datasource) {\r\n      installCmd.inputs.push({\r\n        name: '*',\r\n        type: 'datasource',\r\n        pluginId: datasource.meta.id,\r\n        value: datasource.name,\r\n      });\r\n    }\r\n\r\n    return getBackendSrv()\r\n      .post(`/api/dashboards/import`, installCmd)\r\n      .then((res: PluginDashboard) => {\r\n        appEvents.emit(AppEvents.alertSuccess, ['Dashboard Imported', dash.title]);\r\n        extend(dash, res);\r\n        this.setState({ dashboards: [...this.state.dashboards] });\r\n      });\r\n  };\r\n\r\n  remove = (dash: PluginDashboard) => {\r\n    getBackendSrv()\r\n      .delete('/api/dashboards/' + dash.importedUri)\r\n      .then(() => {\r\n        dash.imported = false;\r\n        this.setState({ dashboards: [...this.state.dashboards] });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { loading, dashboards } = this.state;\r\n    if (loading) {\r\n      return <div>loading...</div>;\r\n    }\r\n    if (!dashboards || !dashboards.length) {\r\n      return <div>No dashboards are included with this plugin</div>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"gf-form-group\">\r\n        <DashboardsTable dashboards={dashboards} onImport={this.import} onRemove={this.remove} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// Libraries\r\nimport React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\nimport find from 'lodash/find';\r\n// Types\r\nimport { UrlQueryMap } from '@grafana/runtime';\r\nimport { StoreState, AppNotificationSeverity, CoreEvents } from 'app/types';\r\nimport { Alert, Tooltip } from '@grafana/ui';\r\nimport {\r\n  AppPlugin,\r\n  GrafanaPlugin,\r\n  PluginDependencies,\r\n  PluginInclude,\r\n  PluginIncludeType,\r\n  PluginMeta,\r\n  PluginMetaInfo,\r\n  PluginType,\r\n  NavModel,\r\n  NavModelItem,\r\n} from '@grafana/data';\r\n\r\nimport Page from 'app/core/components/Page/Page';\r\nimport { getPluginSettings } from './PluginSettingsCache';\r\nimport { importAppPlugin, importDataSourcePlugin, importPanelPlugin } from './plugin_loader';\r\nimport { getNotFoundNav } from 'app/core/nav_model_srv';\r\nimport { PluginHelp } from 'app/core/components/PluginHelp/PluginHelp';\r\nimport { AppConfigCtrlWrapper } from './wrappers/AppConfigWrapper';\r\nimport { PluginDashboards } from './PluginDashboards';\r\nimport { appEvents } from 'app/core/core';\r\nimport { config } from 'app/core/config';\r\nimport { ContextSrv } from '../../core/services/context_srv';\r\n\r\nexport function getLoadingNav(): NavModel {\r\n  const node = {\r\n    text: 'Loading...',\r\n    icon: 'icon-gf icon-gf-panel',\r\n  };\r\n  return {\r\n    node: node,\r\n    main: node,\r\n  };\r\n}\r\n\r\nfunction loadPlugin(pluginId: string): Promise<GrafanaPlugin> {\r\n  return getPluginSettings(pluginId).then(info => {\r\n    if (info.type === PluginType.app) {\r\n      return importAppPlugin(info);\r\n    }\r\n    if (info.type === PluginType.datasource) {\r\n      return importDataSourcePlugin(info);\r\n    }\r\n    if (info.type === PluginType.panel) {\r\n      return importPanelPlugin(pluginId).then(plugin => {\r\n        // Panel Meta does not have the *full* settings meta\r\n        return getPluginSettings(pluginId).then(meta => {\r\n          plugin.meta = {\r\n            ...meta, // Set any fields that do not exist\r\n            ...plugin.meta,\r\n          };\r\n          return plugin;\r\n        });\r\n      });\r\n    }\r\n    if (info.type === PluginType.renderer) {\r\n      return Promise.resolve({ meta: info } as GrafanaPlugin);\r\n    }\r\n    return Promise.reject('Unknown Plugin type: ' + info.type);\r\n  });\r\n}\r\n\r\ninterface Props {\r\n  pluginId: string;\r\n  query: UrlQueryMap;\r\n  path: string; // the URL path\r\n  $contextSrv: ContextSrv;\r\n}\r\n\r\ninterface State {\r\n  loading: boolean;\r\n  plugin?: GrafanaPlugin;\r\n  nav: NavModel;\r\n  defaultPage: string; // The first configured one or readme\r\n}\r\n\r\nconst PAGE_ID_README = 'readme';\r\nconst PAGE_ID_DASHBOARDS = 'dashboards';\r\nconst PAGE_ID_CONFIG_CTRL = 'config';\r\n\r\nclass PluginPage extends PureComponent<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      nav: getLoadingNav(),\r\n      defaultPage: PAGE_ID_README,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { pluginId, path, query, $contextSrv } = this.props;\r\n    const { appSubUrl } = config;\r\n\r\n    const plugin = await loadPlugin(pluginId);\r\n    if (!plugin) {\r\n      this.setState({\r\n        loading: false,\r\n        nav: getNotFoundNav(),\r\n      });\r\n      return; // 404\r\n    }\r\n\r\n    const { defaultPage, nav } = getPluginTabsNav(plugin, appSubUrl, path, query, $contextSrv.hasRole('Admin'));\r\n\r\n    this.setState({\r\n      loading: false,\r\n      plugin,\r\n      defaultPage,\r\n      nav,\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props) {\r\n    const prevPage = prevProps.query.page as string;\r\n    const page = this.props.query.page as string;\r\n    if (prevPage !== page) {\r\n      const { nav, defaultPage } = this.state;\r\n      const node = {\r\n        ...nav.node,\r\n        children: setActivePage(page, nav.node.children, defaultPage),\r\n      };\r\n      this.setState({\r\n        nav: {\r\n          node: node,\r\n          main: node,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  renderBody() {\r\n    const { query } = this.props;\r\n    const { plugin, nav } = this.state;\r\n\r\n    if (!plugin) {\r\n      return <Alert severity={AppNotificationSeverity.Error} title=\"Plugin Not Found\" />;\r\n    }\r\n\r\n    const active = nav.main.children.find(tab => tab.active);\r\n    if (active) {\r\n      // Find the current config tab\r\n      if (plugin.configPages) {\r\n        for (const tab of plugin.configPages) {\r\n          if (tab.id === active.id) {\r\n            return <tab.body plugin={plugin} query={query} />;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Apps have some special behavior\r\n      if (plugin.meta.type === PluginType.app) {\r\n        if (active.id === PAGE_ID_DASHBOARDS) {\r\n          return <PluginDashboards plugin={plugin.meta} />;\r\n        }\r\n\r\n        if (active.id === PAGE_ID_CONFIG_CTRL && plugin.angularConfigCtrl) {\r\n          return <AppConfigCtrlWrapper app={plugin as AppPlugin} />;\r\n        }\r\n      }\r\n    }\r\n\r\n    return <PluginHelp plugin={plugin.meta} type=\"help\" />;\r\n  }\r\n\r\n  showUpdateInfo = () => {\r\n    appEvents.emit(CoreEvents.showModal, {\r\n      src: 'public/app/features/plugins/partials/update_instructions.html',\r\n      model: this.state.plugin.meta,\r\n    });\r\n  };\r\n\r\n  renderVersionInfo(meta: PluginMeta) {\r\n    if (!meta.info.version) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <section className=\"page-sidebar-section\">\r\n        <h4>Version</h4>\r\n        <span>{meta.info.version}</span>\r\n        {meta.hasUpdate && (\r\n          <div>\r\n            <Tooltip content={meta.latestVersion} theme=\"info\" placement=\"top\">\r\n              <a href=\"#\" onClick={this.showUpdateInfo}>\r\n                Update Available!\r\n              </a>\r\n            </Tooltip>\r\n          </div>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n\r\n  renderSidebarIncludeBody(item: PluginInclude) {\r\n    if (item.type === PluginIncludeType.page) {\r\n      const pluginId = this.state.plugin.meta.id;\r\n      const page = item.name.toLowerCase().replace(' ', '-');\r\n      return (\r\n        <a href={`plugins/${pluginId}/page/${page}`}>\r\n          <i className={getPluginIcon(item.type)} />\r\n          {item.name}\r\n        </a>\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n        <i className={getPluginIcon(item.type)} />\r\n        {item.name}\r\n      </>\r\n    );\r\n  }\r\n\r\n  renderSidebarIncludes(includes: PluginInclude[]) {\r\n    if (!includes || !includes.length) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <section className=\"page-sidebar-section\">\r\n        <h4>Includes</h4>\r\n        <ul className=\"ui-list plugin-info-list\">\r\n          {includes.map(include => {\r\n            return (\r\n              <li className=\"plugin-info-list-item\" key={include.name}>\r\n                {this.renderSidebarIncludeBody(include)}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  renderSidebarDependencies(dependencies: PluginDependencies) {\r\n    if (!dependencies) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <section className=\"page-sidebar-section\">\r\n        <h4>Dependencies</h4>\r\n        <ul className=\"ui-list plugin-info-list\">\r\n          <li className=\"plugin-info-list-item\">\r\n            <img src=\"public/img/grafana_icon.svg\" />\r\n            Grafana {dependencies.grafanaVersion}\r\n          </li>\r\n          {dependencies.plugins &&\r\n            dependencies.plugins.map(plug => {\r\n              return (\r\n                <li className=\"plugin-info-list-item\" key={plug.name}>\r\n                  <i className={getPluginIcon(plug.type)} />\r\n                  {plug.name} {plug.version}\r\n                </li>\r\n              );\r\n            })}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  renderSidebarLinks(info: PluginMetaInfo) {\r\n    if (!info.links || !info.links.length) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <section className=\"page-sidebar-section\">\r\n        <h4>Links</h4>\r\n        <ul className=\"ui-list\">\r\n          {info.links.map(link => {\r\n            return (\r\n              <li key={link.url}>\r\n                <a href={link.url} className=\"external-link\" target=\"_blank\" rel=\"noopener\">\r\n                  {link.name}\r\n                </a>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { loading, nav, plugin } = this.state;\r\n    const { $contextSrv } = this.props;\r\n    const isAdmin = $contextSrv.hasRole('Admin');\r\n    return (\r\n      <Page navModel={nav}>\r\n        <Page.Contents isLoading={loading}>\r\n          {!loading && (\r\n            <div className=\"sidebar-container\">\r\n              <div className=\"sidebar-content\">\r\n                {plugin.loadError && (\r\n                  <Alert\r\n                    severity={AppNotificationSeverity.Error}\r\n                    title=\"Error Loading Plugin\"\r\n                    children={\r\n                      <>\r\n                        Check the server startup logs for more information. <br />\r\n                        If this plugin was loaded from git, make sure it was compiled.\r\n                      </>\r\n                    }\r\n                  />\r\n                )}\r\n                {this.renderBody()}\r\n              </div>\r\n              <aside className=\"page-sidebar\">\r\n                {plugin && (\r\n                  <section className=\"page-sidebar-section\">\r\n                    {this.renderVersionInfo(plugin.meta)}\r\n                    {isAdmin && this.renderSidebarIncludes(plugin.meta.includes)}\r\n                    {this.renderSidebarDependencies(plugin.meta.dependencies)}\r\n                    {this.renderSidebarLinks(plugin.meta.info)}\r\n                  </section>\r\n                )}\r\n              </aside>\r\n            </div>\r\n          )}\r\n        </Page.Contents>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getPluginTabsNav(\r\n  plugin: GrafanaPlugin,\r\n  appSubUrl: string,\r\n  path: string,\r\n  query: UrlQueryMap,\r\n  isAdmin: boolean\r\n): { defaultPage: string; nav: NavModel } {\r\n  const { meta } = plugin;\r\n  let defaultPage: string;\r\n  const pages: NavModelItem[] = [];\r\n\r\n  if (true) {\r\n    pages.push({\r\n      text: 'Readme',\r\n      icon: 'fa fa-fw fa-file-text-o',\r\n      url: `${appSubUrl}${path}?page=${PAGE_ID_README}`,\r\n      id: PAGE_ID_README,\r\n    });\r\n  }\r\n\r\n  // We allow non admins to see plugins but only their readme. Config is hidden even though the API needs to be\r\n  // public for plugins to work properly.\r\n  if (isAdmin) {\r\n    // Only show Config/Pages for app\r\n    if (meta.type === PluginType.app) {\r\n      // Legacy App Config\r\n      if (plugin.angularConfigCtrl) {\r\n        pages.push({\r\n          text: 'Config',\r\n          icon: 'gicon gicon-cog',\r\n          url: `${appSubUrl}${path}?page=${PAGE_ID_CONFIG_CTRL}`,\r\n          id: PAGE_ID_CONFIG_CTRL,\r\n        });\r\n        defaultPage = PAGE_ID_CONFIG_CTRL;\r\n      }\r\n\r\n      if (plugin.configPages) {\r\n        for (const page of plugin.configPages) {\r\n          pages.push({\r\n            text: page.title,\r\n            icon: page.icon,\r\n            url: `${appSubUrl}${path}?page=${page.id}`,\r\n            id: page.id,\r\n          });\r\n          if (!defaultPage) {\r\n            defaultPage = page.id;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Check for the dashboard pages\r\n      if (find(meta.includes, { type: PluginIncludeType.dashboard })) {\r\n        pages.push({\r\n          text: 'Dashboards',\r\n          icon: 'gicon gicon-dashboard',\r\n          url: `${appSubUrl}${path}?page=${PAGE_ID_DASHBOARDS}`,\r\n          id: PAGE_ID_DASHBOARDS,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!defaultPage) {\r\n    defaultPage = pages[0].id; // the first tab\r\n  }\r\n\r\n  const node = {\r\n    text: meta.name,\r\n    img: meta.info.logos.large,\r\n    subTitle: meta.info.author.name,\r\n    breadcrumbs: [{ title: 'Plugins', url: 'plugins' }],\r\n    url: `${appSubUrl}${path}`,\r\n    children: setActivePage(query.page as string, pages, defaultPage),\r\n  };\r\n\r\n  return {\r\n    defaultPage,\r\n    nav: {\r\n      node: node,\r\n      main: node,\r\n    },\r\n  };\r\n}\r\n\r\nfunction setActivePage(pageId: string, pages: NavModelItem[], defaultPageId: string): NavModelItem[] {\r\n  let found = false;\r\n  const selected = pageId || defaultPageId;\r\n  const changed = pages.map(p => {\r\n    const active = !found && selected === p.id;\r\n    if (active) {\r\n      found = true;\r\n    }\r\n    return { ...p, active };\r\n  });\r\n  if (!found) {\r\n    changed[0].active = true;\r\n  }\r\n  return changed;\r\n}\r\n\r\nfunction getPluginIcon(type: string) {\r\n  switch (type) {\r\n    case 'datasource':\r\n      return 'gicon gicon-datasources';\r\n    case 'panel':\r\n      return 'icon-gf icon-gf-panel';\r\n    case 'app':\r\n      return 'icon-gf icon-gf-apps';\r\n    case 'page':\r\n      return 'icon-gf icon-gf-endpoint-tiny';\r\n    case 'dashboard':\r\n      return 'gicon gicon-dashboard';\r\n    default:\r\n      return 'icon-gf icon-gf-apps';\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n  pluginId: state.location.routeParams.pluginId,\r\n  query: state.location.query,\r\n  path: state.location.path,\r\n});\r\n\r\nexport default hot(module)(connect(mapStateToProps)(PluginPage));\r\n","// Libraries\r\nimport React, { PureComponent } from 'react';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport extend from 'lodash/extend';\r\n\r\nimport { Button } from '@grafana/ui';\r\nimport { PluginMeta, AppPlugin, deprecationWarning } from '@grafana/data';\r\n\r\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\r\nimport { getBackendSrv } from 'app/core/services/backend_srv';\r\nimport { css } from 'emotion';\r\n\r\ninterface Props {\r\n  app: AppPlugin;\r\n}\r\n\r\ninterface State {\r\n  angularCtrl: AngularComponent;\r\n  refresh: number;\r\n}\r\n\r\nexport class AppConfigCtrlWrapper extends PureComponent<Props, State> {\r\n  element: HTMLElement; // for angular ctrl\r\n\r\n  // Needed for angular scope\r\n  preUpdateHook = () => Promise.resolve();\r\n  postUpdateHook = () => Promise.resolve();\r\n  model: PluginMeta;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      angularCtrl: null,\r\n      refresh: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Force a reload after the first mount -- is there a better way to do this?\r\n    setTimeout(() => {\r\n      this.setState({ refresh: this.state.refresh + 1 });\r\n    }, 5);\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props) {\r\n    if (!this.element || this.state.angularCtrl) {\r\n      return;\r\n    }\r\n\r\n    // Set a copy of the meta\r\n    this.model = cloneDeep(this.props.app.meta);\r\n\r\n    const loader = getAngularLoader();\r\n    const template = '<plugin-component type=\"app-config-ctrl\"></plugin-component>';\r\n    const scopeProps = { ctrl: this };\r\n    const angularCtrl = loader.load(this.element, scopeProps, template);\r\n\r\n    this.setState({ angularCtrl });\r\n  }\r\n\r\n  render() {\r\n    const model = this.model;\r\n\r\n    const withRightMargin = css({ marginRight: '8px' });\r\n\r\n    return (\r\n      <div>\r\n        <div ref={element => (this.element = element)} />\r\n        <br />\r\n        <br />\r\n        {model && (\r\n          <div className=\"gf-form\">\r\n            {!model.enabled && (\r\n              <Button variant=\"primary\" onClick={this.enable} className={withRightMargin}>\r\n                Enable\r\n              </Button>\r\n            )}\r\n            {model.enabled && (\r\n              <Button variant=\"primary\" onClick={this.update} className={withRightMargin}>\r\n                Update\r\n              </Button>\r\n            )}\r\n            {model.enabled && (\r\n              <Button variant=\"danger\" onClick={this.disable} className={withRightMargin}>\r\n                Disable\r\n              </Button>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //-----------------------------------------------------------\r\n  // Copied from plugin_edit_ctrl\r\n  //-----------------------------------------------------------\r\n\r\n  update = () => {\r\n    const pluginId = this.model.id;\r\n\r\n    this.preUpdateHook()\r\n      .then(() => {\r\n        const updateCmd = extend(\r\n          {\r\n            enabled: this.model.enabled,\r\n            pinned: this.model.pinned,\r\n            jsonData: this.model.jsonData,\r\n            secureJsonData: this.model.secureJsonData,\r\n          },\r\n          {}\r\n        );\r\n        return getBackendSrv().post(`/api/plugins/${pluginId}/settings`, updateCmd);\r\n      })\r\n      .then(this.postUpdateHook)\r\n      .then(res => {\r\n        window.location.href = window.location.href;\r\n      });\r\n  };\r\n\r\n  setPreUpdateHook = (callback: () => any) => {\r\n    this.preUpdateHook = callback;\r\n  };\r\n\r\n  setPostUpdateHook = (callback: () => any) => {\r\n    this.postUpdateHook = callback;\r\n  };\r\n\r\n  // Stub to avoid unknown function in legacy code\r\n  importDashboards = (): Promise<void> => {\r\n    deprecationWarning('AppConfig', 'importDashboards()');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  enable = () => {\r\n    this.model.enabled = true;\r\n    this.model.pinned = true;\r\n    this.update();\r\n  };\r\n\r\n  disable = () => {\r\n    this.model.enabled = false;\r\n    this.model.pinned = false;\r\n    this.update();\r\n  };\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAgBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAmBA;AAxDA;AACA;AACA;AAEA;AACA;AACA;AAiCA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;;;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AASA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAOA;AACA;AASA;AAEA;AAMA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;AAEA;AAGA;AACA;AACA;AACA;AAYA;AAAA;AACA;AAAA;AAiBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvEA;AACA;AACA;AACA;;AACA;AAEA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA;AA4DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/GA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAoFA;AACA;AACA;AACA;AACA;AACA;AAvFA;AACA;AACA;AACA;AACA;;AACA;AAEA;;;;;;AACA;AACA;AAEA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAGA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAKA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAAA;AAGA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAKA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;;AAMA;AAEA;AAIA;AAEA;AAGA;AACA;AACA;AACA;AASA;AACA;AAAA;AAEA;;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1cA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAWA;AAAA;AAQA;AAAA;AALA;AACA;AACA;AAmEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAhHA;AACA;AACA;AACA;;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AAKA;AASA;AAqDA;AAAA;;;;;;A","sourceRoot":""}