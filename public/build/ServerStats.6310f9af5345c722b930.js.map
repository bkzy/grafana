{"version":3,"file":"ServerStats.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/features/admin/ServerStats.tsx","webpack:///webpack:///./public/app/features/admin/state/apis.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\nimport { StoreState } from 'app/types';\r\nimport { getNavModel } from 'app/core/selectors/navModel';\r\nimport { getServerStats, ServerStat } from './state/apis';\r\nimport Page from 'app/core/components/Page/Page';\r\nimport { NavModel } from '@grafana/data';\r\n\r\ninterface Props {\r\n  navModel: NavModel;\r\n  getServerStats: () => Promise<ServerStat[]>;\r\n}\r\n\r\ninterface State {\r\n  stats: ServerStat[];\r\n  isLoading: boolean;\r\n}\r\n\r\nexport class ServerStats extends PureComponent<Props, State> {\r\n  state: State = {\r\n    stats: [],\r\n    isLoading: true,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const stats = await this.props.getServerStats();\r\n      this.setState({ stats, isLoading: false });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { navModel } = this.props;\r\n    const { stats, isLoading } = this.state;\r\n\r\n    return (\r\n      <Page navModel={navModel}>\r\n        <Page.Contents isLoading={isLoading}>\r\n          <table className=\"filter-table form-inline\">\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Value</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{stats.map(StatItem)}</tbody>\r\n          </table>\r\n        </Page.Contents>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nfunction StatItem(stat: ServerStat) {\r\n  return (\r\n    <tr key={stat.name}>\r\n      <td>{stat.name}</td>\r\n      <td>{stat.value}</td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n  navModel: getNavModel(state.navIndex, 'server-stats'),\r\n  getServerStats: getServerStats,\r\n});\r\n\r\nexport default hot(module)(connect(mapStateToProps)(ServerStats));\r\n","import { getBackendSrv } from '@grafana/runtime';\r\n\r\nexport interface ServerStat {\r\n  name: string;\r\n  value: number;\r\n}\r\n\r\nexport const getServerStats = async (): Promise<ServerStat[]> => {\r\n  try {\r\n    const res = await getBackendSrv().get('api/admin/stats');\r\n    return [\r\n      { name: 'Total users', value: res.users },\r\n      { name: 'Total admins', value: res.admins },\r\n      { name: 'Total editors', value: res.editors },\r\n      { name: 'Total viewers', value: res.viewers },\r\n      { name: 'Active users (seen last 30 days)', value: res.activeUsers },\r\n      { name: 'Active admins (seen last 30 days)', value: res.activeAdmins },\r\n      { name: 'Active editors (seen last 30 days)', value: res.activeEditors },\r\n      { name: 'Active viewers (seen last 30 days)', value: res.activeViewers },\r\n      { name: 'Active sessions', value: res.activeSessions },\r\n      { name: 'Total dashboards', value: res.dashboards },\r\n      { name: 'Total orgs', value: res.orgs },\r\n      { name: 'Total playlists', value: res.playlists },\r\n      { name: 'Total snapshots', value: res.snapshots },\r\n      { name: 'Total dashboard tags', value: res.tags },\r\n      { name: 'Total starred dashboards', value: res.stars },\r\n      { name: 'Total alerts', value: res.alerts },\r\n    ];\r\n  } catch (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAaA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AA+BA;AA7BA;;;;;;;AAEA;;AAAA;AACA;;;;AAEA;;;;;;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAKA;AACA;AAAA;;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;ACtEA;AAOA;;;;;;AAEA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;;;;AAEA;;;;;A","sourceRoot":""}