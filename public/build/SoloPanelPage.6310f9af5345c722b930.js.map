{"version":3,"file":"SoloPanelPage.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/features/dashboard/containers/SoloPanelPage.tsx"],"sourcesContent":["// Libraries\r\nimport React, { Component } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\n\r\n// Components\r\nimport { DashboardPanel } from '../dashgrid/DashboardPanel';\r\n\r\n// Redux\r\nimport { initDashboard } from '../state/initDashboard';\r\n\r\n// Types\r\nimport { StoreState, DashboardRouteInfo } from 'app/types';\r\nimport { PanelModel, DashboardModel } from 'app/features/dashboard/state';\r\n\r\ninterface Props {\r\n  urlPanelId: string;\r\n  urlUid?: string;\r\n  urlSlug?: string;\r\n  urlType?: string;\r\n  $scope: any;\r\n  $injector: any;\r\n  routeInfo: DashboardRouteInfo;\r\n  initDashboard: typeof initDashboard;\r\n  dashboard: DashboardModel | null;\r\n}\r\n\r\ninterface State {\r\n  panel: PanelModel | null;\r\n  notFound: boolean;\r\n}\r\n\r\nexport class SoloPanelPage extends Component<Props, State> {\r\n  state: State = {\r\n    panel: null,\r\n    notFound: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { $injector, $scope, urlUid, urlType, urlSlug, routeInfo } = this.props;\r\n\r\n    this.props.initDashboard({\r\n      $injector: $injector,\r\n      $scope: $scope,\r\n      urlSlug: urlSlug,\r\n      urlUid: urlUid,\r\n      urlType: urlType,\r\n      routeInfo: routeInfo,\r\n      fixUrl: false,\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props) {\r\n    const { urlPanelId, dashboard } = this.props;\r\n\r\n    if (!dashboard) {\r\n      return;\r\n    }\r\n\r\n    // we just got the dashboard!\r\n    if (!prevProps.dashboard) {\r\n      const panelId = parseInt(urlPanelId, 10);\r\n\r\n      // need to expand parent row if this panel is inside a row\r\n      dashboard.expandParentRowFor(panelId);\r\n\r\n      const panel = dashboard.getPanelById(panelId);\r\n\r\n      if (!panel) {\r\n        this.setState({ notFound: true });\r\n        return;\r\n      }\r\n\r\n      this.setState({ panel });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { urlPanelId, dashboard } = this.props;\r\n    const { notFound, panel } = this.state;\r\n\r\n    if (notFound) {\r\n      return <div className=\"alert alert-error\">Panel with id {urlPanelId} not found</div>;\r\n    }\r\n\r\n    if (!panel) {\r\n      return <div>Loading & initializing dashboard</div>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"panel-solo\">\r\n        <DashboardPanel dashboard={dashboard} panel={panel} isEditing={false} isFullscreen={false} isInView={true} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n  urlUid: state.location.routeParams.uid,\r\n  urlSlug: state.location.routeParams.slug,\r\n  urlType: state.location.routeParams.type,\r\n  urlPanelId: state.location.query.panelId,\r\n  dashboard: state.dashboard.model as DashboardModel,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  initDashboard,\r\n};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(SoloPanelPage));\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAuBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AA2DA;AAzDA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;A","sourceRoot":""}