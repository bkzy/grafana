{"version":3,"file":"TeamList.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/core/components/connectWithCleanUp.tsx","webpack:///webpack:///./public/app/features/teams/TeamList.tsx"],"sourcesContent":["import { connect, MapDispatchToPropsParam, MapStateToPropsParam, useDispatch } from 'react-redux';\r\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\r\nimport React, { ComponentType, FunctionComponent, useEffect } from 'react';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\n\r\nexport const connectWithCleanUp = <\r\n  TStateProps extends {} = {},\r\n  TDispatchProps = {},\r\n  TOwnProps = {},\r\n  State = {},\r\n  TSelector extends object = {},\r\n  Statics = {}\r\n>(\r\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\r\n  mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\r\n  stateSelector: StateSelector<TSelector>\r\n) => (Component: ComponentType<any>) => {\r\n  const ConnectedComponent = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n    // @ts-ignore\r\n  )(Component);\r\n\r\n  const ConnectedComponentWithCleanUp: FunctionComponent = props => {\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n      return function cleanUp() {\r\n        dispatch(cleanUpAction({ stateSelector }));\r\n      };\r\n    }, []);\r\n    // @ts-ignore\r\n    return <ConnectedComponent {...props} />;\r\n  };\r\n\r\n  ConnectedComponentWithCleanUp.displayName = `ConnectWithCleanUp(${ConnectedComponent.displayName})`;\r\n  hoistNonReactStatics(ConnectedComponentWithCleanUp, Component);\r\n  type Hoisted = typeof ConnectedComponentWithCleanUp & Statics;\r\n\r\n  return ConnectedComponentWithCleanUp as Hoisted;\r\n};\r\n","import React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport Page from 'app/core/components/Page/Page';\r\nimport { DeleteButton } from '@grafana/ui';\r\nimport { NavModel } from '@grafana/data';\r\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\r\nimport { OrgRole, StoreState, Team } from 'app/types';\r\nimport { deleteTeam, loadTeams } from './state/actions';\r\nimport { getSearchQuery, getTeams, getTeamsCount, isPermissionTeamAdmin } from './state/selectors';\r\nimport { getNavModel } from 'app/core/selectors/navModel';\r\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\r\nimport { config } from 'app/core/config';\r\nimport { contextSrv, User } from 'app/core/services/context_srv';\r\nimport { connectWithCleanUp } from '../../core/components/connectWithCleanUp';\r\nimport { setSearchQuery } from './state/reducers';\r\n\r\nexport interface Props {\r\n  navModel: NavModel;\r\n  teams: Team[];\r\n  searchQuery: string;\r\n  teamsCount: number;\r\n  hasFetched: boolean;\r\n  loadTeams: typeof loadTeams;\r\n  deleteTeam: typeof deleteTeam;\r\n  setSearchQuery: typeof setSearchQuery;\r\n  editorsCanAdmin?: boolean;\r\n  signedInUser?: User;\r\n}\r\n\r\nexport class TeamList extends PureComponent<Props, any> {\r\n  componentDidMount() {\r\n    this.fetchTeams();\r\n  }\r\n\r\n  async fetchTeams() {\r\n    await this.props.loadTeams();\r\n  }\r\n\r\n  deleteTeam = (team: Team) => {\r\n    this.props.deleteTeam(team.id);\r\n  };\r\n\r\n  onSearchQueryChange = (value: string) => {\r\n    this.props.setSearchQuery(value);\r\n  };\r\n\r\n  renderTeam(team: Team) {\r\n    const { editorsCanAdmin, signedInUser } = this.props;\r\n    const permission = team.permission;\r\n    const teamUrl = `org/teams/edit/${team.id}`;\r\n    const canDelete = isPermissionTeamAdmin({ permission, editorsCanAdmin, signedInUser });\r\n\r\n    return (\r\n      <tr key={team.id}>\r\n        <td className=\"width-4 text-center link-td\">\r\n          <a href={teamUrl}>\r\n            <img className=\"filter-table__avatar\" src={team.avatarUrl} />\r\n          </a>\r\n        </td>\r\n        <td className=\"link-td\">\r\n          <a href={teamUrl}>{team.name}</a>\r\n        </td>\r\n        <td className=\"link-td\">\r\n          <a href={teamUrl}>{team.email}</a>\r\n        </td>\r\n        <td className=\"link-td\">\r\n          <a href={teamUrl}>{team.memberCount}</a>\r\n        </td>\r\n        <td className=\"text-right\">\r\n          <DeleteButton size=\"sm\" disabled={!canDelete} onConfirm={() => this.deleteTeam(team)} />\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  renderEmptyList() {\r\n    return (\r\n      <EmptyListCTA\r\n        title=\"You haven't created any teams yet.\"\r\n        buttonIcon=\"gicon gicon-team\"\r\n        buttonLink=\"org/teams/new\"\r\n        buttonTitle=\" New team\"\r\n        proTip=\"Assign folder and dashboard permissions to teams instead of users to ease administration.\"\r\n        proTipLink=\"\"\r\n        proTipLinkTitle=\"\"\r\n        proTipTarget=\"_blank\"\r\n      />\r\n    );\r\n  }\r\n\r\n  renderTeamList() {\r\n    const { teams, searchQuery, editorsCanAdmin, signedInUser } = this.props;\r\n    const isCanAdminAndViewer = editorsCanAdmin && signedInUser.orgRole === OrgRole.Viewer;\r\n    const disabledClass = isCanAdminAndViewer ? ' disabled' : '';\r\n    const newTeamHref = isCanAdminAndViewer ? '#' : 'org/teams/new';\r\n\r\n    return (\r\n      <>\r\n        <div className=\"page-action-bar\">\r\n          <div className=\"gf-form gf-form--grow\">\r\n            <FilterInput\r\n              labelClassName=\"gf-form--has-input-icon gf-form--grow\"\r\n              inputClassName=\"gf-form-input\"\r\n              placeholder=\"Search teams\"\r\n              value={searchQuery}\r\n              onChange={this.onSearchQueryChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"page-action-bar__spacer\" />\r\n\r\n          <a className={`btn btn-primary${disabledClass}`} href={newTeamHref}>\r\n            New team\r\n          </a>\r\n        </div>\r\n\r\n        <div className=\"admin-list-table\">\r\n          <table className=\"filter-table filter-table--hover form-inline\">\r\n            <thead>\r\n              <tr>\r\n                <th />\r\n                <th>Name</th>\r\n                <th>Email</th>\r\n                <th>Members</th>\r\n                <th style={{ width: '1%' }} />\r\n              </tr>\r\n            </thead>\r\n            <tbody>{teams.map(team => this.renderTeam(team))}</tbody>\r\n          </table>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  renderList() {\r\n    const { teamsCount } = this.props;\r\n\r\n    if (teamsCount > 0) {\r\n      return this.renderTeamList();\r\n    } else {\r\n      return this.renderEmptyList();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { hasFetched, navModel } = this.props;\r\n\r\n    return (\r\n      <Page navModel={navModel}>\r\n        <Page.Contents isLoading={!hasFetched}>{hasFetched && this.renderList()}</Page.Contents>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState) {\r\n  return {\r\n    navModel: getNavModel(state.navIndex, 'teams'),\r\n    teams: getTeams(state.teams),\r\n    searchQuery: getSearchQuery(state.teams),\r\n    teamsCount: getTeamsCount(state.teams),\r\n    hasFetched: state.teams.hasFetched,\r\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\r\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  loadTeams,\r\n  deleteTeam,\r\n  setSearchQuery,\r\n};\r\n\r\nexport default hot(module)(connectWithCleanUp(mapStateToProps, mapDispatchToProps, state => state.teams)(TeamList));\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAYA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAEA;AACA;AACA;;AA6GA;AA3HA;AACA;AACA;AAEA;;;;AACA;;AAAA;;;;;AACA;AAUA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AAYA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AASA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;A","sourceRoot":""}