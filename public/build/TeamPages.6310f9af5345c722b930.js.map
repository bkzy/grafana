{"version":3,"file":"TeamPages.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/core/components/WithFeatureToggle.tsx","webpack:///webpack:///./public/app/features/teams/TeamGroupSync.tsx","webpack:///webpack:///./public/app/features/teams/TeamMemberRow.tsx","webpack:///webpack:///./public/app/features/teams/TeamMembers.tsx","webpack:///webpack:///./public/app/features/teams/TeamPages.tsx","webpack:///webpack:///./public/app/features/teams/TeamSettings.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  featureToggle: boolean;\n}\n\nexport const WithFeatureToggle: FunctionComponent<Props> = ({ featureToggle, children }) => {\n  if (featureToggle === true) {\n    return <>{children}</>;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\r\nimport { Input, Tooltip } from '@grafana/ui';\r\n\r\nimport { TeamGroup } from '../../types';\r\nimport { addTeamGroup, loadTeamGroups, removeTeamGroup } from './state/actions';\r\nimport { getTeamGroups } from './state/selectors';\r\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\r\n\r\nexport interface Props {\r\n  groups: TeamGroup[];\r\n  loadTeamGroups: typeof loadTeamGroups;\r\n  addTeamGroup: typeof addTeamGroup;\r\n  removeTeamGroup: typeof removeTeamGroup;\r\n}\r\n\r\ninterface State {\r\n  isAdding: boolean;\r\n  newGroupId?: string;\r\n}\r\n\r\nconst headerTooltip = `Sync LDAP or OAuth groups with your Grafana teams.`;\r\n\r\nexport class TeamGroupSync extends PureComponent<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { isAdding: false, newGroupId: '' };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchTeamGroups();\r\n  }\r\n\r\n  async fetchTeamGroups() {\r\n    await this.props.loadTeamGroups();\r\n  }\r\n\r\n  onToggleAdding = () => {\r\n    this.setState({ isAdding: !this.state.isAdding });\r\n  };\r\n\r\n  onNewGroupIdChanged = (event: any) => {\r\n    this.setState({ newGroupId: event.target.value });\r\n  };\r\n\r\n  onAddGroup = (event: any) => {\r\n    event.preventDefault();\r\n    this.props.addTeamGroup(this.state.newGroupId);\r\n    this.setState({ isAdding: false, newGroupId: '' });\r\n  };\r\n\r\n  onRemoveGroup = (group: TeamGroup) => {\r\n    this.props.removeTeamGroup(group.groupId);\r\n  };\r\n\r\n  isNewGroupValid() {\r\n    return this.state.newGroupId.length > 1;\r\n  }\r\n\r\n  renderGroup(group: TeamGroup) {\r\n    return (\r\n      <tr key={group.groupId}>\r\n        <td>{group.groupId}</td>\r\n        <td style={{ width: '1%' }}>\r\n          <a className=\"btn btn-danger btn-small\" onClick={() => this.onRemoveGroup(group)}>\r\n            <i className=\"fa fa-remove\" />\r\n          </a>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { isAdding, newGroupId } = this.state;\r\n    const groups = this.props.groups;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"page-action-bar\">\r\n          <h3 className=\"page-sub-heading\">External group sync</h3>\r\n          <Tooltip placement=\"auto\" content={headerTooltip}>\r\n            <div className=\"page-sub-heading-icon\">\r\n              <i className=\"gicon gicon-question gicon--has-hover\" />\r\n            </div>\r\n          </Tooltip>\r\n          <div className=\"page-action-bar__spacer\" />\r\n          {groups.length > 0 && (\r\n            <button className=\"btn btn-primary pull-right\" onClick={this.onToggleAdding}>\r\n              <i className=\"fa fa-plus\" /> Add group\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        <SlideDown in={isAdding}>\r\n          <div className=\"cta-form\">\r\n            <button className=\"cta-form__close btn btn-transparent\" onClick={this.onToggleAdding}>\r\n              <i className=\"fa fa-close\" />\r\n            </button>\r\n            <h5>Add External Group</h5>\r\n            <form className=\"gf-form-inline\" onSubmit={this.onAddGroup}>\r\n              <div className=\"gf-form\">\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"gf-form-input width-30\"\r\n                  value={newGroupId}\r\n                  onChange={this.onNewGroupIdChanged}\r\n                  placeholder=\"cn=ops,ou=groups,dc=grafana,dc=org\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"gf-form\">\r\n                <button className=\"btn btn-primary gf-form-btn\" type=\"submit\" disabled={!this.isNewGroupValid()}>\r\n                  Add group\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </SlideDown>\r\n\r\n        {groups.length === 0 && !isAdding && (\r\n          <EmptyListCTA\r\n            onClick={this.onToggleAdding}\r\n            buttonIcon=\"gicon gicon-team\"\r\n            title=\"There are no external groups to sync with\"\r\n            buttonTitle=\"Add Group\"\r\n            proTip={headerTooltip}\r\n            proTipLinkTitle=\"Learn more\"\r\n            proTipLink=\"http://docs.grafana.org/auth/enhanced_ldap/\"\r\n            proTipTarget=\"_blank\"\r\n          />\r\n        )}\r\n\r\n        {groups.length > 0 && (\r\n          <div className=\"admin-list-table\">\r\n            <table className=\"filter-table filter-table--hover form-inline\">\r\n              <thead>\r\n                <tr>\r\n                  <th>External Group ID</th>\r\n                  <th style={{ width: '1%' }} />\r\n                </tr>\r\n              </thead>\r\n              <tbody>{groups.map(group => this.renderGroup(group))}</tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n  return {\r\n    groups: getTeamGroups(state.team),\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  loadTeamGroups,\r\n  addTeamGroup,\r\n  removeTeamGroup,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupSync);\r\n","import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Select, DeleteButton } from '@grafana/ui';\r\nimport { SelectableValue } from '@grafana/data';\r\n\r\nimport { TeamMember, teamsPermissionLevels, TeamPermissionLevel } from 'app/types';\r\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\r\nimport { updateTeamMember, removeTeamMember } from './state/actions';\r\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\r\n\r\nexport interface Props {\r\n  member: TeamMember;\r\n  syncEnabled: boolean;\r\n  editorsCanAdmin: boolean;\r\n  signedInUserIsTeamAdmin: boolean;\r\n  removeTeamMember?: typeof removeTeamMember;\r\n  updateTeamMember?: typeof updateTeamMember;\r\n}\r\n\r\nexport class TeamMemberRow extends PureComponent<Props> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.renderLabels = this.renderLabels.bind(this);\r\n    this.renderPermissions = this.renderPermissions.bind(this);\r\n  }\r\n\r\n  onRemoveMember(member: TeamMember) {\r\n    this.props.removeTeamMember(member.userId);\r\n  }\r\n\r\n  onPermissionChange = (item: SelectableValue<TeamPermissionLevel>, member: TeamMember) => {\r\n    const permission = item.value;\r\n    const updatedTeamMember = { ...member, permission };\r\n\r\n    this.props.updateTeamMember(updatedTeamMember);\r\n  };\r\n\r\n  renderPermissions(member: TeamMember) {\r\n    const { editorsCanAdmin, signedInUserIsTeamAdmin } = this.props;\r\n    const value = teamsPermissionLevels.find(dp => dp.value === member.permission);\r\n\r\n    return (\r\n      <WithFeatureToggle featureToggle={editorsCanAdmin}>\r\n        <td className=\"width-5 team-permissions\">\r\n          <div className=\"gf-form\">\r\n            {signedInUserIsTeamAdmin && (\r\n              <Select\r\n                isSearchable={false}\r\n                options={teamsPermissionLevels}\r\n                onChange={item => this.onPermissionChange(item, member)}\r\n                className=\"gf-form-select-box__control--menu-right\"\r\n                value={value}\r\n              />\r\n            )}\r\n            {!signedInUserIsTeamAdmin && <span>{value.label}</span>}\r\n          </div>\r\n        </td>\r\n      </WithFeatureToggle>\r\n    );\r\n  }\r\n\r\n  renderLabels(labels: string[]) {\r\n    if (!labels) {\r\n      return <td />;\r\n    }\r\n\r\n    return (\r\n      <td>\r\n        {labels.map(label => (\r\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\r\n        ))}\r\n      </td>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { member, syncEnabled, signedInUserIsTeamAdmin } = this.props;\r\n    return (\r\n      <tr key={member.userId}>\r\n        <td className=\"width-4 text-center\">\r\n          <img className=\"filter-table__avatar\" src={member.avatarUrl} />\r\n        </td>\r\n        <td>{member.login}</td>\r\n        <td>{member.email}</td>\r\n        <td>{member.name}</td>\r\n        {this.renderPermissions(member)}\r\n        {syncEnabled && this.renderLabels(member.labels)}\r\n        <td className=\"text-right\">\r\n          <DeleteButton size=\"sm\" disabled={!signedInUserIsTeamAdmin} onConfirm={() => this.onRemoveMember(member)} />\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n  return {};\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  removeTeamMember,\r\n  updateTeamMember,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMemberRow);\r\n","import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\r\nimport { UserPicker } from 'app/core/components/Select/UserPicker';\r\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\r\nimport { TeamMember, User } from 'app/types';\r\nimport { addTeamMember } from './state/actions';\r\nimport { getSearchMemberQuery, isSignedInUserTeamAdmin } from './state/selectors';\r\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\r\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\r\nimport { config } from 'app/core/config';\r\nimport { contextSrv, User as SignedInUser } from 'app/core/services/context_srv';\r\nimport TeamMemberRow from './TeamMemberRow';\r\nimport { setSearchMemberQuery } from './state/reducers';\r\n\r\nexport interface Props {\r\n  members: TeamMember[];\r\n  searchMemberQuery: string;\r\n  addTeamMember: typeof addTeamMember;\r\n  setSearchMemberQuery: typeof setSearchMemberQuery;\r\n  syncEnabled: boolean;\r\n  editorsCanAdmin?: boolean;\r\n  signedInUser?: SignedInUser;\r\n}\r\n\r\nexport interface State {\r\n  isAdding: boolean;\r\n  newTeamMember?: User;\r\n}\r\n\r\nexport class TeamMembers extends PureComponent<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { isAdding: false, newTeamMember: null };\r\n  }\r\n\r\n  onSearchQueryChange = (value: string) => {\r\n    this.props.setSearchMemberQuery(value);\r\n  };\r\n\r\n  onToggleAdding = () => {\r\n    this.setState({ isAdding: !this.state.isAdding });\r\n  };\r\n\r\n  onUserSelected = (user: User) => {\r\n    this.setState({ newTeamMember: user });\r\n  };\r\n\r\n  onAddUserToTeam = async () => {\r\n    this.props.addTeamMember(this.state.newTeamMember.id);\r\n    this.setState({ newTeamMember: null });\r\n  };\r\n\r\n  renderLabels(labels: string[]) {\r\n    if (!labels) {\r\n      return <td />;\r\n    }\r\n\r\n    return (\r\n      <td>\r\n        {labels.map(label => (\r\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\r\n        ))}\r\n      </td>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { isAdding } = this.state;\r\n    const { searchMemberQuery, members, syncEnabled, editorsCanAdmin, signedInUser } = this.props;\r\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"page-action-bar\">\r\n          <div className=\"gf-form gf-form--grow\">\r\n            <FilterInput\r\n              labelClassName=\"gf-form--has-input-icon gf-form--grow\"\r\n              inputClassName=\"gf-form-input\"\r\n              placeholder=\"Search members\"\r\n              value={searchMemberQuery}\r\n              onChange={this.onSearchQueryChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"page-action-bar__spacer\" />\r\n\r\n          <button\r\n            className=\"btn btn-primary pull-right\"\r\n            onClick={this.onToggleAdding}\r\n            disabled={isAdding || !isTeamAdmin}\r\n          >\r\n            Add member\r\n          </button>\r\n        </div>\r\n\r\n        <SlideDown in={isAdding}>\r\n          <div className=\"cta-form\">\r\n            <button className=\"cta-form__close btn btn-transparent\" onClick={this.onToggleAdding}>\r\n              <i className=\"fa fa-close\" />\r\n            </button>\r\n            <h5>Add team member</h5>\r\n            <div className=\"gf-form-inline\">\r\n              <UserPicker onSelected={this.onUserSelected} className=\"min-width-30\" />\r\n              {this.state.newTeamMember && (\r\n                <button className=\"btn btn-primary gf-form-btn\" type=\"submit\" onClick={this.onAddUserToTeam}>\r\n                  Add to team\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </SlideDown>\r\n\r\n        <div className=\"admin-list-table\">\r\n          <table className=\"filter-table filter-table--hover form-inline\">\r\n            <thead>\r\n              <tr>\r\n                <th />\r\n                <th>Login</th>\r\n                <th>Email</th>\r\n                <th>Name</th>\r\n                <WithFeatureToggle featureToggle={editorsCanAdmin}>\r\n                  <th>Permission</th>\r\n                </WithFeatureToggle>\r\n                {syncEnabled && <th />}\r\n                <th style={{ width: '1%' }} />\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {members &&\r\n                members.map(member => (\r\n                  <TeamMemberRow\r\n                    key={member.userId}\r\n                    member={member}\r\n                    syncEnabled={syncEnabled}\r\n                    editorsCanAdmin={editorsCanAdmin}\r\n                    signedInUserIsTeamAdmin={isTeamAdmin}\r\n                  />\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n  return {\r\n    searchMemberQuery: getSearchMemberQuery(state.team),\r\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\r\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  addTeamMember,\r\n  setSearchMemberQuery,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMembers);\r\n","import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\nimport { hot } from 'react-hot-loader';\r\nimport config from 'app/core/config';\r\nimport Page from 'app/core/components/Page/Page';\r\nimport TeamMembers from './TeamMembers';\r\nimport TeamSettings from './TeamSettings';\r\nimport TeamGroupSync from './TeamGroupSync';\r\nimport { Team, TeamMember } from 'app/types';\r\nimport { loadTeam, loadTeamMembers } from './state/actions';\r\nimport { getTeam, getTeamMembers, isSignedInUserTeamAdmin } from './state/selectors';\r\nimport { getTeamLoadingNav } from './state/navModel';\r\nimport { getNavModel } from 'app/core/selectors/navModel';\r\nimport { getRouteParamsId, getRouteParamsPage } from '../../core/selectors/location';\r\nimport { contextSrv, User } from 'app/core/services/context_srv';\r\nimport { NavModel } from '@grafana/data';\r\n\r\nexport interface Props {\r\n  team: Team;\r\n  loadTeam: typeof loadTeam;\r\n  loadTeamMembers: typeof loadTeamMembers;\r\n  teamId: number;\r\n  pageName: string;\r\n  navModel: NavModel;\r\n  members?: TeamMember[];\r\n  editorsCanAdmin?: boolean;\r\n  signedInUser?: User;\r\n}\r\n\r\ninterface State {\r\n  isSyncEnabled: boolean;\r\n  isLoading: boolean;\r\n}\r\n\r\nenum PageTypes {\r\n  Members = 'members',\r\n  Settings = 'settings',\r\n  GroupSync = 'groupsync',\r\n}\r\n\r\nexport class TeamPages extends PureComponent<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isLoading: false,\r\n      isSyncEnabled: config.licenseInfo.hasLicense,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.fetchTeam();\r\n  }\r\n\r\n  async fetchTeam() {\r\n    const { loadTeam, teamId } = this.props;\r\n    this.setState({ isLoading: true });\r\n    const team = await loadTeam(teamId);\r\n    await this.props.loadTeamMembers();\r\n    this.setState({ isLoading: false });\r\n    return team;\r\n  }\r\n\r\n  getCurrentPage() {\r\n    const pages = ['members', 'settings', 'groupsync'];\r\n    const currentPage = this.props.pageName;\r\n    return _.includes(pages, currentPage) ? currentPage : pages[0];\r\n  }\r\n\r\n  textsAreEqual = (text1: string, text2: string) => {\r\n    if (!text1 && !text2) {\r\n      return true;\r\n    }\r\n\r\n    if (!text1 || !text2) {\r\n      return false;\r\n    }\r\n\r\n    return text1.toLocaleLowerCase() === text2.toLocaleLowerCase();\r\n  };\r\n\r\n  hideTabsFromNonTeamAdmin = (navModel: NavModel, isSignedInUserTeamAdmin: boolean) => {\r\n    if (!isSignedInUserTeamAdmin && navModel.main && navModel.main.children) {\r\n      navModel.main.children\r\n        .filter(navItem => !this.textsAreEqual(navItem.text, PageTypes.Members))\r\n        .map(navItem => {\r\n          navItem.hideFromTabs = true;\r\n        });\r\n    }\r\n\r\n    return navModel;\r\n  };\r\n\r\n  renderPage(isSignedInUserTeamAdmin: boolean) {\r\n    const { isSyncEnabled } = this.state;\r\n    const { members } = this.props;\r\n    const currentPage = this.getCurrentPage();\r\n\r\n    switch (currentPage) {\r\n      case PageTypes.Members:\r\n        return <TeamMembers syncEnabled={isSyncEnabled} members={members} />;\r\n\r\n      case PageTypes.Settings:\r\n        return isSignedInUserTeamAdmin && <TeamSettings />;\r\n      case PageTypes.GroupSync:\r\n        return isSignedInUserTeamAdmin && isSyncEnabled && <TeamGroupSync />;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    const { team, navModel, members, editorsCanAdmin, signedInUser } = this.props;\r\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\r\n\r\n    return (\r\n      <Page navModel={this.hideTabsFromNonTeamAdmin(navModel, isTeamAdmin)}>\r\n        <Page.Contents isLoading={this.state.isLoading}>\r\n          {team && Object.keys(team).length !== 0 && this.renderPage(isTeamAdmin)}\r\n        </Page.Contents>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n  const teamId = getRouteParamsId(state.location);\r\n  const pageName = getRouteParamsPage(state.location) || 'members';\r\n  const teamLoadingNav = getTeamLoadingNav(pageName as string);\r\n  const navModel = getNavModel(state.navIndex, `team-${pageName}-${teamId}`, teamLoadingNav);\r\n  const team = getTeam(state.team, teamId);\r\n  const members = getTeamMembers(state.team);\r\n\r\n  return {\r\n    navModel,\r\n    teamId: teamId,\r\n    pageName: pageName,\r\n    team,\r\n    members,\r\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\r\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  loadTeam,\r\n  loadTeamMembers,\r\n};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(TeamPages));\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormLabel, Input } from '@grafana/ui';\r\n\r\nimport { SharedPreferences } from 'app/core/components/SharedPreferences/SharedPreferences';\r\nimport { updateTeam } from './state/actions';\r\nimport { getRouteParamsId } from 'app/core/selectors/location';\r\nimport { getTeam } from './state/selectors';\r\nimport { Team } from 'app/types';\r\n\r\nexport interface Props {\r\n  team: Team;\r\n  updateTeam: typeof updateTeam;\r\n}\r\n\r\ninterface State {\r\n  name: string;\r\n  email: string;\r\n}\r\n\r\nexport class TeamSettings extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: props.team.name,\r\n      email: props.team.email,\r\n    };\r\n  }\r\n\r\n  onChangeName = (event: any) => {\r\n    this.setState({ name: event.target.value });\r\n  };\r\n\r\n  onChangeEmail = (event: any) => {\r\n    this.setState({ email: event.target.value });\r\n  };\r\n\r\n  onUpdate = (event: any) => {\r\n    const { name, email } = this.state;\r\n    event.preventDefault();\r\n    this.props.updateTeam(name, email);\r\n  };\r\n\r\n  render() {\r\n    const { team } = this.props;\r\n    const { name, email } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <h3 className=\"page-sub-heading\">Team Settings</h3>\r\n        <form name=\"teamDetailsForm\" className=\"gf-form-group\" onSubmit={this.onUpdate}>\r\n          <div className=\"gf-form max-width-30\">\r\n            <FormLabel>Name</FormLabel>\r\n            <Input\r\n              type=\"text\"\r\n              required\r\n              value={name}\r\n              className=\"gf-form-input max-width-22\"\r\n              onChange={this.onChangeName}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"gf-form max-width-30\">\r\n            <FormLabel tooltip=\"This is optional and is primarily used to set the team profile avatar (via gravatar service)\">\r\n              Email\r\n            </FormLabel>\r\n            <Input\r\n              type=\"email\"\r\n              className=\"gf-form-input max-width-22\"\r\n              value={email}\r\n              placeholder=\"team@email.com\"\r\n              onChange={this.onChangeEmail}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"gf-form-button-row\">\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n              Update\r\n            </button>\r\n          </div>\r\n        </form>\r\n        <SharedPreferences resourceUri={`teams/${team.id}`} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n  const teamId = getRouteParamsId(state.location);\r\n\r\n  return {\r\n    team: getTeam(state.team, teamId),\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  updateTeam,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamSettings);\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAcA;AAEA;AAAA;AACA;AAAA;AAaA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA3BA;;AACA;AAEA;AACA;AACA;AAEA;;;;AACA;;AAAA;;;;;AACA;AAoBA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAEA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AASA;AACA;AAQA;AAaA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAMA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;ACpKA;AACA;AACA;AAGA;AACA;AACA;AACA;AAWA;AAAA;AACA;AAAA;AAUA;AACA;AACA;AAEA;AACA;AAbA;AACA;;AACA;AAEA;AACA;AACA;AASA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AASA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AAOA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;;;AACA;AAlBA;;AACA;AAmBA;AACA;AACA;AACA;AAEA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AASA;AAEA;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAcA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAoBA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AA4BA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA/CA;AACA;AACA;AACA;;AACA;AAEA;;;;AACA;;AAAA;;;;;AACA;AAEA;;;;;;AACA;AACA;AACA;;AAAA;AACA;;AAAA;AACA;AACA;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AA0BA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;ACtJA;AACA;AACA;AAEA;AACA;AACA;AACA;AAaA;AAAA;AACA;AAAA;AASA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAlBA;AACA;AACA;AACA;;AACA;AAgBA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AASA;AACA;AAGA;AASA;AACA;AAKA;AAGA;AACA;AAAA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;A","sourceRoot":""}