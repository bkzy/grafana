{"version":3,"file":"UsersListPage.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/core/components/FilterInput/FilterInput.tsx","webpack:///webpack:///./public/app/features/users/InviteeRow.tsx","webpack:///webpack:///./public/app/features/users/InviteesTable.tsx","webpack:///webpack:///./public/app/features/users/UsersActionBar.tsx","webpack:///webpack:///./public/app/features/users/UsersListPage.tsx","webpack:///webpack:///./public/app/features/users/UsersTable.tsx","webpack:///webpack:///./public/app/features/users/state/actions.ts","webpack:///webpack:///./public/app/features/users/state/selectors.ts"],"sourcesContent":["import React, { forwardRef } from 'react';\r\nimport { escapeStringForRegex, unEscapeStringFromRegex } from '@grafana/data';\r\n\r\nexport interface Props {\r\n  value: string | undefined;\r\n  placeholder?: string;\r\n  labelClassName?: string;\r\n  inputClassName?: string;\r\n  onChange: (value: string) => void;\r\n}\r\n\r\nexport const FilterInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\r\n  <label className={props.labelClassName}>\r\n    <input\r\n      ref={ref}\r\n      type=\"text\"\r\n      className={props.inputClassName}\r\n      value={unEscapeStringFromRegex(props.value)}\r\n      onChange={event => props.onChange(escapeStringForRegex(event.target.value))}\r\n      placeholder={props.placeholder ? props.placeholder : null}\r\n    />\r\n    <i className=\"gf-form-input-icon fa fa-search\" />\r\n  </label>\r\n));\r\n","import React, { createRef, PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Invitee } from 'app/types';\r\nimport { revokeInvite } from './state/actions';\r\n\r\nexport interface Props {\r\n  invitee: Invitee;\r\n  revokeInvite: typeof revokeInvite;\r\n}\r\n\r\nclass InviteeRow extends PureComponent<Props> {\r\n  private copyUrlRef = createRef<HTMLTextAreaElement>();\r\n\r\n  copyToClipboard = () => {\r\n    const node = this.copyUrlRef.current;\r\n\r\n    if (node) {\r\n      node.select();\r\n      document.execCommand('copy');\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { invitee, revokeInvite } = this.props;\r\n    return (\r\n      <tr>\r\n        <td>{invitee.email}</td>\r\n        <td>{invitee.name}</td>\r\n        <td className=\"text-right\">\r\n          <button className=\"btn btn-inverse btn-small\" onClick={this.copyToClipboard}>\r\n            <textarea\r\n              readOnly={true}\r\n              value={invitee.url}\r\n              style={{ position: 'absolute', bottom: 0, right: 0, opacity: 0, zIndex: -10 }}\r\n              ref={this.copyUrlRef}\r\n            />\r\n            Copy Invite\r\n          </button>\r\n          &nbsp;\r\n        </td>\r\n        <td>\r\n          <button className=\"btn btn-danger btn-small\" onClick={() => revokeInvite(invitee.code)}>\r\n            <i className=\"fa fa-remove\" />\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  revokeInvite,\r\n};\r\n\r\nexport default connect(() => {\r\n  return {};\r\n}, mapDispatchToProps)(InviteeRow);\r\n","import React, { PureComponent } from 'react';\nimport { Invitee } from 'app/types';\nimport InviteeRow from './InviteeRow';\n\nexport interface Props {\n  invitees: Invitee[];\n}\n\nexport default class InviteesTable extends PureComponent<Props> {\n  render() {\n    const { invitees } = this.props;\n\n    return (\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>Email</th>\n            <th>Name</th>\n            <th />\n            <th style={{ width: '34px' }} />\n          </tr>\n        </thead>\n        <tbody>\n          {invitees.map((invitee, index) => {\n            return <InviteeRow key={`${invitee.id}-${index}`} invitee={invitee} />;\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classNames from 'classnames';\r\nimport { setUsersSearchQuery } from './state/reducers';\r\nimport { getInviteesCount, getUsersSearchQuery } from './state/selectors';\r\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\r\n\r\nexport interface Props {\r\n  searchQuery: string;\r\n  setUsersSearchQuery: typeof setUsersSearchQuery;\r\n  onShowInvites: () => void;\r\n  pendingInvitesCount: number;\r\n  canInvite: boolean;\r\n  showInvites: boolean;\r\n  externalUserMngLinkUrl: string;\r\n  externalUserMngLinkName: string;\r\n}\r\n\r\nexport class UsersActionBar extends PureComponent<Props> {\r\n  render() {\r\n    const {\r\n      canInvite,\r\n      externalUserMngLinkName,\r\n      externalUserMngLinkUrl,\r\n      searchQuery,\r\n      pendingInvitesCount,\r\n      setUsersSearchQuery,\r\n      onShowInvites,\r\n      showInvites,\r\n    } = this.props;\r\n\r\n    const pendingInvitesButtonStyle = classNames({\r\n      btn: true,\r\n      'toggle-btn': true,\r\n      active: showInvites,\r\n    });\r\n\r\n    const usersButtonStyle = classNames({\r\n      btn: true,\r\n      'toggle-btn': true,\r\n      active: !showInvites,\r\n    });\r\n\r\n    return (\r\n      <div className=\"page-action-bar\">\r\n        <div className=\"gf-form gf-form--grow\">\r\n          <FilterInput\r\n            labelClassName=\"gf-form--has-input-icon\"\r\n            inputClassName=\"gf-form-input width-20\"\r\n            value={searchQuery}\r\n            onChange={setUsersSearchQuery}\r\n            placeholder=\"Filter by email, login or name\"\r\n          />\r\n          {pendingInvitesCount > 0 && (\r\n            <div style={{ marginLeft: '1rem' }}>\r\n              <button className={usersButtonStyle} key=\"users\" onClick={onShowInvites}>\r\n                Users\r\n              </button>\r\n              <button className={pendingInvitesButtonStyle} onClick={onShowInvites} key=\"pending-invites\">\r\n                Pending Invites ({pendingInvitesCount})\r\n              </button>\r\n            </div>\r\n          )}\r\n          <div className=\"page-action-bar__spacer\" />\r\n          {canInvite && (\r\n            <a className=\"btn btn-primary\" href=\"org/users/invite\">\r\n              <span>Invite</span>\r\n            </a>\r\n          )}\r\n          {externalUserMngLinkUrl && (\r\n            <a className=\"btn btn-primary\" href={externalUserMngLinkUrl} target=\"_blank\" rel=\"noopener\">\r\n              {externalUserMngLinkName}\r\n            </a>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n  return {\r\n    searchQuery: getUsersSearchQuery(state.users),\r\n    pendingInvitesCount: getInviteesCount(state.users),\r\n    externalUserMngLinkName: state.users.externalUserMngLinkName,\r\n    externalUserMngLinkUrl: state.users.externalUserMngLinkUrl,\r\n    canInvite: state.users.canInvite,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  setUsersSearchQuery,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersActionBar);\r\n","import React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\nimport { NavModel, renderMarkdown } from '@grafana/data';\r\n\r\nimport Page from 'app/core/components/Page/Page';\r\nimport UsersActionBar from './UsersActionBar';\r\nimport UsersTable from './UsersTable';\r\nimport InviteesTable from './InviteesTable';\r\nimport { CoreEvents, Invitee, OrgUser } from 'app/types';\r\nimport appEvents from 'app/core/app_events';\r\nimport { loadInvitees, loadUsers, removeUser, updateUser } from './state/actions';\r\nimport { getNavModel } from 'app/core/selectors/navModel';\r\nimport { getInvitees, getUsers, getUsersSearchQuery } from './state/selectors';\r\nimport { setUsersSearchQuery } from './state/reducers';\r\n\r\nexport interface Props {\r\n  navModel: NavModel;\r\n  invitees: Invitee[];\r\n  users: OrgUser[];\r\n  searchQuery: string;\r\n  externalUserMngInfo: string;\r\n  hasFetched: boolean;\r\n  loadUsers: typeof loadUsers;\r\n  loadInvitees: typeof loadInvitees;\r\n  setUsersSearchQuery: typeof setUsersSearchQuery;\r\n  updateUser: typeof updateUser;\r\n  removeUser: typeof removeUser;\r\n}\r\n\r\nexport interface State {\r\n  showInvites: boolean;\r\n}\r\n\r\nexport class UsersListPage extends PureComponent<Props, State> {\r\n  externalUserMngInfoHtml: string;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    if (this.props.externalUserMngInfo) {\r\n      this.externalUserMngInfoHtml = renderMarkdown(this.props.externalUserMngInfo);\r\n    }\r\n\r\n    this.state = {\r\n      showInvites: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchUsers();\r\n    this.fetchInvitees();\r\n  }\r\n\r\n  async fetchUsers() {\r\n    return await this.props.loadUsers();\r\n  }\r\n\r\n  async fetchInvitees() {\r\n    return await this.props.loadInvitees();\r\n  }\r\n\r\n  onRoleChange = (role: string, user: OrgUser) => {\r\n    const updatedUser = { ...user, role: role };\r\n\r\n    this.props.updateUser(updatedUser);\r\n  };\r\n\r\n  onRemoveUser = (user: OrgUser) => {\r\n    appEvents.emit(CoreEvents.showConfirmModal, {\r\n      title: 'Delete',\r\n      text: 'Are you sure you want to delete user ' + user.login + '?',\r\n      yesText: 'Delete',\r\n      icon: 'fa-warning',\r\n      onConfirm: () => {\r\n        this.props.removeUser(user.userId);\r\n      },\r\n    });\r\n  };\r\n\r\n  onShowInvites = () => {\r\n    this.setState(prevState => ({\r\n      showInvites: !prevState.showInvites,\r\n    }));\r\n  };\r\n\r\n  renderTable() {\r\n    const { invitees, users } = this.props;\r\n\r\n    if (this.state.showInvites) {\r\n      return <InviteesTable invitees={invitees} />;\r\n    } else {\r\n      return (\r\n        <UsersTable\r\n          users={users}\r\n          onRoleChange={(role, user) => this.onRoleChange(role, user)}\r\n          onRemoveUser={user => this.onRemoveUser(user)}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { navModel, hasFetched } = this.props;\r\n    const externalUserMngInfoHtml = this.externalUserMngInfoHtml;\r\n\r\n    return (\r\n      <Page navModel={navModel}>\r\n        <Page.Contents isLoading={!hasFetched}>\r\n          <>\r\n            <UsersActionBar onShowInvites={this.onShowInvites} showInvites={this.state.showInvites} />\r\n            {externalUserMngInfoHtml && (\r\n              <div className=\"grafana-info-box\" dangerouslySetInnerHTML={{ __html: externalUserMngInfoHtml }} />\r\n            )}\r\n            {hasFetched && this.renderTable()}\r\n          </>\r\n        </Page.Contents>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n  return {\r\n    navModel: getNavModel(state.navIndex, 'users'),\r\n    users: getUsers(state.users),\r\n    searchQuery: getUsersSearchQuery(state.users),\r\n    invitees: getInvitees(state.users),\r\n    externalUserMngInfo: state.users.externalUserMngInfo,\r\n    hasFetched: state.users.hasFetched,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  loadUsers,\r\n  loadInvitees,\r\n  setUsersSearchQuery,\r\n  updateUser,\r\n  removeUser,\r\n};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(UsersListPage));\r\n","import React, { FC } from 'react';\r\nimport { OrgUser } from 'app/types';\r\n\r\nexport interface Props {\r\n  users: OrgUser[];\r\n  onRoleChange: (role: string, user: OrgUser) => void;\r\n  onRemoveUser: (user: OrgUser) => void;\r\n}\r\n\r\nconst UsersTable: FC<Props> = props => {\r\n  const { users, onRoleChange, onRemoveUser } = props;\r\n\r\n  return (\r\n    <table className=\"filter-table form-inline\">\r\n      <thead>\r\n        <tr>\r\n          <th />\r\n          <th>Login</th>\r\n          <th>Email</th>\r\n          <th>Name</th>\r\n          <th>Seen</th>\r\n          <th>Role</th>\r\n          <th style={{ width: '34px' }} />\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {users.map((user, index) => {\r\n          return (\r\n            <tr key={`${user.userId}-${index}`}>\r\n              <td className=\"width-4 text-center\">\r\n                <img className=\"filter-table__avatar\" src={user.avatarUrl} />\r\n              </td>\r\n              <td>{user.login}</td>\r\n              <td>\r\n                <span className=\"ellipsis\">{user.email}</span>\r\n              </td>\r\n              <td>{user.name}</td>\r\n              <td>{user.lastSeenAtAge}</td>\r\n              <td>\r\n                <div className=\"gf-form-select-wrapper width-12\">\r\n                  <select\r\n                    value={user.role}\r\n                    className=\"gf-form-input\"\r\n                    onChange={event => onRoleChange(event.target.value, user)}\r\n                  >\r\n                    {['Viewer', 'Editor', 'Admin'].map((option, index) => {\r\n                      return (\r\n                        <option value={option} key={`${option}-${index}`}>\r\n                          {option}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </select>\r\n                </div>\r\n              </td>\r\n              <td>\r\n                <div onClick={() => onRemoveUser(user)} className=\"btn btn-danger btn-small\">\r\n                  <i className=\"fa fa-remove\" />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default UsersTable;\r\n","import { ThunkResult } from '../../../types';\r\nimport { getBackendSrv } from '@grafana/runtime';\r\nimport { OrgUser } from 'app/types';\r\nimport { inviteesLoaded, usersLoaded } from './reducers';\r\n\r\nexport function loadUsers(): ThunkResult<void> {\r\n  return async dispatch => {\r\n    const users = await getBackendSrv().get('/api/org/users');\r\n    dispatch(usersLoaded(users));\r\n  };\r\n}\r\n\r\nexport function loadInvitees(): ThunkResult<void> {\r\n  return async dispatch => {\r\n    const invitees = await getBackendSrv().get('/api/org/invites');\r\n    dispatch(inviteesLoaded(invitees));\r\n  };\r\n}\r\n\r\nexport function updateUser(user: OrgUser): ThunkResult<void> {\r\n  return async dispatch => {\r\n    await getBackendSrv().patch(`/api/org/users/${user.userId}`, { role: user.role });\r\n    dispatch(loadUsers());\r\n  };\r\n}\r\n\r\nexport function removeUser(userId: number): ThunkResult<void> {\r\n  return async dispatch => {\r\n    await getBackendSrv().delete(`/api/org/users/${userId}`);\r\n    dispatch(loadUsers());\r\n  };\r\n}\r\n\r\nexport function revokeInvite(code: string): ThunkResult<void> {\r\n  return async dispatch => {\r\n    await getBackendSrv().patch(`/api/org/invites/${code}/revoke`, {});\r\n    dispatch(loadInvitees());\r\n  };\r\n}\r\n","import { UsersState } from 'app/types';\r\n\r\nexport const getUsers = (state: UsersState) => {\r\n  const regex = new RegExp(state.searchQuery, 'i');\r\n\r\n  return state.users.filter(user => {\r\n    return regex.test(user.login) || regex.test(user.email) || regex.test(user.name);\r\n  });\r\n};\r\n\r\nexport const getInvitees = (state: UsersState) => {\r\n  const regex = new RegExp(state.searchQuery, 'i');\r\n\r\n  return state.invitees.filter(invitee => {\r\n    return regex.test(invitee.name) || regex.test(invitee.email);\r\n  });\r\n};\r\n\r\nexport const getInviteesCount = (state: UsersState) => state.invitees.length;\r\nexport const getUsersSearchQuery = (state: UsersState) => state.searchQuery;\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAEA;AAQA;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AAEA;AAOA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AA4BA;AA1BA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxDA;AAEA;AAMA;AAAA;AAAA;;AAsBA;AArBA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAIA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AAaA;AAAA;AAAA;;AA4DA;AA3DA;AACA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAOA;AAEA;AAGA;;AACA;AACA;AAGA;AACA;AAEA;AAGA;AAQA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9FA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAoBA;AAAA;AAGA;AAAA;AAyBA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA5CA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;AACA;AAAA;;;;AACA;AAEA;;;;AACA;AAAA;;;;AACA;AA0BA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAOA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAKA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AC7IA;AAAA;AAAA;AAAA;AASA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAKA;AAIA;AACA;AACA;AAKA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AAEA;AAEA;AAAA;AACA;;;;AACA;;AAAA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;;AACA;;AAAA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;AACA;;AAAA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;AACA;;AAAA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;AACA;;AAAA;AACA;;;;AACA;AACA;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;;;A","sourceRoot":""}