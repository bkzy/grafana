{"version":3,"file":"azureMonitorPlugin.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/core/utils/CancelablePromise.ts","webpack:///webpack:///./public/app/features/explore/slate-plugins/prism/index.tsx","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/annotations_query_ctrl.ts","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/app_insights/app_insights_datasource.ts","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/app_insights/response_parser.ts","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/azure_log_analytics_datasource.ts","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/response_parser.ts","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/azure_monitor_datasource.ts","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/response_parser.ts","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/supported_namespaces.ts","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/url_builder.ts","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AnalyticsConfig.tsx","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AzureCredentialsForm.tsx","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ConfigEditor.tsx","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/InsightsConfig.tsx","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MonitorConfig.tsx","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/datasource.ts","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/KustoQueryField.tsx","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/editor_component.tsx","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/kusto/kusto.ts","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/query_field.tsx","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/typeahead.tsx","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/log_analytics/querystring_builder.ts","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/module.tsx","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/query_ctrl.ts","webpack:///webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/time_grain_converter.ts"],"sourcesContent":["// https://github.com/facebook/react/issues/5465\r\n\r\nexport interface CancelablePromise<T> {\r\n  promise: Promise<T>;\r\n  cancel: () => void;\r\n}\r\n\r\nexport const makePromiseCancelable = <T>(promise: Promise<T>): CancelablePromise<T> => {\r\n  let hasCanceled_ = false;\r\n\r\n  const wrappedPromise = new Promise<T>((resolve, reject) => {\r\n    promise.then(val => (hasCanceled_ ? reject({ isCanceled: true }) : resolve(val)));\r\n    promise.catch(error => (hasCanceled_ ? reject({ isCanceled: true }) : reject(error)));\r\n  });\r\n\r\n  return {\r\n    promise: wrappedPromise,\r\n    cancel() {\r\n      hasCanceled_ = true;\r\n    },\r\n  };\r\n};\r\n","import React from 'react';\r\nimport Prism from 'prismjs';\r\nimport { Decoration } from 'slate';\r\nimport { Editor } from '@grafana/slate-react';\r\n\r\nconst TOKEN_MARK = 'prism-token';\r\n\r\nexport function setPrismTokens(language: string, field: string | number, values: any, alias = 'variable') {\r\n  Prism.languages[language][field] = {\r\n    alias,\r\n    pattern: new RegExp(`(?:^|\\\\s)(${values.join('|')})(?:$|\\\\s)`),\r\n  };\r\n}\r\n\r\n/**\r\n * Code-highlighting plugin based on Prism and\r\n * https://github.com/ianstormtaylor/slate/blob/master/examples/code-highlighting/index.js\r\n *\r\n * (Adapted to handle nested grammar definitions.)\r\n */\r\n\r\nexport default function PrismPlugin({ definition, language }: { definition: any; language: string }) {\r\n  if (definition) {\r\n    // Don't override exising modified definitions\r\n    Prism.languages[language] = Prism.languages[language] || definition;\r\n  }\r\n\r\n  return {\r\n    /**\r\n     * Render a Slate mark with appropiate CSS class names\r\n     *\r\n     * @param {Object} props\r\n     * @return {Element}\r\n     */\r\n\r\n    renderDecoration(props: any, editor: Editor, next: () => any): JSX.Element {\r\n      const { children, decoration } = props;\r\n      // Only apply spans to marks identified by this plugin\r\n      if (decoration.type !== TOKEN_MARK) {\r\n        return next();\r\n      }\r\n      const className = `token ${decoration.data.get('types')}`;\r\n      return <span className={className}>{children}</span>;\r\n    },\r\n\r\n    /**\r\n     * Decorate code blocks with Prism.js highlighting.\r\n     *\r\n     * @param {Node} node\r\n     * @return {Array}\r\n     */\r\n\r\n    decorateNode(node: any, editor: Editor, next: () => any): any[] {\r\n      if (node.type !== 'paragraph') {\r\n        return [];\r\n      }\r\n\r\n      const texts = node.getTexts().toArray();\r\n      const tstring = texts.map((t: { text: any }) => t.text).join('\\n');\r\n      const grammar = Prism.languages[language];\r\n      const tokens = Prism.tokenize(tstring, grammar);\r\n      const decorations: Decoration[] = [];\r\n      let startText = texts.shift();\r\n      let endText = startText;\r\n      let startOffset = 0;\r\n      let endOffset = 0;\r\n      let start = 0;\r\n\r\n      function processToken(token: any, acc?: string) {\r\n        // Accumulate token types down the tree\r\n        const types = `${acc || ''} ${token.type || ''} ${token.alias || ''}`;\r\n\r\n        // Add mark for token node\r\n        if (typeof token === 'string' || typeof token.content === 'string') {\r\n          startText = endText;\r\n          startOffset = endOffset;\r\n\r\n          const content = typeof token === 'string' ? token : token.content;\r\n          const newlines = content.split('\\n').length - 1;\r\n          const length = content.length - newlines;\r\n          const end = start + length;\r\n\r\n          let available = startText.text.length - startOffset;\r\n          let remaining = length;\r\n\r\n          endOffset = startOffset + remaining;\r\n\r\n          while (available < remaining) {\r\n            endText = texts.shift();\r\n            remaining = length - available;\r\n            available = endText.text.length;\r\n            endOffset = remaining;\r\n          }\r\n\r\n          // Inject marks from up the tree (acc) as well\r\n          if (typeof token !== 'string' || acc) {\r\n            const range = node.createDecoration({\r\n              anchor: {\r\n                key: startText.key,\r\n                offset: startOffset,\r\n              },\r\n              focus: {\r\n                key: endText.key,\r\n                offset: endOffset,\r\n              },\r\n              type: TOKEN_MARK,\r\n              data: { types },\r\n            });\r\n\r\n            decorations.push(range);\r\n          }\r\n\r\n          start = end;\r\n        } else if (token.content && token.content.length) {\r\n          // Tokens can be nested\r\n          for (const subToken of token.content) {\r\n            processToken(subToken, types);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Process top-level tokens\r\n      for (const token of tokens) {\r\n        processToken(token);\r\n      }\r\n\r\n      return decorations;\r\n    },\r\n  };\r\n}\r\n","import { TemplateSrv } from 'app/features/templating/template_srv';\r\n\r\nexport class AzureMonitorAnnotationsQueryCtrl {\r\n  static templateUrl = 'partials/annotations.editor.html';\r\n  datasource: any;\r\n  annotation: any;\r\n  workspaces: any[];\r\n  subscriptions: Array<{ text: string; value: string }>;\r\n\r\n  defaultQuery =\r\n    '<your table>\\n| where $__timeFilter() \\n| project TimeGenerated, Text=YourTitleColumn, Tags=\"tag1,tag2\"';\r\n\r\n  /** @ngInject */\r\n  constructor(private templateSrv: TemplateSrv) {\r\n    this.annotation.queryType = this.annotation.queryType || 'Azure Log Analytics';\r\n    this.annotation.rawQuery = this.annotation.rawQuery || this.defaultQuery;\r\n    this.initDropdowns();\r\n  }\r\n\r\n  async initDropdowns() {\r\n    await this.getSubscriptions();\r\n    await this.getWorkspaces();\r\n  }\r\n\r\n  async getSubscriptions() {\r\n    if (!this.datasource.azureMonitorDatasource.isConfigured()) {\r\n      return;\r\n    }\r\n\r\n    return this.datasource.azureMonitorDatasource.getSubscriptions().then((subs: any[]) => {\r\n      this.subscriptions = subs;\r\n\r\n      if (!this.annotation.subscription && this.annotation.queryType === 'Azure Log Analytics') {\r\n        this.annotation.subscription = this.datasource.azureLogAnalyticsDatasource.subscriptionId;\r\n      }\r\n\r\n      if (!this.annotation.subscription && this.subscriptions.length > 0) {\r\n        this.annotation.subscription = this.subscriptions[0].value;\r\n      }\r\n    });\r\n  }\r\n\r\n  async getWorkspaces(bustCache?: boolean) {\r\n    if (!bustCache && this.workspaces && this.workspaces.length > 0) {\r\n      return this.workspaces;\r\n    }\r\n\r\n    return this.datasource\r\n      .getAzureLogAnalyticsWorkspaces(this.annotation.subscription)\r\n      .then((list: any[]) => {\r\n        this.workspaces = list;\r\n        if (list.length > 0 && !this.annotation.workspace) {\r\n          this.annotation.workspace = list[0].value;\r\n        }\r\n        return this.workspaces;\r\n      })\r\n      .catch(() => {});\r\n  }\r\n\r\n  getAzureLogAnalyticsSchema = () => {\r\n    return this.getWorkspaces()\r\n      .then(() => {\r\n        return this.datasource.azureLogAnalyticsDatasource.getSchema(this.annotation.workspace);\r\n      })\r\n      .catch(() => {});\r\n  };\r\n\r\n  onSubscriptionChange = () => {\r\n    this.getWorkspaces(true);\r\n  };\r\n\r\n  onLogAnalyticsQueryChange = (nextQuery: string) => {\r\n    this.annotation.rawQuery = nextQuery;\r\n  };\r\n\r\n  get templateVariables() {\r\n    return this.templateSrv.variables.map((t: any) => '$' + t.name);\r\n  }\r\n}\r\n","import { TimeSeries, toDataFrame } from '@grafana/data';\r\nimport { DataQueryRequest, DataQueryResponseData, DataSourceInstanceSettings } from '@grafana/data';\r\nimport { BackendSrv } from 'app/core/services/backend_srv';\r\nimport { TemplateSrv } from 'app/features/templating/template_srv';\r\nimport _ from 'lodash';\r\n\r\nimport TimegrainConverter from '../time_grain_converter';\r\nimport { AzureDataSourceJsonData, AzureMonitorQuery } from '../types';\r\nimport ResponseParser from './response_parser';\r\n\r\nexport interface LogAnalyticsColumn {\r\n  text: string;\r\n  value: string;\r\n}\r\nexport default class AppInsightsDatasource {\r\n  id: number;\r\n  url: string;\r\n  baseUrl: string;\r\n  version = 'beta';\r\n  applicationId: string;\r\n  logAnalyticsColumns: { [key: string]: LogAnalyticsColumn[] } = {};\r\n\r\n  /** @ngInject */\r\n  constructor(\r\n    instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\r\n    private backendSrv: BackendSrv,\r\n    private templateSrv: TemplateSrv\r\n  ) {\r\n    this.id = instanceSettings.id;\r\n    this.applicationId = instanceSettings.jsonData.appInsightsAppId;\r\n    this.baseUrl = `/appinsights/${this.version}/apps/${this.applicationId}`;\r\n    this.url = instanceSettings.url;\r\n  }\r\n\r\n  isConfigured(): boolean {\r\n    return !!this.applicationId && this.applicationId.length > 0;\r\n  }\r\n\r\n  createRawQueryRequest(item: any, options: DataQueryRequest<AzureMonitorQuery>, target: AzureMonitorQuery) {\r\n    if (item.xaxis && !item.timeColumn) {\r\n      item.timeColumn = item.xaxis;\r\n    }\r\n\r\n    if (item.yaxis && !item.valueColumn) {\r\n      item.valueColumn = item.yaxis;\r\n    }\r\n\r\n    if (item.spliton && !item.segmentColumn) {\r\n      item.segmentColumn = item.spliton;\r\n    }\r\n\r\n    return {\r\n      type: 'timeSeriesQuery',\r\n      raw: false,\r\n      appInsights: {\r\n        rawQuery: true,\r\n        rawQueryString: this.templateSrv.replace(item.rawQueryString, options.scopedVars),\r\n        timeColumn: item.timeColumn,\r\n        valueColumn: item.valueColumn,\r\n        segmentColumn: item.segmentColumn,\r\n      },\r\n    };\r\n  }\r\n\r\n  createMetricsRequest(item: any, options: DataQueryRequest<AzureMonitorQuery>, target: AzureMonitorQuery) {\r\n    // fix for timeGrainUnit which is a deprecated/removed field name\r\n    if (item.timeGrainCount) {\r\n      item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrainCount, item.timeGrainUnit);\r\n    } else if (item.timeGrainUnit && item.timeGrain !== 'auto') {\r\n      item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\r\n    }\r\n\r\n    // migration for non-standard names\r\n    if (item.groupBy && !item.dimension) {\r\n      item.dimension = item.groupBy;\r\n    }\r\n\r\n    if (item.filter && !item.dimensionFilter) {\r\n      item.dimensionFilter = item.filter;\r\n    }\r\n\r\n    return {\r\n      type: 'timeSeriesQuery',\r\n      raw: false,\r\n      appInsights: {\r\n        rawQuery: false,\r\n        timeGrain: this.templateSrv.replace((item.timeGrain || '').toString(), options.scopedVars),\r\n        allowedTimeGrainsMs: item.allowedTimeGrainsMs,\r\n        metricName: this.templateSrv.replace(item.metricName, options.scopedVars),\r\n        aggregation: this.templateSrv.replace(item.aggregation, options.scopedVars),\r\n        dimension: this.templateSrv.replace(item.dimension, options.scopedVars),\r\n        dimensionFilter: this.templateSrv.replace(item.dimensionFilter, options.scopedVars),\r\n        alias: item.alias,\r\n        format: target.format,\r\n      },\r\n    };\r\n  }\r\n\r\n  async query(options: DataQueryRequest<AzureMonitorQuery>): Promise<DataQueryResponseData[]> {\r\n    const queries = _.filter(options.targets, item => {\r\n      return item.hide !== true;\r\n    }).map((target: AzureMonitorQuery) => {\r\n      const item = target.appInsights;\r\n      let query: any;\r\n      if (item.rawQuery) {\r\n        query = this.createRawQueryRequest(item, options, target);\r\n      } else {\r\n        query = this.createMetricsRequest(item, options, target);\r\n      }\r\n      query.refId = target.refId;\r\n      query.intervalMs = options.intervalMs;\r\n      query.datasourceId = this.id;\r\n      query.queryType = 'Application Insights';\r\n      return query;\r\n    });\r\n\r\n    if (!queries || queries.length === 0) {\r\n      // @ts-ignore\r\n      return;\r\n    }\r\n\r\n    const { data } = await this.backendSrv.datasourceRequest({\r\n      url: '/api/tsdb/query',\r\n      method: 'POST',\r\n      data: {\r\n        from: options.range.from.valueOf().toString(),\r\n        to: options.range.to.valueOf().toString(),\r\n        queries,\r\n      },\r\n    });\r\n\r\n    const result: DataQueryResponseData[] = [];\r\n    if (data.results) {\r\n      Object.values(data.results).forEach((queryRes: any) => {\r\n        if (queryRes.meta && queryRes.meta.columns) {\r\n          const columnNames = queryRes.meta.columns as string[];\r\n          this.logAnalyticsColumns[queryRes.refId] = _.map(columnNames, n => ({ text: n, value: n }));\r\n        }\r\n\r\n        if (!queryRes.series) {\r\n          return;\r\n        }\r\n\r\n        queryRes.series.forEach((series: any) => {\r\n          const timeSerie: TimeSeries = {\r\n            target: series.name,\r\n            datapoints: series.points,\r\n            refId: queryRes.refId,\r\n            meta: queryRes.meta,\r\n          };\r\n          result.push(toDataFrame(timeSerie));\r\n        });\r\n      });\r\n      return result;\r\n    }\r\n\r\n    return Promise.resolve([]);\r\n  }\r\n\r\n  doQueries(queries: any) {\r\n    return _.map(queries, query => {\r\n      return this.doRequest(query.url)\r\n        .then((result: any) => {\r\n          return {\r\n            result: result,\r\n            query: query,\r\n          };\r\n        })\r\n        .catch((err: any) => {\r\n          throw {\r\n            error: err,\r\n            query: query,\r\n          };\r\n        });\r\n    });\r\n  }\r\n\r\n  annotationQuery(options: any) {}\r\n\r\n  metricFindQuery(query: string) {\r\n    const appInsightsMetricNameQuery = query.match(/^AppInsightsMetricNames\\(\\)/i);\r\n    if (appInsightsMetricNameQuery) {\r\n      return this.getMetricNames();\r\n    }\r\n\r\n    const appInsightsGroupByQuery = query.match(/^AppInsightsGroupBys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\r\n    if (appInsightsGroupByQuery) {\r\n      const metricName = appInsightsGroupByQuery[1];\r\n      return this.getGroupBys(this.templateSrv.replace(metricName));\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  testDatasource() {\r\n    const url = `${this.baseUrl}/metrics/metadata`;\r\n    return this.doRequest(url)\r\n      .then((response: any) => {\r\n        if (response.status === 200) {\r\n          return {\r\n            status: 'success',\r\n            message: 'Successfully queried the Application Insights service.',\r\n            title: 'Success',\r\n          };\r\n        }\r\n\r\n        return {\r\n          status: 'error',\r\n          message: 'Returned http status code ' + response.status,\r\n        };\r\n      })\r\n      .catch((error: any) => {\r\n        let message = 'Application Insights: ';\r\n        message += error.statusText ? error.statusText + ': ' : '';\r\n\r\n        if (error.data && error.data.error && error.data.error.code === 'PathNotFoundError') {\r\n          message += 'Invalid Application Id for Application Insights service.';\r\n        } else if (error.data && error.data.error) {\r\n          message += error.data.error.code + '. ' + error.data.error.message;\r\n        } else {\r\n          message += 'Cannot connect to Application Insights REST API.';\r\n        }\r\n\r\n        return {\r\n          status: 'error',\r\n          message: message,\r\n        };\r\n      });\r\n  }\r\n\r\n  doRequest(url: any, maxRetries = 1) {\r\n    return this.backendSrv\r\n      .datasourceRequest({\r\n        url: this.url + url,\r\n        method: 'GET',\r\n      })\r\n      .catch((error: any) => {\r\n        if (maxRetries > 0) {\r\n          return this.doRequest(url, maxRetries - 1);\r\n        }\r\n\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  getMetricNames() {\r\n    const url = `${this.baseUrl}/metrics/metadata`;\r\n    return this.doRequest(url).then(ResponseParser.parseMetricNames);\r\n  }\r\n\r\n  getMetricMetadata(metricName: string) {\r\n    const url = `${this.baseUrl}/metrics/metadata`;\r\n    return this.doRequest(url).then((result: any) => {\r\n      return new ResponseParser(result).parseMetadata(metricName);\r\n    });\r\n  }\r\n\r\n  getGroupBys(metricName: string) {\r\n    return this.getMetricMetadata(metricName).then((result: any) => {\r\n      return new ResponseParser(result).parseGroupBys();\r\n    });\r\n  }\r\n\r\n  getQuerySchema() {\r\n    const url = `${this.baseUrl}/query/schema`;\r\n    return this.doRequest(url).then((result: any) => {\r\n      const schema = new ResponseParser(result).parseQuerySchema();\r\n      // console.log(schema);\r\n      return schema;\r\n    });\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport { dateTime } from '@grafana/data';\r\n\r\nexport default class ResponseParser {\r\n  constructor(private results: any) {}\r\n\r\n  parseQueryResult() {\r\n    let data: any = [];\r\n    let columns: any = [];\r\n    for (let i = 0; i < this.results.length; i++) {\r\n      if (this.results[i].query.raw) {\r\n        const xaxis = this.results[i].query.xaxis;\r\n        const yaxises = this.results[i].query.yaxis;\r\n        const spliton = this.results[i].query.spliton;\r\n        columns = this.results[i].result.data.Tables[0].Columns;\r\n        const rows = this.results[i].result.data.Tables[0].Rows;\r\n        data = _.concat(\r\n          data,\r\n          this.parseRawQueryResultRow(this.results[i].query, columns, rows, xaxis, yaxises, spliton)\r\n        );\r\n      } else {\r\n        const value = this.results[i].result.data.value;\r\n        const alias = this.results[i].query.alias;\r\n        data = _.concat(data, this.parseQueryResultRow(this.results[i].query, value, alias));\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  parseRawQueryResultRow(query: any, columns: any, rows: any, xaxis: string, yaxises: string, spliton: string) {\r\n    const data: any[] = [];\r\n    const columnsForDropdown = _.map(columns, column => ({ text: column.ColumnName, value: column.ColumnName }));\r\n\r\n    const xaxisColumn = columns.findIndex((column: any) => column.ColumnName === xaxis);\r\n    const yaxisesSplit = yaxises.split(',');\r\n    const yaxisColumns: any = {};\r\n    _.forEach(yaxisesSplit, yaxis => {\r\n      yaxisColumns[yaxis] = columns.findIndex((column: any) => column.ColumnName === yaxis);\r\n    });\r\n    const splitonColumn = columns.findIndex((column: any) => column.ColumnName === spliton);\r\n    const convertTimestamp = xaxis === 'timestamp';\r\n\r\n    _.forEach(rows, row => {\r\n      _.forEach(yaxisColumns, (yaxisColumn, yaxisName) => {\r\n        const bucket =\r\n          splitonColumn === -1\r\n            ? ResponseParser.findOrCreateBucket(data, yaxisName)\r\n            : ResponseParser.findOrCreateBucket(data, row[splitonColumn]);\r\n        const epoch = convertTimestamp ? ResponseParser.dateTimeToEpoch(row[xaxisColumn]) : row[xaxisColumn];\r\n        bucket.datapoints.push([row[yaxisColumn], epoch]);\r\n        bucket.refId = query.refId;\r\n        bucket.query = query.query;\r\n        bucket.columnsForDropdown = columnsForDropdown;\r\n      });\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  parseQueryResultRow(query: any, value: any, alias: string) {\r\n    const data: any[] = [];\r\n\r\n    if (ResponseParser.isSingleValue(value)) {\r\n      const metricName = ResponseParser.getMetricFieldKey(value);\r\n      const aggField = ResponseParser.getKeyForAggregationField(value[metricName]);\r\n      const epoch = ResponseParser.dateTimeToEpoch(value.end);\r\n      data.push({\r\n        target: metricName,\r\n        datapoints: [[value[metricName][aggField], epoch]],\r\n        refId: query.refId,\r\n        query: query.query,\r\n      });\r\n      return data;\r\n    }\r\n\r\n    const groupedBy = ResponseParser.hasSegmentsField(value.segments[0]);\r\n    if (!groupedBy) {\r\n      const metricName = ResponseParser.getMetricFieldKey(value.segments[0]);\r\n      const dataTarget = ResponseParser.findOrCreateBucket(data, metricName);\r\n\r\n      for (let i = 0; i < value.segments.length; i++) {\r\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\r\n        const aggField: string = ResponseParser.getKeyForAggregationField(value.segments[i][metricName]);\r\n\r\n        dataTarget.datapoints.push([value.segments[i][metricName][aggField], epoch]);\r\n      }\r\n      dataTarget.refId = query.refId;\r\n      dataTarget.query = query.query;\r\n    } else {\r\n      for (let i = 0; i < value.segments.length; i++) {\r\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\r\n\r\n        for (let j = 0; j < value.segments[i].segments.length; j++) {\r\n          const metricName = ResponseParser.getMetricFieldKey(value.segments[i].segments[j]);\r\n          const aggField = ResponseParser.getKeyForAggregationField(value.segments[i].segments[j][metricName]);\r\n          const target = this.getTargetName(value.segments[i].segments[j], alias);\r\n\r\n          const bucket = ResponseParser.findOrCreateBucket(data, target);\r\n          bucket.datapoints.push([value.segments[i].segments[j][metricName][aggField], epoch]);\r\n          bucket.refId = query.refId;\r\n          bucket.meta = {\r\n            query: query.query,\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  getTargetName(segment: { [x: string]: string }, alias: string) {\r\n    let metric = '';\r\n    let segmentName = '';\r\n    let segmentValue = '';\r\n    for (const prop in segment) {\r\n      if (_.isObject(segment[prop])) {\r\n        metric = prop;\r\n      } else {\r\n        segmentName = prop;\r\n        segmentValue = segment[prop];\r\n      }\r\n    }\r\n\r\n    if (alias) {\r\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\r\n      return alias.replace(regex, (match, g1, g2) => {\r\n        const group = g1 || g2;\r\n\r\n        if (group === 'metric') {\r\n          return metric;\r\n        } else if (group === 'groupbyname') {\r\n          return segmentName;\r\n        } else if (group === 'groupbyvalue') {\r\n          return segmentValue;\r\n        }\r\n\r\n        return match;\r\n      });\r\n    }\r\n\r\n    return metric + `{${segmentName}=\"${segmentValue}\"}`;\r\n  }\r\n\r\n  static isSingleValue(value: any) {\r\n    return !ResponseParser.hasSegmentsField(value);\r\n  }\r\n\r\n  static findOrCreateBucket(data: any[], target: string) {\r\n    let dataTarget: any = _.find(data, ['target', target]);\r\n    if (!dataTarget) {\r\n      dataTarget = { target: target, datapoints: [] };\r\n      data.push(dataTarget);\r\n    }\r\n\r\n    return dataTarget;\r\n  }\r\n\r\n  static hasSegmentsField(obj: any) {\r\n    const keys = _.keys(obj);\r\n    return _.indexOf(keys, 'segments') > -1;\r\n  }\r\n\r\n  static getMetricFieldKey(segment: { [x: string]: any }) {\r\n    const keys = _.keys(segment);\r\n\r\n    return _.filter(_.without(keys, 'start', 'end'), key => {\r\n      return _.isObject(segment[key]);\r\n    })[0];\r\n  }\r\n\r\n  static getKeyForAggregationField(dataObj: any): string {\r\n    const keys = _.keys(dataObj);\r\n    return _.intersection(keys, ['sum', 'avg', 'min', 'max', 'count', 'unique'])[0];\r\n  }\r\n\r\n  static dateTimeToEpoch(dateTimeValue: any) {\r\n    return dateTime(dateTimeValue).valueOf();\r\n  }\r\n\r\n  static parseMetricNames(result: { data: { metrics: any } }) {\r\n    const keys = _.keys(result.data.metrics);\r\n\r\n    return ResponseParser.toTextValueList(keys);\r\n  }\r\n\r\n  parseMetadata(metricName: string) {\r\n    const metric = this.results.data.metrics[metricName];\r\n\r\n    if (!metric) {\r\n      throw Error('No data found for metric: ' + metricName);\r\n    }\r\n\r\n    return {\r\n      primaryAggType: metric.defaultAggregation,\r\n      supportedAggTypes: metric.supportedAggregations,\r\n      supportedGroupBy: metric.supportedGroupBy.all,\r\n    };\r\n  }\r\n\r\n  parseGroupBys() {\r\n    return ResponseParser.toTextValueList(this.results.supportedGroupBy);\r\n  }\r\n\r\n  parseQuerySchema() {\r\n    const result: any = {\r\n      Type: 'AppInsights',\r\n      Tables: {},\r\n    };\r\n    if (this.results && this.results.data && this.results.data.Tables) {\r\n      for (let i = 0; i < this.results.data.Tables[0].Rows.length; i++) {\r\n        const column = this.results.data.Tables[0].Rows[i];\r\n        const columnTable = column[0];\r\n        const columnName = column[1];\r\n        const columnType = column[2];\r\n        if (result.Tables[columnTable]) {\r\n          result.Tables[columnTable].OrderedColumns.push({ Name: columnName, Type: columnType });\r\n        } else {\r\n          result.Tables[columnTable] = {\r\n            Name: columnTable,\r\n            OrderedColumns: [{ Name: columnName, Type: columnType }],\r\n          };\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  static toTextValueList(values: any) {\r\n    const list: any[] = [];\r\n    for (let i = 0; i < values.length; i++) {\r\n      list.push({\r\n        text: values[i],\r\n        value: values[i],\r\n      });\r\n    }\r\n    return list;\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport LogAnalyticsQuerystringBuilder from '../log_analytics/querystring_builder';\r\nimport ResponseParser from './response_parser';\r\nimport { AzureMonitorQuery, AzureDataSourceJsonData } from '../types';\r\nimport { DataQueryRequest, DataSourceInstanceSettings } from '@grafana/data';\r\nimport { BackendSrv } from 'app/core/services/backend_srv';\r\nimport { TemplateSrv } from 'app/features/templating/template_srv';\r\n\r\nexport default class AzureLogAnalyticsDatasource {\r\n  id: number;\r\n  url: string;\r\n  baseUrl: string;\r\n  applicationId: string;\r\n  azureMonitorUrl: string;\r\n  defaultOrFirstWorkspace: string;\r\n  subscriptionId: string;\r\n\r\n  /** @ngInject */\r\n  constructor(\r\n    private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\r\n    private backendSrv: BackendSrv,\r\n    private templateSrv: TemplateSrv\r\n  ) {\r\n    this.id = instanceSettings.id;\r\n    this.baseUrl = '/loganalyticsazure';\r\n    this.url = instanceSettings.url;\r\n    this.defaultOrFirstWorkspace = this.instanceSettings.jsonData.logAnalyticsDefaultWorkspace;\r\n\r\n    this.setWorkspaceUrl();\r\n  }\r\n\r\n  isConfigured(): boolean {\r\n    return (\r\n      (!!this.instanceSettings.jsonData.logAnalyticsSubscriptionId &&\r\n        this.instanceSettings.jsonData.logAnalyticsSubscriptionId.length > 0) ||\r\n      !!this.instanceSettings.jsonData.azureLogAnalyticsSameAs\r\n    );\r\n  }\r\n\r\n  setWorkspaceUrl() {\r\n    if (!!this.instanceSettings.jsonData.subscriptionId || !!this.instanceSettings.jsonData.azureLogAnalyticsSameAs) {\r\n      this.subscriptionId = this.instanceSettings.jsonData.subscriptionId;\r\n      const azureCloud = this.instanceSettings.jsonData.cloudName || 'azuremonitor';\r\n      this.azureMonitorUrl = `/${azureCloud}/subscriptions`;\r\n    } else {\r\n      this.subscriptionId = this.instanceSettings.jsonData.logAnalyticsSubscriptionId;\r\n      this.azureMonitorUrl = `/workspacesloganalytics/subscriptions`;\r\n    }\r\n  }\r\n\r\n  getWorkspaces(subscription: string) {\r\n    const subscriptionId = this.templateSrv.replace(subscription || this.subscriptionId);\r\n\r\n    const workspaceListUrl =\r\n      this.azureMonitorUrl +\r\n      `/${subscriptionId}/providers/Microsoft.OperationalInsights/workspaces?api-version=2017-04-26-preview`;\r\n    return this.doRequest(workspaceListUrl).then((response: any) => {\r\n      return (\r\n        _.map(response.data.value, val => {\r\n          return { text: val.name, value: val.properties.customerId };\r\n        }) || []\r\n      );\r\n    });\r\n  }\r\n\r\n  getSchema(workspace: string) {\r\n    if (!workspace) {\r\n      return Promise.resolve();\r\n    }\r\n    const url = `${this.baseUrl}/${workspace}/metadata`;\r\n\r\n    return this.doRequest(url).then((response: any) => {\r\n      return new ResponseParser(response.data).parseSchemaResult();\r\n    });\r\n  }\r\n\r\n  async query(options: DataQueryRequest<AzureMonitorQuery>) {\r\n    const queries = _.filter(options.targets, item => {\r\n      return item.hide !== true;\r\n    }).map(target => {\r\n      const item = target.azureLogAnalytics;\r\n\r\n      const querystringBuilder = new LogAnalyticsQuerystringBuilder(\r\n        this.templateSrv.replace(item.query, options.scopedVars, this.interpolateVariable),\r\n        options,\r\n        'TimeGenerated'\r\n      );\r\n      const generated = querystringBuilder.generate();\r\n\r\n      let workspace = this.templateSrv.replace(item.workspace, options.scopedVars);\r\n\r\n      if (!workspace && this.defaultOrFirstWorkspace) {\r\n        workspace = this.defaultOrFirstWorkspace;\r\n      }\r\n\r\n      const url = `${this.baseUrl}/${workspace}/query?${generated.uriString}`;\r\n\r\n      return {\r\n        refId: target.refId,\r\n        intervalMs: options.intervalMs,\r\n        maxDataPoints: options.maxDataPoints,\r\n        datasourceId: this.id,\r\n        url: url,\r\n        query: generated.rawQuery,\r\n        format: target.format,\r\n        resultFormat: item.resultFormat,\r\n      };\r\n    });\r\n\r\n    if (!queries || queries.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const promises = this.doQueries(queries);\r\n\r\n    return Promise.all(promises).then(results => {\r\n      return new ResponseParser(results).parseQueryResult();\r\n    });\r\n  }\r\n\r\n  metricFindQuery(query: string) {\r\n    return this.getDefaultOrFirstWorkspace().then((workspace: any) => {\r\n      const queries: any[] = this.buildQuery(query, null, workspace);\r\n\r\n      const promises = this.doQueries(queries);\r\n\r\n      return Promise.all(promises)\r\n        .then(results => {\r\n          return new ResponseParser(results).parseToVariables();\r\n        })\r\n        .catch(err => {\r\n          if (\r\n            err.error &&\r\n            err.error.data &&\r\n            err.error.data.error &&\r\n            err.error.data.error.innererror &&\r\n            err.error.data.error.innererror.innererror\r\n          ) {\r\n            throw { message: err.error.data.error.innererror.innererror.message };\r\n          } else if (err.error && err.error.data && err.error.data.error) {\r\n            throw { message: err.error.data.error.message };\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  private buildQuery(query: string, options: any, workspace: any) {\r\n    const querystringBuilder = new LogAnalyticsQuerystringBuilder(\r\n      this.templateSrv.replace(query, {}, this.interpolateVariable),\r\n      options,\r\n      'TimeGenerated'\r\n    );\r\n    const querystring = querystringBuilder.generate().uriString;\r\n    const url = `${this.baseUrl}/${workspace}/query?${querystring}`;\r\n    const queries: any[] = [];\r\n    queries.push({\r\n      datasourceId: this.id,\r\n      url: url,\r\n      resultFormat: 'table',\r\n    });\r\n    return queries;\r\n  }\r\n\r\n  interpolateVariable(value: string, variable: { multi: any; includeAll: any }) {\r\n    if (typeof value === 'string') {\r\n      if (variable.multi || variable.includeAll) {\r\n        return \"'\" + value + \"'\";\r\n      } else {\r\n        return value;\r\n      }\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n      return value;\r\n    }\r\n\r\n    const quotedValues = _.map(value, val => {\r\n      if (typeof value === 'number') {\r\n        return value;\r\n      }\r\n\r\n      return \"'\" + val + \"'\";\r\n    });\r\n    return quotedValues.join(',');\r\n  }\r\n\r\n  getDefaultOrFirstWorkspace() {\r\n    if (this.defaultOrFirstWorkspace) {\r\n      return Promise.resolve(this.defaultOrFirstWorkspace);\r\n    }\r\n\r\n    return this.getWorkspaces(this.subscriptionId).then((workspaces: any[]) => {\r\n      this.defaultOrFirstWorkspace = workspaces[0].value;\r\n      return this.defaultOrFirstWorkspace;\r\n    });\r\n  }\r\n\r\n  annotationQuery(options: any) {\r\n    if (!options.annotation.rawQuery) {\r\n      return Promise.reject({\r\n        message: 'Query missing in annotation definition',\r\n      });\r\n    }\r\n\r\n    const queries: any[] = this.buildQuery(options.annotation.rawQuery, options, options.annotation.workspace);\r\n\r\n    const promises = this.doQueries(queries);\r\n\r\n    return Promise.all(promises).then(results => {\r\n      const annotations = new ResponseParser(results).transformToAnnotations(options);\r\n      return annotations;\r\n    });\r\n  }\r\n\r\n  doQueries(queries: any[]) {\r\n    return _.map(queries, query => {\r\n      return this.doRequest(query.url)\r\n        .then((result: any) => {\r\n          return {\r\n            result: result,\r\n            query: query,\r\n          };\r\n        })\r\n        .catch((err: any) => {\r\n          throw {\r\n            error: err,\r\n            query: query,\r\n          };\r\n        });\r\n    });\r\n  }\r\n\r\n  doRequest(url: string, maxRetries = 1) {\r\n    return this.backendSrv\r\n      .datasourceRequest({\r\n        url: this.url + url,\r\n        method: 'GET',\r\n      })\r\n      .catch((error: any) => {\r\n        if (maxRetries > 0) {\r\n          return this.doRequest(url, maxRetries - 1);\r\n        }\r\n\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  testDatasource() {\r\n    const validationError = this.isValidConfig();\r\n    if (validationError) {\r\n      return validationError;\r\n    }\r\n\r\n    return this.getDefaultOrFirstWorkspace()\r\n      .then((ws: any) => {\r\n        const url = `${this.baseUrl}/${ws}/metadata`;\r\n\r\n        return this.doRequest(url);\r\n      })\r\n      .then((response: any) => {\r\n        if (response.status === 200) {\r\n          return {\r\n            status: 'success',\r\n            message: 'Successfully queried the Azure Log Analytics service.',\r\n            title: 'Success',\r\n          };\r\n        }\r\n\r\n        return {\r\n          status: 'error',\r\n          message: 'Returned http status code ' + response.status,\r\n        };\r\n      })\r\n      .catch((error: any) => {\r\n        let message = 'Azure Log Analytics: ';\r\n        if (error.config && error.config.url && error.config.url.indexOf('workspacesloganalytics') > -1) {\r\n          message = 'Azure Log Analytics requires access to Azure Monitor but had the following error: ';\r\n        }\r\n\r\n        message = this.getErrorMessage(message, error);\r\n\r\n        return {\r\n          status: 'error',\r\n          message: message,\r\n        };\r\n      });\r\n  }\r\n\r\n  private getErrorMessage(message: string, error: any) {\r\n    message += error.statusText ? error.statusText + ': ' : '';\r\n    if (error.data && error.data.error && error.data.error.code) {\r\n      message += error.data.error.code + '. ' + error.data.error.message;\r\n    } else if (error.data && error.data.error) {\r\n      message += error.data.error;\r\n    } else if (error.data) {\r\n      message += error.data;\r\n    } else {\r\n      message += 'Cannot connect to Azure Log Analytics REST API.';\r\n    }\r\n    return message;\r\n  }\r\n\r\n  isValidConfig() {\r\n    if (this.instanceSettings.jsonData.azureLogAnalyticsSameAs) {\r\n      return undefined;\r\n    }\r\n\r\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.logAnalyticsSubscriptionId)) {\r\n      return {\r\n        status: 'error',\r\n        message: 'The Subscription Id field is required.',\r\n      };\r\n    }\r\n\r\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.logAnalyticsTenantId)) {\r\n      return {\r\n        status: 'error',\r\n        message: 'The Tenant Id field is required.',\r\n      };\r\n    }\r\n\r\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.logAnalyticsClientId)) {\r\n      return {\r\n        status: 'error',\r\n        message: 'The Client Id field is required.',\r\n      };\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  isValidConfigField(field: string) {\r\n    return field && field.length > 0;\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport { dateTime } from '@grafana/data';\r\nimport {\r\n  AzureLogsVariable,\r\n  AzureLogsTableData,\r\n  KustoDatabase,\r\n  KustoFunction,\r\n  KustoTable,\r\n  KustoSchema,\r\n  KustoColumn,\r\n} from '../types';\r\nimport { TimeSeries, AnnotationEvent } from '@grafana/data';\r\n\r\nexport default class ResponseParser {\r\n  columns: string[];\r\n  constructor(private results: any) {}\r\n\r\n  parseQueryResult(): any {\r\n    let data: any[] = [];\r\n    let columns: any[] = [];\r\n    for (let i = 0; i < this.results.length; i++) {\r\n      if (this.results[i].result.data.tables.length === 0) {\r\n        continue;\r\n      }\r\n      columns = this.results[i].result.data.tables[0].columns;\r\n      const rows = this.results[i].result.data.tables[0].rows;\r\n\r\n      if (this.results[i].query.resultFormat === 'time_series') {\r\n        data = _.concat(data, this.parseTimeSeriesResult(this.results[i].query, columns, rows));\r\n      } else {\r\n        data = _.concat(data, this.parseTableResult(this.results[i].query, columns, rows));\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  parseTimeSeriesResult(query: { refId: string; query: any }, columns: any[], rows: any): TimeSeries[] {\r\n    const data: TimeSeries[] = [];\r\n    let timeIndex = -1;\r\n    let metricIndex = -1;\r\n    let valueIndex = -1;\r\n\r\n    for (let i = 0; i < columns.length; i++) {\r\n      if (timeIndex === -1 && columns[i].type === 'datetime') {\r\n        timeIndex = i;\r\n      }\r\n\r\n      if (metricIndex === -1 && columns[i].type === 'string') {\r\n        metricIndex = i;\r\n      }\r\n\r\n      if (valueIndex === -1 && ['int', 'long', 'real', 'double'].indexOf(columns[i].type) > -1) {\r\n        valueIndex = i;\r\n      }\r\n    }\r\n\r\n    if (timeIndex === -1) {\r\n      throw new Error('No datetime column found in the result. The Time Series format requires a time column.');\r\n    }\r\n\r\n    _.forEach(rows, row => {\r\n      const epoch = ResponseParser.dateTimeToEpoch(row[timeIndex]);\r\n      const metricName = metricIndex > -1 ? row[metricIndex] : columns[valueIndex].name;\r\n      const bucket = ResponseParser.findOrCreateBucket(data, metricName);\r\n      bucket.datapoints.push([row[valueIndex], epoch]);\r\n      bucket.refId = query.refId;\r\n      bucket.meta = {\r\n        query: query.query,\r\n      };\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  parseTableResult(query: { refId: string; query: string }, columns: any[], rows: any[]): AzureLogsTableData {\r\n    const tableResult: AzureLogsTableData = {\r\n      type: 'table',\r\n      columns: _.map(columns, col => {\r\n        return { text: col.name, type: col.type };\r\n      }),\r\n      rows: rows,\r\n      refId: query.refId,\r\n      meta: {\r\n        query: query.query,\r\n      },\r\n    };\r\n\r\n    return tableResult;\r\n  }\r\n\r\n  parseToVariables(): AzureLogsVariable[] {\r\n    const queryResult = this.parseQueryResult();\r\n\r\n    const variables: AzureLogsVariable[] = [];\r\n    _.forEach(queryResult, result => {\r\n      _.forEach(_.flattenDeep(result.rows), row => {\r\n        variables.push({\r\n          text: row,\r\n          value: row,\r\n        } as AzureLogsVariable);\r\n      });\r\n    });\r\n\r\n    return variables;\r\n  }\r\n\r\n  transformToAnnotations(options: any) {\r\n    const queryResult = this.parseQueryResult();\r\n\r\n    const list: AnnotationEvent[] = [];\r\n\r\n    _.forEach(queryResult, result => {\r\n      let timeIndex = -1;\r\n      let textIndex = -1;\r\n      let tagsIndex = -1;\r\n\r\n      for (let i = 0; i < result.columns.length; i++) {\r\n        if (timeIndex === -1 && result.columns[i].type === 'datetime') {\r\n          timeIndex = i;\r\n        }\r\n\r\n        if (textIndex === -1 && result.columns[i].text.toLowerCase() === 'text') {\r\n          textIndex = i;\r\n        }\r\n\r\n        if (tagsIndex === -1 && result.columns[i].text.toLowerCase() === 'tags') {\r\n          tagsIndex = i;\r\n        }\r\n      }\r\n\r\n      _.forEach(result.rows, row => {\r\n        list.push({\r\n          annotation: options.annotation,\r\n          time: Math.floor(ResponseParser.dateTimeToEpoch(row[timeIndex])),\r\n          text: row[textIndex] ? row[textIndex].toString() : '',\r\n          tags: row[tagsIndex] ? row[tagsIndex].trim().split(/\\s*,\\s*/) : [],\r\n        });\r\n      });\r\n    });\r\n\r\n    return list;\r\n  }\r\n\r\n  parseSchemaResult(): KustoSchema {\r\n    return {\r\n      Plugins: [\r\n        {\r\n          Name: 'pivot',\r\n        },\r\n      ],\r\n      Databases: this.createSchemaDatabaseWithTables(),\r\n    };\r\n  }\r\n\r\n  createSchemaDatabaseWithTables(): { [key: string]: KustoDatabase } {\r\n    const databases = {\r\n      Default: {\r\n        Name: 'Default',\r\n        Tables: this.createSchemaTables(),\r\n        Functions: this.createSchemaFunctions(),\r\n      },\r\n    };\r\n\r\n    return databases;\r\n  }\r\n\r\n  createSchemaTables(): { [key: string]: KustoTable } {\r\n    const tables: { [key: string]: KustoTable } = {};\r\n\r\n    for (const table of this.results.tables) {\r\n      tables[table.name] = {\r\n        Name: table.name,\r\n        OrderedColumns: [],\r\n      };\r\n      for (const col of table.columns) {\r\n        tables[table.name].OrderedColumns.push(this.convertToKustoColumn(col));\r\n      }\r\n    }\r\n\r\n    return tables;\r\n  }\r\n\r\n  convertToKustoColumn(col: any): KustoColumn {\r\n    return {\r\n      Name: col.name,\r\n      Type: col.type,\r\n    };\r\n  }\r\n\r\n  createSchemaFunctions(): { [key: string]: KustoFunction } {\r\n    const functions: { [key: string]: KustoFunction } = {};\r\n\r\n    for (const func of this.results.functions) {\r\n      functions[func.name] = {\r\n        Name: func.name,\r\n        Body: func.body,\r\n        DocString: func.displayName,\r\n        Folder: func.category,\r\n        FunctionKind: 'Unknown',\r\n        InputParameters: [],\r\n        OutputColumns: [],\r\n      };\r\n    }\r\n\r\n    return functions;\r\n  }\r\n\r\n  static findOrCreateBucket(data: TimeSeries[], target: any): TimeSeries {\r\n    let dataTarget: any = _.find(data, ['target', target]);\r\n    if (!dataTarget) {\r\n      dataTarget = { target: target, datapoints: [], refId: '', query: '' };\r\n      data.push(dataTarget);\r\n    }\r\n\r\n    return dataTarget;\r\n  }\r\n\r\n  static dateTimeToEpoch(dateTimeValue: any) {\r\n    return dateTime(dateTimeValue).valueOf();\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport UrlBuilder from './url_builder';\r\nimport ResponseParser from './response_parser';\r\nimport SupportedNamespaces from './supported_namespaces';\r\nimport TimegrainConverter from '../time_grain_converter';\r\nimport {\r\n  AzureMonitorQuery,\r\n  AzureDataSourceJsonData,\r\n  AzureMonitorMetricDefinitionsResponse,\r\n  AzureMonitorResourceGroupsResponse,\r\n} from '../types';\r\nimport { DataQueryRequest, DataQueryResponseData, DataSourceInstanceSettings } from '@grafana/data';\r\n\r\nimport { TimeSeries, toDataFrame } from '@grafana/data';\r\nimport { BackendSrv } from 'app/core/services/backend_srv';\r\nimport { TemplateSrv } from 'app/features/templating/template_srv';\r\n\r\nexport default class AzureMonitorDatasource {\r\n  apiVersion = '2018-01-01';\r\n  apiPreviewVersion = '2017-12-01-preview';\r\n  id: number;\r\n  subscriptionId: string;\r\n  baseUrl: string;\r\n  resourceGroup: string;\r\n  resourceName: string;\r\n  url: string;\r\n  defaultDropdownValue = 'select';\r\n  cloudName: string;\r\n  supportedMetricNamespaces: string[] = [];\r\n\r\n  /** @ngInject */\r\n  constructor(\r\n    private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\r\n    private backendSrv: BackendSrv,\r\n    private templateSrv: TemplateSrv\r\n  ) {\r\n    this.id = instanceSettings.id;\r\n    this.subscriptionId = instanceSettings.jsonData.subscriptionId;\r\n    this.cloudName = instanceSettings.jsonData.cloudName || 'azuremonitor';\r\n    this.baseUrl = `/${this.cloudName}/subscriptions`;\r\n    this.url = instanceSettings.url;\r\n\r\n    this.supportedMetricNamespaces = new SupportedNamespaces(this.cloudName).get();\r\n  }\r\n\r\n  isConfigured(): boolean {\r\n    return !!this.subscriptionId && this.subscriptionId.length > 0;\r\n  }\r\n\r\n  async query(options: DataQueryRequest<AzureMonitorQuery>): Promise<DataQueryResponseData[]> {\r\n    const queries = _.filter(options.targets, item => {\r\n      return (\r\n        item.hide !== true &&\r\n        item.azureMonitor.resourceGroup &&\r\n        item.azureMonitor.resourceGroup !== this.defaultDropdownValue &&\r\n        item.azureMonitor.resourceName &&\r\n        item.azureMonitor.resourceName !== this.defaultDropdownValue &&\r\n        item.azureMonitor.metricDefinition &&\r\n        item.azureMonitor.metricDefinition !== this.defaultDropdownValue &&\r\n        item.azureMonitor.metricName &&\r\n        item.azureMonitor.metricName !== this.defaultDropdownValue\r\n      );\r\n    }).map(target => {\r\n      const item = target.azureMonitor;\r\n\r\n      // fix for timeGrainUnit which is a deprecated/removed field name\r\n      if (item.timeGrainUnit && item.timeGrain !== 'auto') {\r\n        item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\r\n      }\r\n\r\n      const subscriptionId = this.templateSrv.replace(target.subscription || this.subscriptionId, options.scopedVars);\r\n      const resourceGroup = this.templateSrv.replace(item.resourceGroup, options.scopedVars);\r\n      const resourceName = this.templateSrv.replace(item.resourceName, options.scopedVars);\r\n      const metricNamespace = this.templateSrv.replace(item.metricNamespace, options.scopedVars);\r\n      const metricDefinition = this.templateSrv.replace(item.metricDefinition, options.scopedVars);\r\n      const timeGrain = this.templateSrv.replace((item.timeGrain || '').toString(), options.scopedVars);\r\n      const aggregation = this.templateSrv.replace(item.aggregation, options.scopedVars);\r\n      const top = this.templateSrv.replace(item.top || '', options.scopedVars);\r\n\r\n      return {\r\n        refId: target.refId,\r\n        intervalMs: options.intervalMs,\r\n        datasourceId: this.id,\r\n        subscription: subscriptionId,\r\n        queryType: 'Azure Monitor',\r\n        type: 'timeSeriesQuery',\r\n        raw: false,\r\n        azureMonitor: {\r\n          resourceGroup: resourceGroup,\r\n          resourceName: resourceName,\r\n          metricDefinition: metricDefinition,\r\n          timeGrain: timeGrain,\r\n          allowedTimeGrainsMs: item.allowedTimeGrainsMs,\r\n          metricName: this.templateSrv.replace(item.metricName, options.scopedVars),\r\n          metricNamespace:\r\n            metricNamespace && metricNamespace !== this.defaultDropdownValue ? metricNamespace : metricDefinition,\r\n          aggregation: aggregation,\r\n          dimension: this.templateSrv.replace(item.dimension, options.scopedVars),\r\n          top: top || '10',\r\n          dimensionFilter: this.templateSrv.replace(item.dimensionFilter, options.scopedVars),\r\n          alias: item.alias,\r\n          format: target.format,\r\n        },\r\n      };\r\n    });\r\n\r\n    if (!queries || queries.length === 0) {\r\n      return Promise.resolve([]);\r\n    }\r\n\r\n    const { data } = await this.backendSrv.datasourceRequest({\r\n      url: '/api/tsdb/query',\r\n      method: 'POST',\r\n      data: {\r\n        from: options.range.from.valueOf().toString(),\r\n        to: options.range.to.valueOf().toString(),\r\n        queries,\r\n      },\r\n    });\r\n\r\n    const result: DataQueryResponseData[] = [];\r\n    if (data.results) {\r\n      Object['values'](data.results).forEach((queryRes: any) => {\r\n        if (!queryRes.series) {\r\n          return;\r\n        }\r\n        queryRes.series.forEach((series: any) => {\r\n          const timeSerie: TimeSeries = {\r\n            target: series.name,\r\n            datapoints: series.points,\r\n            refId: queryRes.refId,\r\n            meta: queryRes.meta,\r\n          };\r\n          result.push(toDataFrame(timeSerie));\r\n        });\r\n      });\r\n      return result;\r\n    }\r\n\r\n    return Promise.resolve([]);\r\n  }\r\n\r\n  annotationQuery(options: any) {}\r\n\r\n  metricFindQuery(query: string) {\r\n    const subscriptionsQuery = query.match(/^Subscriptions\\(\\)/i);\r\n    if (subscriptionsQuery) {\r\n      return this.getSubscriptions();\r\n    }\r\n\r\n    const resourceGroupsQuery = query.match(/^ResourceGroups\\(\\)/i);\r\n    if (resourceGroupsQuery) {\r\n      return this.getResourceGroups(this.subscriptionId);\r\n    }\r\n\r\n    const resourceGroupsQueryWithSub = query.match(/^ResourceGroups\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\r\n    if (resourceGroupsQueryWithSub) {\r\n      return this.getResourceGroups(this.toVariable(resourceGroupsQueryWithSub[1]));\r\n    }\r\n\r\n    const metricDefinitionsQuery = query.match(/^Namespaces\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\r\n    if (metricDefinitionsQuery) {\r\n      if (!metricDefinitionsQuery[3]) {\r\n        return this.getMetricDefinitions(this.subscriptionId, this.toVariable(metricDefinitionsQuery[1]));\r\n      }\r\n    }\r\n\r\n    const metricDefinitionsQueryWithSub = query.match(/^Namespaces\\(([^,]+?),\\s?([^,]+?)\\)/i);\r\n    if (metricDefinitionsQueryWithSub) {\r\n      return this.getMetricDefinitions(\r\n        this.toVariable(metricDefinitionsQueryWithSub[1]),\r\n        this.toVariable(metricDefinitionsQueryWithSub[2])\r\n      );\r\n    }\r\n\r\n    const resourceNamesQuery = query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?)\\)/i);\r\n    if (resourceNamesQuery) {\r\n      const resourceGroup = this.toVariable(resourceNamesQuery[1]);\r\n      const metricDefinition = this.toVariable(resourceNamesQuery[2]);\r\n      return this.getResourceNames(this.subscriptionId, resourceGroup, metricDefinition);\r\n    }\r\n\r\n    const resourceNamesQueryWithSub = query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i);\r\n    if (resourceNamesQueryWithSub) {\r\n      const subscription = this.toVariable(resourceNamesQueryWithSub[1]);\r\n      const resourceGroup = this.toVariable(resourceNamesQueryWithSub[2]);\r\n      const metricDefinition = this.toVariable(resourceNamesQueryWithSub[3]);\r\n      return this.getResourceNames(subscription, resourceGroup, metricDefinition);\r\n    }\r\n\r\n    const metricNamespaceQuery = query.match(/^MetricNamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i);\r\n    if (metricNamespaceQuery) {\r\n      const resourceGroup = this.toVariable(metricNamespaceQuery[1]);\r\n      const metricDefinition = this.toVariable(metricNamespaceQuery[2]);\r\n      const resourceName = this.toVariable(metricNamespaceQuery[3]);\r\n      return this.getMetricNamespaces(this.subscriptionId, resourceGroup, metricDefinition, resourceName);\r\n    }\r\n\r\n    const metricNamespaceQueryWithSub = query.match(\r\n      /^metricnamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i\r\n    );\r\n    if (metricNamespaceQueryWithSub) {\r\n      const subscription = this.toVariable(metricNamespaceQueryWithSub[1]);\r\n      const resourceGroup = this.toVariable(metricNamespaceQueryWithSub[2]);\r\n      const metricDefinition = this.toVariable(metricNamespaceQueryWithSub[3]);\r\n      const resourceName = this.toVariable(metricNamespaceQueryWithSub[4]);\r\n      return this.getMetricNamespaces(subscription, resourceGroup, metricDefinition, resourceName);\r\n    }\r\n\r\n    const metricNamesQuery = query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i);\r\n    if (metricNamesQuery) {\r\n      if (metricNamesQuery[3].indexOf(',') === -1) {\r\n        const resourceGroup = this.toVariable(metricNamesQuery[1]);\r\n        const metricDefinition = this.toVariable(metricNamesQuery[2]);\r\n        const resourceName = this.toVariable(metricNamesQuery[3]);\r\n        const metricNamespace = this.toVariable(metricNamesQuery[4]);\r\n        return this.getMetricNames(this.subscriptionId, resourceGroup, metricDefinition, resourceName, metricNamespace);\r\n      }\r\n    }\r\n\r\n    const metricNamesQueryWithSub = query.match(\r\n      /^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i\r\n    );\r\n\r\n    if (metricNamesQueryWithSub) {\r\n      const subscription = this.toVariable(metricNamesQueryWithSub[1]);\r\n      const resourceGroup = this.toVariable(metricNamesQueryWithSub[2]);\r\n      const metricDefinition = this.toVariable(metricNamesQueryWithSub[3]);\r\n      const resourceName = this.toVariable(metricNamesQueryWithSub[4]);\r\n      const metricNamespace = this.toVariable(metricNamesQueryWithSub[5]);\r\n      return this.getMetricNames(subscription, resourceGroup, metricDefinition, resourceName, metricNamespace);\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  toVariable(metric: string) {\r\n    return this.templateSrv.replace((metric || '').trim());\r\n  }\r\n\r\n  getSubscriptions(route?: string) {\r\n    const url = `/${route || this.cloudName}/subscriptions?api-version=2019-03-01`;\r\n    return this.doRequest(url).then((result: any) => {\r\n      return ResponseParser.parseSubscriptions(result);\r\n    });\r\n  }\r\n\r\n  getResourceGroups(subscriptionId: string) {\r\n    const url = `${this.baseUrl}/${subscriptionId}/resourceGroups?api-version=${this.apiVersion}`;\r\n    return this.doRequest(url).then((result: AzureMonitorResourceGroupsResponse) => {\r\n      return ResponseParser.parseResponseValues(result, 'name', 'name');\r\n    });\r\n  }\r\n\r\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\r\n    const url = `${this.baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${this.apiVersion}`;\r\n    return this.doRequest(url)\r\n      .then((result: AzureMonitorMetricDefinitionsResponse) => {\r\n        return ResponseParser.parseResponseValues(result, 'type', 'type');\r\n      })\r\n      .then((result: any) => {\r\n        return _.filter(result, t => {\r\n          for (let i = 0; i < this.supportedMetricNamespaces.length; i++) {\r\n            if (t.value.toLowerCase() === this.supportedMetricNamespaces[i].toLowerCase()) {\r\n              return true;\r\n            }\r\n          }\r\n\r\n          return false;\r\n        });\r\n      })\r\n      .then((result: any) => {\r\n        let shouldHardcodeBlobStorage = false;\r\n        for (let i = 0; i < result.length; i++) {\r\n          if (result[i].value === 'Microsoft.Storage/storageAccounts') {\r\n            shouldHardcodeBlobStorage = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (shouldHardcodeBlobStorage) {\r\n          result.push({\r\n            text: 'Microsoft.Storage/storageAccounts/blobServices',\r\n            value: 'Microsoft.Storage/storageAccounts/blobServices',\r\n          });\r\n          result.push({\r\n            text: 'Microsoft.Storage/storageAccounts/fileServices',\r\n            value: 'Microsoft.Storage/storageAccounts/fileServices',\r\n          });\r\n          result.push({\r\n            text: 'Microsoft.Storage/storageAccounts/tableServices',\r\n            value: 'Microsoft.Storage/storageAccounts/tableServices',\r\n          });\r\n          result.push({\r\n            text: 'Microsoft.Storage/storageAccounts/queueServices',\r\n            value: 'Microsoft.Storage/storageAccounts/queueServices',\r\n          });\r\n        }\r\n\r\n        return result;\r\n      });\r\n  }\r\n\r\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string) {\r\n    const url = `${this.baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${this.apiVersion}`;\r\n\r\n    return this.doRequest(url).then((result: any) => {\r\n      if (!_.startsWith(metricDefinition, 'Microsoft.Storage/storageAccounts/')) {\r\n        return ResponseParser.parseResourceNames(result, metricDefinition);\r\n      }\r\n\r\n      const list = ResponseParser.parseResourceNames(result, 'Microsoft.Storage/storageAccounts');\r\n      for (let i = 0; i < list.length; i++) {\r\n        list[i].text += '/default';\r\n        list[i].value += '/default';\r\n      }\r\n\r\n      return list;\r\n    });\r\n  }\r\n\r\n  getMetricNamespaces(subscriptionId: string, resourceGroup: string, metricDefinition: string, resourceName: string) {\r\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamespacesUrl(\r\n      this.baseUrl,\r\n      subscriptionId,\r\n      resourceGroup,\r\n      metricDefinition,\r\n      resourceName,\r\n      this.apiPreviewVersion\r\n    );\r\n\r\n    return this.doRequest(url).then((result: any) => {\r\n      return ResponseParser.parseResponseValues(result, 'name', 'properties.metricNamespaceName');\r\n    });\r\n  }\r\n\r\n  getMetricNames(\r\n    subscriptionId: string,\r\n    resourceGroup: string,\r\n    metricDefinition: string,\r\n    resourceName: string,\r\n    metricNamespace: string\r\n  ) {\r\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\r\n      this.baseUrl,\r\n      subscriptionId,\r\n      resourceGroup,\r\n      metricDefinition,\r\n      resourceName,\r\n      metricNamespace,\r\n      this.apiVersion\r\n    );\r\n\r\n    return this.doRequest(url).then((result: any) => {\r\n      return ResponseParser.parseResponseValues(result, 'name.localizedValue', 'name.value');\r\n    });\r\n  }\r\n\r\n  getMetricMetadata(\r\n    subscriptionId: string,\r\n    resourceGroup: string,\r\n    metricDefinition: string,\r\n    resourceName: string,\r\n    metricNamespace: string,\r\n    metricName: string\r\n  ) {\r\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\r\n      this.baseUrl,\r\n      subscriptionId,\r\n      resourceGroup,\r\n      metricDefinition,\r\n      resourceName,\r\n      metricNamespace,\r\n      this.apiVersion\r\n    );\r\n\r\n    return this.doRequest(url).then((result: any) => {\r\n      return ResponseParser.parseMetadata(result, metricName);\r\n    });\r\n  }\r\n\r\n  testDatasource() {\r\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\r\n      return {\r\n        status: 'error',\r\n        message: 'The Tenant Id field is required.',\r\n      };\r\n    }\r\n\r\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\r\n      return {\r\n        status: 'error',\r\n        message: 'The Client Id field is required.',\r\n      };\r\n    }\r\n\r\n    const url = `/${this.cloudName}/subscriptions?api-version=2019-03-01`;\r\n    return this.doRequest(url)\r\n      .then((response: any) => {\r\n        if (response.status === 200) {\r\n          return {\r\n            status: 'success',\r\n            message: 'Successfully queried the Azure Monitor service.',\r\n            title: 'Success',\r\n          };\r\n        }\r\n\r\n        return {\r\n          status: 'error',\r\n          message: 'Returned http status code ' + response.status,\r\n        };\r\n      })\r\n      .catch((error: any) => {\r\n        let message = 'Azure Monitor: ';\r\n        message += error.statusText ? error.statusText + ': ' : '';\r\n\r\n        if (error.data && error.data.error && error.data.error.code) {\r\n          message += error.data.error.code + '. ' + error.data.error.message;\r\n        } else if (error.data && error.data.error) {\r\n          message += error.data.error;\r\n        } else if (error.data) {\r\n          message += error.data;\r\n        } else {\r\n          message += 'Cannot connect to Azure Monitor REST API.';\r\n        }\r\n        return {\r\n          status: 'error',\r\n          message: message,\r\n        };\r\n      });\r\n  }\r\n\r\n  isValidConfigField(field: string) {\r\n    return field && field.length > 0;\r\n  }\r\n\r\n  doRequest(url: string, maxRetries = 1) {\r\n    return this.backendSrv\r\n      .datasourceRequest({\r\n        url: this.url + url,\r\n        method: 'GET',\r\n      })\r\n      .catch((error: any) => {\r\n        if (maxRetries > 0) {\r\n          return this.doRequest(url, maxRetries - 1);\r\n        }\r\n\r\n        throw error;\r\n      });\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport TimeGrainConverter from '../time_grain_converter';\r\nexport default class ResponseParser {\r\n  static parseResponseValues(\r\n    result: any,\r\n    textFieldName: string,\r\n    valueFieldName: string\r\n  ): Array<{ text: string; value: string }> {\r\n    const list: Array<{ text: string; value: string }> = [];\r\n\r\n    if (!result) {\r\n      return list;\r\n    }\r\n\r\n    for (let i = 0; i < result.data.value.length; i++) {\r\n      if (!_.find(list, ['value', _.get(result.data.value[i], valueFieldName)])) {\r\n        const value = _.get(result.data.value[i], valueFieldName);\r\n        const text = _.get(result.data.value[i], textFieldName, value);\r\n\r\n        list.push({\r\n          text: text,\r\n          value: value,\r\n        });\r\n      }\r\n    }\r\n    return list;\r\n  }\r\n\r\n  static parseResourceNames(result: any, metricDefinition: string): Array<{ text: string; value: string }> {\r\n    const list: Array<{ text: string; value: string }> = [];\r\n\r\n    if (!result) {\r\n      return list;\r\n    }\r\n\r\n    for (let i = 0; i < result.data.value.length; i++) {\r\n      if (result.data.value[i].type === metricDefinition) {\r\n        list.push({\r\n          text: result.data.value[i].name,\r\n          value: result.data.value[i].name,\r\n        });\r\n      }\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  static parseMetadata(result: any, metricName: string) {\r\n    const defaultAggTypes = ['None', 'Average', 'Minimum', 'Maximum', 'Total', 'Count'];\r\n\r\n    if (!result) {\r\n      return {\r\n        primaryAggType: '',\r\n        supportedAggTypes: defaultAggTypes,\r\n        supportedTimeGrains: [],\r\n        dimensions: [],\r\n      };\r\n    }\r\n\r\n    const metricData: any = _.find(result.data.value, o => {\r\n      return _.get(o, 'name.value') === metricName;\r\n    });\r\n\r\n    return {\r\n      primaryAggType: metricData.primaryAggregationType,\r\n      supportedAggTypes: metricData.supportedAggregationTypes || defaultAggTypes,\r\n      supportedTimeGrains: ResponseParser.parseTimeGrains(metricData.metricAvailabilities || []),\r\n      dimensions: ResponseParser.parseDimensions(metricData),\r\n    };\r\n  }\r\n\r\n  static parseTimeGrains(metricAvailabilities: any[]): Array<{ text: string; value: string }> {\r\n    const timeGrains: any[] = [];\r\n    if (!metricAvailabilities) {\r\n      return timeGrains;\r\n    }\r\n\r\n    metricAvailabilities.forEach(avail => {\r\n      if (avail.timeGrain) {\r\n        timeGrains.push({\r\n          text: TimeGrainConverter.createTimeGrainFromISO8601Duration(avail.timeGrain),\r\n          value: avail.timeGrain,\r\n        });\r\n      }\r\n    });\r\n    return timeGrains;\r\n  }\r\n\r\n  static parseDimensions(metricData: any): Array<{ text: string; value: string }> {\r\n    const dimensions: Array<{ text: string; value: string }> = [];\r\n    if (!metricData.dimensions || metricData.dimensions.length === 0) {\r\n      return dimensions;\r\n    }\r\n\r\n    if (!metricData.isDimensionRequired) {\r\n      dimensions.push({ text: 'None', value: 'None' });\r\n    }\r\n\r\n    for (let i = 0; i < metricData.dimensions.length; i++) {\r\n      const text = metricData.dimensions[i].localizedValue;\r\n      const value = metricData.dimensions[i].value;\r\n\r\n      dimensions.push({\r\n        text: !text ? value : text,\r\n        value: value,\r\n      });\r\n    }\r\n    return dimensions;\r\n  }\r\n\r\n  static parseSubscriptions(result: any): Array<{ text: string; value: string }> {\r\n    const list: Array<{ text: string; value: string }> = [];\r\n\r\n    if (!result) {\r\n      return list;\r\n    }\r\n\r\n    const valueFieldName = 'subscriptionId';\r\n    const textFieldName = 'displayName';\r\n    for (let i = 0; i < result.data.value.length; i++) {\r\n      if (!_.find(list, ['value', _.get(result.data.value[i], valueFieldName)])) {\r\n        list.push({\r\n          text: `${_.get(result.data.value[i], textFieldName)} - ${_.get(result.data.value[i], valueFieldName)}`,\r\n          value: _.get(result.data.value[i], valueFieldName),\r\n        });\r\n      }\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  static parseSubscriptionsForSelect(result: any): Array<{ label: string; value: string }> {\r\n    const list: Array<{ label: string; value: string }> = [];\r\n\r\n    if (!result) {\r\n      return list;\r\n    }\r\n\r\n    const valueFieldName = 'subscriptionId';\r\n    const textFieldName = 'displayName';\r\n    for (let i = 0; i < result.data.value.length; i++) {\r\n      if (!_.find(list, ['value', _.get(result.data.value[i], valueFieldName)])) {\r\n        list.push({\r\n          label: `${_.get(result.data.value[i], textFieldName)} - ${_.get(result.data.value[i], valueFieldName)}`,\r\n          value: _.get(result.data.value[i], valueFieldName),\r\n        });\r\n      }\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  static parseWorkspacesForSelect(result: any): Array<{ label: string; value: string }> {\r\n    const list: Array<{ label: string; value: string }> = [];\r\n\r\n    if (!result) {\r\n      return list;\r\n    }\r\n\r\n    const valueFieldName = 'customerId';\r\n    const textFieldName = 'name';\r\n    for (let i = 0; i < result.data.value.length; i++) {\r\n      if (!_.find(list, ['value', _.get(result.data.value[i].properties, valueFieldName)])) {\r\n        list.push({\r\n          label: _.get(result.data.value[i], textFieldName),\r\n          value: _.get(result.data.value[i].properties, valueFieldName),\r\n        });\r\n      }\r\n    }\r\n\r\n    return list;\r\n  }\r\n}\r\n","export default class SupportedNamespaces {\r\n  supportedMetricNamespaces: any = {\r\n    azuremonitor: [\r\n      'Microsoft.AnalysisServices/servers',\r\n      'Microsoft.ApiManagement/service',\r\n      'Microsoft.Automation/automationAccounts',\r\n      'Microsoft.Batch/batchAccounts',\r\n      'Microsoft.Cache/redis',\r\n      'Microsoft.ClassicCompute/virtualMachines',\r\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\r\n      'Microsoft.CognitiveServices/accounts',\r\n      'Microsoft.Compute/virtualMachines',\r\n      'Microsoft.Compute/virtualMachineScaleSets',\r\n      'Microsoft.ContainerInstance/containerGroups',\r\n      'Microsoft.ContainerRegistry/registries',\r\n      'Microsoft.ContainerService/managedClusters',\r\n      'Microsoft.CustomerInsights/hubs',\r\n      'Microsoft.DataBoxEdge/dataBoxEdgeDevices',\r\n      'Microsoft.DataFactory/datafactories',\r\n      'Microsoft.DataFactory/factories',\r\n      'Microsoft.DataLakeAnalytics/accounts',\r\n      'Microsoft.DataLakeStore/accounts',\r\n      'Microsoft.DBforMariaDB/servers',\r\n      'Microsoft.DBforMySQL/servers',\r\n      'Microsoft.DBforPostgreSQL/servers',\r\n      'Microsoft.Devices/IotHubs',\r\n      'Microsoft.Devices/provisioningServices',\r\n      'Microsoft.DocumentDB/databaseAccounts',\r\n      'Microsoft.EventGrid/topics',\r\n      'Microsoft.EventGrid/eventSubscriptions',\r\n      'Microsoft.EventGrid/extensionTopics',\r\n      'Microsoft.EventHub/namespaces',\r\n      'Microsoft.EventHub/clusters',\r\n      'Microsoft.HDInsight/clusters',\r\n      'Microsoft.Insights/AutoscaleSettings',\r\n      'Microsoft.Insights/components',\r\n      'Microsoft.KeyVault/vaults',\r\n      'Microsoft.Kusto/clusters',\r\n      'Microsoft.LocationBasedServices/accounts',\r\n      'Microsoft.Logic/workflows',\r\n      'Microsoft.Logic/integrationServiceEnvironments',\r\n      'Microsoft.NetApp/netAppAccounts/capacityPools',\r\n      'Microsoft.NetApp/netAppAccounts/capacityPools/Volumes',\r\n      'Microsoft.Network/networkInterfaces',\r\n      'Microsoft.Network/loadBalancers',\r\n      'Microsoft.Network/dnsZones',\r\n      'Microsoft.Network/publicIPAddresses',\r\n      'Microsoft.Network/azureFirewalls',\r\n      'Microsoft.Network/applicationGateways',\r\n      'Microsoft.Network/virtualNetworkGateways',\r\n      'Microsoft.Network/expressRouteCircuits',\r\n      'Microsoft.Network/expressRouteCircuits/Peerings',\r\n      'Microsoft.Network/connections',\r\n      'Microsoft.Network/trafficManagerProfiles',\r\n      'Microsoft.Network/networkWatchers/connectionMonitors',\r\n      'Microsoft.Network/frontdoors',\r\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\r\n      'Microsoft.OperationalInsights/workspaces',\r\n      'Microsoft.PowerBIDedicated/capacities',\r\n      'Microsoft.Relay/namespaces',\r\n      'Microsoft.Search/searchServices',\r\n      'Microsoft.ServiceBus/namespaces',\r\n      'Microsoft.Sql/servers/databases',\r\n      'Microsoft.Sql/servers/elasticPools',\r\n      'Microsoft.Sql/managedInstances',\r\n      'Microsoft.Storage/storageAccounts',\r\n      'Microsoft.Storage/storageAccounts/blobServices',\r\n      'Microsoft.Storage/storageAccounts/fileServices',\r\n      'Microsoft.Storage/storageAccounts/queueServices',\r\n      'Microsoft.Storage/storageAccounts/tableServices',\r\n      'Microsoft.StorageSync/storageSyncServices',\r\n      'Microsoft.StorageSync/storageSyncServices/syncGroups',\r\n      'Microsoft.StorageSync/storageSyncServices/syncGroups/serverEndpoints',\r\n      'Microsoft.StorageSync/storageSyncServices/registeredServers',\r\n      'Microsoft.StreamAnalytics/streamingJobs',\r\n      'Microsoft.Web/serverfarms',\r\n      'Microsoft.Web/sites',\r\n      'Microsoft.Web/sites/slots',\r\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\r\n      'Microsoft.Web/hostingEnvironments/workerPools',\r\n    ],\r\n    govazuremonitor: [\r\n      'Microsoft.AnalysisServices/servers',\r\n      'Microsoft.ApiManagement/service',\r\n      'Microsoft.Batch/batchAccounts',\r\n      'Microsoft.Cache/redis',\r\n      'Microsoft.ClassicCompute/virtualMachines',\r\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\r\n      'Microsoft.CognitiveServices/accounts',\r\n      'Microsoft.Compute/virtualMachines',\r\n      'Microsoft.Compute/virtualMachineScaleSets',\r\n      'Microsoft.ContainerRegistry/registries',\r\n      'Microsoft.DBforMySQL/servers',\r\n      'Microsoft.DBforPostgreSQL/servers',\r\n      'Microsoft.Devices/IotHubs',\r\n      'Microsoft.Devices/provisioningServices',\r\n      'Microsoft.EventGrid/topics',\r\n      'Microsoft.EventGrid/eventSubscriptions',\r\n      'Microsoft.EventGrid/extensionTopics',\r\n      'Microsoft.EventHub/namespaces',\r\n      'Microsoft.EventHub/clusters',\r\n      'Microsoft.Insights/AutoscaleSettings',\r\n      'Microsoft.KeyVault/vaults',\r\n      'Microsoft.Logic/workflows',\r\n      'Microsoft.Network/networkInterfaces',\r\n      'Microsoft.Network/loadBalancers',\r\n      'Microsoft.Network/dnsZones',\r\n      'Microsoft.Network/publicIPAddresses',\r\n      'Microsoft.Network/azureFirewalls',\r\n      'Microsoft.Network/applicationGateways',\r\n      'Microsoft.Network/virtualNetworkGateways',\r\n      'Microsoft.Network/expressRouteCircuits',\r\n      'Microsoft.Network/expressRouteCircuits/Peerings',\r\n      'Microsoft.Network/connections',\r\n      'Microsoft.Network/trafficManagerProfiles',\r\n      'Microsoft.Network/networkWatchers/connectionMonitors',\r\n      'Microsoft.Network/frontdoors',\r\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\r\n      'Microsoft.OperationalInsights/workspaces',\r\n      'Microsoft.PowerBIDedicated/capacities',\r\n      'Microsoft.Relay/namespaces',\r\n      'Microsoft.ServiceBus/namespaces',\r\n      'Microsoft.Sql/servers/databases',\r\n      'Microsoft.Sql/servers/elasticPools',\r\n      'Microsoft.Sql/managedInstances',\r\n      'Microsoft.Storage/storageAccounts',\r\n      'Microsoft.Storage/storageAccounts/blobServices',\r\n      'Microsoft.Storage/storageAccounts/fileServices',\r\n      'Microsoft.Storage/storageAccounts/queueServices',\r\n      'Microsoft.Storage/storageAccounts/tableServices',\r\n      'Microsoft.Web/serverfarms',\r\n      'Microsoft.Web/sites',\r\n      'Microsoft.Web/sites/slots',\r\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\r\n      'Microsoft.Web/hostingEnvironments/workerPools',\r\n    ],\r\n    germanyazuremonitor: [\r\n      'Microsoft.AnalysisServices/servers',\r\n      'Microsoft.Batch/batchAccounts',\r\n      'Microsoft.Cache/redis',\r\n      'Microsoft.ClassicCompute/virtualMachines',\r\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\r\n      'Microsoft.Compute/virtualMachines',\r\n      'Microsoft.Compute/virtualMachineScaleSets',\r\n      'Microsoft.DBforMySQL/servers',\r\n      'Microsoft.DBforPostgreSQL/servers',\r\n      'Microsoft.Devices/IotHubs',\r\n      'Microsoft.Devices/provisioningServices',\r\n      'Microsoft.EventHub/namespaces',\r\n      'Microsoft.EventHub/clusters',\r\n      'Microsoft.Insights/AutoscaleSettings',\r\n      'Microsoft.KeyVault/vaults',\r\n      'Microsoft.Network/networkInterfaces',\r\n      'Microsoft.Network/loadBalancers',\r\n      'Microsoft.Network/dnsZones',\r\n      'Microsoft.Network/publicIPAddresses',\r\n      'Microsoft.Network/azureFirewalls',\r\n      'Microsoft.Network/applicationGateways',\r\n      'Microsoft.Network/virtualNetworkGateways',\r\n      'Microsoft.Network/expressRouteCircuits',\r\n      'Microsoft.Network/expressRouteCircuits/Peerings',\r\n      'Microsoft.Network/connections',\r\n      'Microsoft.Network/trafficManagerProfiles',\r\n      'Microsoft.Network/networkWatchers/connectionMonitors',\r\n      'Microsoft.Network/frontdoors',\r\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\r\n      'Microsoft.OperationalInsights/workspaces',\r\n      'Microsoft.PowerBIDedicated/capacities',\r\n      'Microsoft.Relay/namespaces',\r\n      'Microsoft.ServiceBus/namespaces',\r\n      'Microsoft.Sql/servers/databases',\r\n      'Microsoft.Sql/servers/elasticPools',\r\n      'Microsoft.Sql/managedInstances',\r\n      'Microsoft.Storage/storageAccounts',\r\n      'Microsoft.Storage/storageAccounts/blobServices',\r\n      'Microsoft.Storage/storageAccounts/fileServices',\r\n      'Microsoft.Storage/storageAccounts/queueServices',\r\n      'Microsoft.Storage/storageAccounts/tableServices',\r\n      'Microsoft.StreamAnalytics/streamingJobs',\r\n      'Microsoft.Web/serverfarms',\r\n      'Microsoft.Web/sites',\r\n      'Microsoft.Web/sites/slots',\r\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\r\n      'Microsoft.Web/hostingEnvironments/workerPools',\r\n    ],\r\n    chinaazuremonitor: [\r\n      'Microsoft.AnalysisServices/servers',\r\n      'Microsoft.Batch/batchAccounts',\r\n      'Microsoft.Cache/redis',\r\n      'Microsoft.ClassicCompute/virtualMachines',\r\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\r\n      'Microsoft.CognitiveServices/accounts',\r\n      'Microsoft.Compute/virtualMachines',\r\n      'Microsoft.Compute/virtualMachineScaleSets',\r\n      'Microsoft.ContainerRegistry/registries',\r\n      'Microsoft.DBforMySQL/servers',\r\n      'Microsoft.DBforPostgreSQL/servers',\r\n      'Microsoft.Devices/IotHubs',\r\n      'Microsoft.Devices/provisioningServices',\r\n      'Microsoft.EventHub/namespaces',\r\n      'Microsoft.Insights/AutoscaleSettings',\r\n      'Microsoft.KeyVault/vaults',\r\n      'Microsoft.Logic/workflows',\r\n      'Microsoft.Network/networkInterfaces',\r\n      'Microsoft.Network/loadBalancers',\r\n      'Microsoft.Network/dnsZones',\r\n      'Microsoft.Network/publicIPAddresses',\r\n      'Microsoft.Network/azureFirewalls',\r\n      'Microsoft.Network/applicationGateways',\r\n      'Microsoft.Network/virtualNetworkGateways',\r\n      'Microsoft.Network/expressRouteCircuits',\r\n      'Microsoft.Network/expressRouteCircuits/Peerings',\r\n      'Microsoft.Network/connections',\r\n      'Microsoft.Network/trafficManagerProfiles',\r\n      'Microsoft.Network/networkWatchers/connectionMonitors',\r\n      'Microsoft.Network/frontdoors',\r\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\r\n      'Microsoft.PowerBIDedicated/capacities',\r\n      'Microsoft.Relay/namespaces',\r\n      'Microsoft.ServiceBus/namespaces',\r\n      'Microsoft.Sql/servers/databases',\r\n      'Microsoft.Sql/servers/elasticPools',\r\n      'Microsoft.Sql/managedInstances',\r\n      'Microsoft.Storage/storageAccounts',\r\n      'Microsoft.Storage/storageAccounts/blobServices',\r\n      'Microsoft.Storage/storageAccounts/fileServices',\r\n      'Microsoft.Storage/storageAccounts/queueServices',\r\n      'Microsoft.Storage/storageAccounts/tableServices',\r\n      'Microsoft.StreamAnalytics/streamingJobs',\r\n      'Microsoft.Web/serverfarms',\r\n      'Microsoft.Web/sites',\r\n      'Microsoft.Web/sites/slots',\r\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\r\n      'Microsoft.Web/hostingEnvironments/workerPools',\r\n    ],\r\n  };\r\n\r\n  constructor(private cloudName: string) {}\r\n\r\n  get(): string[] {\r\n    return this.supportedMetricNamespaces[this.cloudName];\r\n  }\r\n}\r\n","export default class UrlBuilder {\r\n  static buildAzureMonitorGetMetricNamespacesUrl(\r\n    baseUrl: string,\r\n    subscriptionId: string,\r\n    resourceGroup: string,\r\n    metricDefinition: string,\r\n    resourceName: string,\r\n    apiVersion: string\r\n  ) {\r\n    if ((metricDefinition.match(/\\//g) || []).length > 1) {\r\n      const rn = resourceName.split('/');\r\n      const service = metricDefinition.substring(metricDefinition.lastIndexOf('/') + 1);\r\n      const md = metricDefinition.substring(0, metricDefinition.lastIndexOf('/'));\r\n      return (\r\n        `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${md}/${rn[0]}/${service}/${rn[1]}` +\r\n        `/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}`\r\n      );\r\n    }\r\n\r\n    return (\r\n      `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${metricDefinition}/${resourceName}` +\r\n      `/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}`\r\n    );\r\n  }\r\n\r\n  static buildAzureMonitorGetMetricNamesUrl(\r\n    baseUrl: string,\r\n    subscriptionId: string,\r\n    resourceGroup: string,\r\n    metricDefinition: string,\r\n    resourceName: string,\r\n    metricNamespace: string,\r\n    apiVersion: string\r\n  ) {\r\n    if ((metricDefinition.match(/\\//g) || []).length > 1) {\r\n      const rn = resourceName.split('/');\r\n      const service = metricDefinition.substring(metricDefinition.lastIndexOf('/') + 1);\r\n      const md = metricDefinition.substring(0, metricDefinition.lastIndexOf('/'));\r\n      return (\r\n        `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${md}/${rn[0]}/${service}/${rn[1]}` +\r\n        `/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}&metricnamespace=${encodeURIComponent(\r\n          metricNamespace\r\n        )}`\r\n      );\r\n    }\r\n\r\n    return (\r\n      `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${metricDefinition}/${resourceName}` +\r\n      `/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}&metricnamespace=${encodeURIComponent(\r\n        metricNamespace\r\n      )}`\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent, ChangeEvent } from 'react';\r\nimport { SelectableValue } from '@grafana/data';\r\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\r\nimport { Switch, FormLabel, Select, Button } from '@grafana/ui';\r\nimport { AzureDataSourceSettings } from '../types';\r\n\r\nexport interface Props {\r\n  options: AzureDataSourceSettings;\r\n  subscriptions: SelectableValue[];\r\n  workspaces: SelectableValue[];\r\n  makeSameAs: () => void;\r\n  onUpdateOptions: (options: AzureDataSourceSettings) => void;\r\n  onUpdateOption: (key: string, val: any) => void;\r\n  onUpdateSecureOption: (key: string, val: any) => void;\r\n  onResetOptionKey: (key: string) => void;\r\n  onLoadSubscriptions: (type?: string) => void;\r\n  onLoadWorkspaces: (type?: string) => void;\r\n}\r\nexport class AnalyticsConfig extends PureComponent<Props> {\r\n  onLogAnalyticsTenantIdChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    this.props.onUpdateOption('logAnalyticsTenantId', event.target.value);\r\n  };\r\n\r\n  onLogAnalyticsClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    this.props.onUpdateOption('logAnalyticsClientId', event.target.value);\r\n  };\r\n\r\n  onLogAnalyticsClientSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    this.props.onUpdateSecureOption('logAnalyticsClientSecret', event.target.value);\r\n  };\r\n\r\n  onLogAnalyticsSubscriptionSelect = (logAnalyticsSubscription: SelectableValue<string>) => {\r\n    this.props.onUpdateOption('logAnalyticsSubscriptionId', logAnalyticsSubscription.value);\r\n  };\r\n\r\n  onWorkspaceSelectChange = (logAnalyticsDefaultWorkspace: SelectableValue<string>) => {\r\n    this.props.onUpdateOption('logAnalyticsDefaultWorkspace', logAnalyticsDefaultWorkspace.value);\r\n  };\r\n\r\n  onAzureLogAnalyticsSameAsChange = () => {\r\n    const { options, onUpdateOptions, makeSameAs } = this.props;\r\n\r\n    if (!options.jsonData.azureLogAnalyticsSameAs && options.secureJsonData.clientSecret) {\r\n      makeSameAs();\r\n    } else if (!options.jsonData.azureLogAnalyticsSameAs) {\r\n      // if currently off, clear monitor secret\r\n      onUpdateOptions({\r\n        ...options,\r\n        jsonData: {\r\n          ...options.jsonData,\r\n          azureLogAnalyticsSameAs: !options.jsonData.azureLogAnalyticsSameAs,\r\n        },\r\n        secureJsonData: {\r\n          ...options.secureJsonData,\r\n          clientSecret: '',\r\n        },\r\n        secureJsonFields: {\r\n          clientSecret: false,\r\n        },\r\n      });\r\n    } else {\r\n      this.props.onUpdateOption('azureLogAnalyticsSameAs', !options.jsonData.azureLogAnalyticsSameAs);\r\n    }\r\n\r\n    // init popover to warn secret needs to be re-entered\r\n  };\r\n\r\n  onLogAnalyticsResetClientSecret = () => {\r\n    this.props.onResetOptionKey('logAnalyticsClientSecret');\r\n  };\r\n\r\n  hasWorkspaceRequiredFields = () => {\r\n    const {\r\n      options: { jsonData, secureJsonData, secureJsonFields },\r\n    } = this.props;\r\n\r\n    if (jsonData.azureLogAnalyticsSameAs) {\r\n      return (\r\n        jsonData.tenantId &&\r\n        jsonData.clientId &&\r\n        jsonData.subscriptionId &&\r\n        (secureJsonData.clientSecret || secureJsonFields.clientSecret)\r\n      );\r\n    }\r\n\r\n    return (\r\n      jsonData.logAnalyticsTenantId &&\r\n      jsonData.logAnalyticsTenantId.length &&\r\n      jsonData.logAnalyticsClientId &&\r\n      jsonData.logAnalyticsClientId.length &&\r\n      jsonData.logAnalyticsSubscriptionId &&\r\n      (secureJsonFields.logAnalyticsClientSecret || secureJsonData.logAnalyticsClientSecret)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      options: { jsonData, secureJsonData, secureJsonFields },\r\n      subscriptions,\r\n      workspaces,\r\n    } = this.props;\r\n\r\n    if (!jsonData.hasOwnProperty('azureLogAnalyticsSameAs')) {\r\n      jsonData.azureLogAnalyticsSameAs = true;\r\n    }\r\n\r\n    const addtlAttrs = {\r\n      ...(jsonData.azureLogAnalyticsSameAs && {\r\n        tooltip: 'Workspaces are pulled from default subscription selected above.',\r\n      }),\r\n    };\r\n\r\n    const showSameAsHelpMsg =\r\n      jsonData.azureLogAnalyticsSameAs &&\r\n      secureJsonFields &&\r\n      !secureJsonFields.clientSecret &&\r\n      !secureJsonData.clientSecret;\r\n\r\n    return (\r\n      <>\r\n        <h3 className=\"page-heading\">Azure Log Analytics API Details</h3>\r\n        <Switch\r\n          label=\"Same details as Azure Monitor API\"\r\n          checked={jsonData.azureLogAnalyticsSameAs}\r\n          onChange={this.onAzureLogAnalyticsSameAsChange}\r\n          {...addtlAttrs}\r\n        />\r\n        {showSameAsHelpMsg && (\r\n          <div className=\"grafana-info-box m-t-2\">\r\n            <div className=\"alert-body\">\r\n              <p>Re-enter your Azure Monitor Client Secret to use this setting.</p>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {!jsonData.azureLogAnalyticsSameAs && (\r\n          <AzureCredentialsForm\r\n            subscriptionOptions={subscriptions}\r\n            selectedSubscription={jsonData.logAnalyticsSubscriptionId}\r\n            tenantId={jsonData.logAnalyticsTenantId}\r\n            clientId={jsonData.logAnalyticsClientId}\r\n            clientSecret={secureJsonData.logAnalyticsClientSecret}\r\n            clientSecretConfigured={secureJsonFields.logAnalyticsClientSecret}\r\n            onSubscriptionSelectChange={this.onLogAnalyticsSubscriptionSelect}\r\n            onTenantIdChange={this.onLogAnalyticsTenantIdChange}\r\n            onClientIdChange={this.onLogAnalyticsClientIdChange}\r\n            onClientSecretChange={this.onLogAnalyticsClientSecretChange}\r\n            onResetClientSecret={this.onLogAnalyticsResetClientSecret}\r\n            onLoadSubscriptions={() => this.props.onLoadSubscriptions('workspacesloganalytics')}\r\n          />\r\n        )}\r\n        <div className=\"gf-form-group\">\r\n          <div className=\"gf-form-inline\">\r\n            <div className=\"gf-form\">\r\n              <FormLabel\r\n                className=\"width-12\"\r\n                tooltip=\"Choose the default/preferred Workspace for Azure Log Analytics queries.\"\r\n              >\r\n                Default Workspace\r\n              </FormLabel>\r\n              <div className=\"width-25\">\r\n                <Select\r\n                  value={workspaces.find(workspace => workspace.value === jsonData.logAnalyticsDefaultWorkspace)}\r\n                  options={workspaces}\r\n                  defaultValue={jsonData.logAnalyticsDefaultWorkspace}\r\n                  onChange={this.onWorkspaceSelectChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"gf-form-inline\">\r\n            <div className=\"gf-form\">\r\n              <div className=\"max-width-30 gf-form-inline\">\r\n                <Button\r\n                  variant=\"secondary\"\r\n                  size=\"sm\"\r\n                  type=\"button\"\r\n                  onClick={() => this.props.onLoadWorkspaces()}\r\n                  disabled={!this.hasWorkspaceRequiredFields()}\r\n                >\r\n                  Load Workspaces\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnalyticsConfig;\r\n","import React, { ChangeEvent, PureComponent } from 'react';\r\nimport { SelectableValue } from '@grafana/data';\r\nimport { Input, FormLabel, Select, Button } from '@grafana/ui';\r\n\r\nexport interface Props {\r\n  selectedAzureCloud?: string;\r\n  selectedSubscription?: string;\r\n  azureCloudOptions?: SelectableValue[];\r\n  tenantId: string;\r\n  clientId: string;\r\n  clientSecret: string;\r\n  clientSecretConfigured: boolean;\r\n  subscriptionOptions?: SelectableValue[];\r\n  onAzureCloudChange?: (value: SelectableValue<string>) => void;\r\n  onSubscriptionSelectChange?: (value: SelectableValue<string>) => void;\r\n  onTenantIdChange: (event: ChangeEvent<HTMLInputElement>) => void;\r\n  onClientIdChange: (event: ChangeEvent<HTMLInputElement>) => void;\r\n  onClientSecretChange: (event: ChangeEvent<HTMLInputElement>) => void;\r\n  onResetClientSecret: () => void;\r\n  onLoadSubscriptions?: () => void;\r\n}\r\n\r\nexport class AzureCredentialsForm extends PureComponent<Props> {\r\n  render() {\r\n    const {\r\n      selectedAzureCloud,\r\n      selectedSubscription,\r\n      tenantId,\r\n      clientId,\r\n      clientSecret,\r\n      clientSecretConfigured,\r\n      azureCloudOptions,\r\n      subscriptionOptions,\r\n      onAzureCloudChange,\r\n      onSubscriptionSelectChange,\r\n      onTenantIdChange,\r\n      onClientIdChange,\r\n      onClientSecretChange,\r\n      onResetClientSecret,\r\n      onLoadSubscriptions,\r\n    } = this.props;\r\n    const hasRequiredFields = tenantId && clientId && (clientSecret || clientSecretConfigured);\r\n    const hasSubscriptions = onLoadSubscriptions && subscriptionOptions;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"gf-form-group\">\r\n          {azureCloudOptions && (\r\n            <div className=\"gf-form-inline\">\r\n              <div className=\"gf-form\">\r\n                <FormLabel className=\"width-12\" tooltip=\"Choose an Azure Cloud.\">\r\n                  Azure Cloud\r\n                </FormLabel>\r\n                <Select\r\n                  className=\"width-15\"\r\n                  value={azureCloudOptions.find(azureCloud => azureCloud.value === selectedAzureCloud)}\r\n                  options={azureCloudOptions}\r\n                  defaultValue={selectedAzureCloud}\r\n                  onChange={onAzureCloudChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n          <div className=\"gf-form-inline\">\r\n            <div className=\"gf-form\">\r\n              <FormLabel className=\"width-12\">Directory (tenant) ID</FormLabel>\r\n              <div className=\"width-15\">\r\n                <Input\r\n                  className=\"width-30\"\r\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\r\n                  value={tenantId || ''}\r\n                  onChange={onTenantIdChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"gf-form-inline\">\r\n            <div className=\"gf-form\">\r\n              <FormLabel className=\"width-12\">Application (client) ID</FormLabel>\r\n              <div className=\"width-15\">\r\n                <Input\r\n                  className=\"width-30\"\r\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\r\n                  value={clientId || ''}\r\n                  onChange={onClientIdChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {clientSecretConfigured ? (\r\n            <div className=\"gf-form-inline\">\r\n              <div className=\"gf-form\">\r\n                <FormLabel className=\"width-12\">Client Secret</FormLabel>\r\n                <Input className=\"width-25\" placeholder=\"configured\" disabled={true} />\r\n              </div>\r\n              <div className=\"gf-form\">\r\n                <div className=\"max-width-30 gf-form-inline\">\r\n                  <Button variant=\"secondary\" type=\"button\" onClick={onResetClientSecret}>\r\n                    reset\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"gf-form-inline\">\r\n              <div className=\"gf-form\">\r\n                <FormLabel className=\"width-12\">Client Secret</FormLabel>\r\n                <div className=\"width-15\">\r\n                  <Input\r\n                    className=\"width-30\"\r\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\r\n                    value={clientSecret || ''}\r\n                    onChange={onClientSecretChange}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {hasSubscriptions && (\r\n            <>\r\n              <div className=\"gf-form-inline\">\r\n                <div className=\"gf-form\">\r\n                  <FormLabel className=\"width-12\">Default Subscription</FormLabel>\r\n                  <div className=\"width-25\">\r\n                    <Select\r\n                      value={subscriptionOptions.find(subscription => subscription.value === selectedSubscription)}\r\n                      options={subscriptionOptions}\r\n                      defaultValue={selectedSubscription}\r\n                      onChange={onSubscriptionSelectChange}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"gf-form-inline\">\r\n                <div className=\"gf-form\">\r\n                  <div className=\"max-width-30 gf-form-inline\">\r\n                    <Button\r\n                      variant=\"secondary\"\r\n                      size=\"sm\"\r\n                      type=\"button\"\r\n                      onClick={onLoadSubscriptions}\r\n                      disabled={!hasRequiredFields}\r\n                    >\r\n                      Load Subscriptions\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AzureCredentialsForm;\r\n","import React, { PureComponent } from 'react';\r\nimport {\r\n  SelectableValue,\r\n  DataSourcePluginOptionsEditorProps,\r\n  updateDatasourcePluginOption,\r\n  updateDatasourcePluginResetOption,\r\n  updateDatasourcePluginJsonDataOption,\r\n  updateDatasourcePluginSecureJsonDataOption,\r\n} from '@grafana/data';\r\nimport { MonitorConfig } from './MonitorConfig';\r\nimport { AnalyticsConfig } from './AnalyticsConfig';\r\nimport { TemplateSrv } from 'app/features/templating/template_srv';\r\nimport { getBackendSrv, BackendSrv } from 'app/core/services/backend_srv';\r\nimport { InsightsConfig } from './InsightsConfig';\r\nimport ResponseParser from '../azure_monitor/response_parser';\r\nimport { AzureDataSourceJsonData, AzureDataSourceSecureJsonData, AzureDataSourceSettings } from '../types';\r\nimport { makePromiseCancelable, CancelablePromise } from 'app/core/utils/CancelablePromise';\r\n\r\nexport type Props = DataSourcePluginOptionsEditorProps<AzureDataSourceJsonData, AzureDataSourceSecureJsonData>;\r\n\r\nexport interface State {\r\n  subscriptions: SelectableValue[];\r\n  logAnalyticsSubscriptions: SelectableValue[];\r\n  logAnalyticsWorkspaces: SelectableValue[];\r\n  subscriptionId: string;\r\n  logAnalyticsSubscriptionId: string;\r\n}\r\n\r\nexport class ConfigEditor extends PureComponent<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      subscriptions: [],\r\n      logAnalyticsSubscriptions: [],\r\n      logAnalyticsWorkspaces: [],\r\n      subscriptionId: '',\r\n      logAnalyticsSubscriptionId: '',\r\n    };\r\n\r\n    this.backendSrv = getBackendSrv();\r\n    this.templateSrv = new TemplateSrv();\r\n    if (this.props.options.id) {\r\n      updateDatasourcePluginOption(this.props, 'url', '/api/datasources/proxy/' + this.props.options.id);\r\n    }\r\n  }\r\n\r\n  initPromise: CancelablePromise<any> = null;\r\n  backendSrv: BackendSrv = null;\r\n  templateSrv: TemplateSrv = null;\r\n\r\n  componentDidMount() {\r\n    this.initPromise = makePromiseCancelable(this.init());\r\n    this.initPromise.promise.catch(({ isCanceled }) => {\r\n      if (isCanceled) {\r\n        console.warn('Azure Monitor ConfigEditor has unmounted, intialization was canceled');\r\n      }\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.initPromise.cancel();\r\n  }\r\n\r\n  init = async () => {\r\n    await this.getSubscriptions();\r\n\r\n    if (!this.props.options.jsonData.azureLogAnalyticsSameAs) {\r\n      await this.getLogAnalyticsSubscriptions();\r\n    }\r\n  };\r\n\r\n  updateOption = (key: keyof AzureDataSourceJsonData, val: any) => {\r\n    updateDatasourcePluginJsonDataOption(this.props, key, val);\r\n  };\r\n\r\n  updateSecureOption = (key: keyof AzureDataSourceSecureJsonData, val: any) => {\r\n    updateDatasourcePluginSecureJsonDataOption(this.props, key, val);\r\n  };\r\n\r\n  resetKey = (key: string) => {\r\n    updateDatasourcePluginResetOption(this.props, key);\r\n  };\r\n\r\n  makeSameAs = (updatedClientSecret?: string) => {\r\n    const { options } = this.props;\r\n    const clientSecret = updatedClientSecret || options.secureJsonData.clientSecret;\r\n\r\n    this.updateOptions({\r\n      ...options,\r\n      jsonData: {\r\n        ...options.jsonData,\r\n        azureLogAnalyticsSameAs: true,\r\n        logAnalyticsSubscriptionId: options.jsonData.subscriptionId,\r\n        logAnalyticsTenantId: options.jsonData.tenantId,\r\n        logAnalyticsClientId: options.jsonData.clientId,\r\n      },\r\n      secureJsonData: {\r\n        ...options.secureJsonData,\r\n        clientSecret,\r\n        logAnalyticsClientSecret: clientSecret,\r\n      },\r\n    });\r\n  };\r\n\r\n  updateOptions = (options: AzureDataSourceSettings) => {\r\n    if (options.hasOwnProperty('secureJsonData')) {\r\n      if (options.secureJsonData.hasOwnProperty('clientSecret') && options.secureJsonData.clientSecret.length === 0) {\r\n        delete options.secureJsonData.clientSecret;\r\n      }\r\n\r\n      if (\r\n        options.secureJsonData.hasOwnProperty('logAnalyticsClientSecret') &&\r\n        options.secureJsonData.logAnalyticsClientSecret.length === 0\r\n      ) {\r\n        delete options.secureJsonData.logAnalyticsClientSecret;\r\n      }\r\n\r\n      if (\r\n        options.secureJsonData.hasOwnProperty('appInsightsApiKey') &&\r\n        options.secureJsonData.appInsightsApiKey.length === 0\r\n      ) {\r\n        delete options.secureJsonData.appInsightsApiKey;\r\n      }\r\n    }\r\n\r\n    this.props.onOptionsChange({\r\n      ...options,\r\n    });\r\n  };\r\n\r\n  hasNecessaryCredentials = () => {\r\n    if (!this.props.options.secureJsonFields.clientSecret && !this.props.options.secureJsonData.clientSecret) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.props.options.jsonData.clientId || !this.props.options.jsonData.tenantId) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  logAnalyticsHasNecessaryCredentials = () => {\r\n    if (\r\n      !this.props.options.secureJsonFields.logAnalyticsClientSecret &&\r\n      !this.props.options.secureJsonData.logAnalyticsClientSecret\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.props.options.jsonData.logAnalyticsClientId || !this.props.options.jsonData.logAnalyticsTenantId) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  onLoadSubscriptions = async (type?: string) => {\r\n    await this.backendSrv\r\n      .put(`/api/datasources/${this.props.options.id}`, this.props.options)\r\n      .then((result: AzureDataSourceSettings) => {\r\n        updateDatasourcePluginOption(this.props, 'version', result.version);\r\n      });\r\n\r\n    if (type && type === 'workspacesloganalytics') {\r\n      this.getLogAnalyticsSubscriptions();\r\n    } else {\r\n      this.getSubscriptions();\r\n    }\r\n  };\r\n\r\n  loadSubscriptions = async (route?: string) => {\r\n    const url = `/${route || this.props.options.jsonData.cloudName}/subscriptions?api-version=2019-03-01`;\r\n\r\n    const result = await this.backendSrv.datasourceRequest({\r\n      url: this.props.options.url + url,\r\n      method: 'GET',\r\n    });\r\n\r\n    return ResponseParser.parseSubscriptionsForSelect(result);\r\n  };\r\n\r\n  loadWorkspaces = async (subscription: string) => {\r\n    const { azureLogAnalyticsSameAs, cloudName, logAnalyticsSubscriptionId } = this.props.options.jsonData;\r\n    let azureMonitorUrl = '',\r\n      subscriptionId = this.templateSrv.replace(subscription || this.props.options.jsonData.subscriptionId);\r\n\r\n    if (!!subscriptionId || !!azureLogAnalyticsSameAs) {\r\n      const azureCloud = cloudName || 'azuremonitor';\r\n      azureMonitorUrl = `/${azureCloud}/subscriptions`;\r\n    } else {\r\n      subscriptionId = logAnalyticsSubscriptionId;\r\n      azureMonitorUrl = `/workspacesloganalytics/subscriptions`;\r\n    }\r\n\r\n    const workspaceListUrl =\r\n      azureMonitorUrl +\r\n      `/${subscriptionId}/providers/Microsoft.OperationalInsights/workspaces?api-version=2017-04-26-preview`;\r\n\r\n    const result = await this.backendSrv.datasourceRequest({\r\n      url: this.props.options.url + workspaceListUrl,\r\n      method: 'GET',\r\n    });\r\n\r\n    return ResponseParser.parseWorkspacesForSelect(result);\r\n  };\r\n\r\n  getSubscriptions = async () => {\r\n    if (!this.hasNecessaryCredentials()) {\r\n      return;\r\n    }\r\n\r\n    const subscriptions = ((await this.loadSubscriptions()) || []) as SelectableValue[];\r\n\r\n    if (subscriptions && subscriptions.length > 0) {\r\n      this.setState({ subscriptions });\r\n\r\n      this.updateOption('subscriptionId', this.props.options.jsonData.subscriptionId || subscriptions[0].value);\r\n    }\r\n\r\n    if (this.props.options.jsonData.subscriptionId && this.props.options.jsonData.azureLogAnalyticsSameAs) {\r\n      await this.getWorkspaces();\r\n    }\r\n  };\r\n\r\n  getLogAnalyticsSubscriptions = async () => {\r\n    if (!this.logAnalyticsHasNecessaryCredentials()) {\r\n      return;\r\n    }\r\n\r\n    const logAnalyticsSubscriptions = ((await this.loadSubscriptions('workspacesloganalytics')) ||\r\n      []) as SelectableValue[];\r\n\r\n    if (logAnalyticsSubscriptions && logAnalyticsSubscriptions.length > 0) {\r\n      this.setState({ logAnalyticsSubscriptions });\r\n\r\n      this.updateOption(\r\n        'logAnalyticsSubscriptionId',\r\n        this.props.options.jsonData.logAnalyticsSubscriptionId || logAnalyticsSubscriptions[0].value\r\n      );\r\n    }\r\n\r\n    if (this.props.options.jsonData.logAnalyticsSubscriptionId) {\r\n      await this.getWorkspaces();\r\n    }\r\n  };\r\n\r\n  getWorkspaces = async () => {\r\n    const sameAs = this.props.options.jsonData.azureLogAnalyticsSameAs && this.props.options.jsonData.subscriptionId;\r\n    if (!sameAs && !this.props.options.jsonData.logAnalyticsSubscriptionId) {\r\n      return;\r\n    }\r\n\r\n    const logAnalyticsWorkspaces = await this.loadWorkspaces(\r\n      sameAs ? this.props.options.jsonData.subscriptionId : this.props.options.jsonData.logAnalyticsSubscriptionId\r\n    );\r\n\r\n    if (logAnalyticsWorkspaces.length > 0) {\r\n      this.setState({ logAnalyticsWorkspaces });\r\n\r\n      this.updateOption(\r\n        'logAnalyticsDefaultWorkspace',\r\n        this.props.options.jsonData.logAnalyticsDefaultWorkspace || logAnalyticsWorkspaces[0].value\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { subscriptions, logAnalyticsSubscriptions, logAnalyticsWorkspaces } = this.state;\r\n    const { options } = this.props;\r\n\r\n    options.jsonData.cloudName = options.jsonData.cloudName || 'azuremonitor';\r\n    options.secureJsonData = (options.secureJsonData || {}) as AzureDataSourceSecureJsonData;\r\n\r\n    return (\r\n      <>\r\n        <MonitorConfig\r\n          options={options}\r\n          subscriptions={subscriptions}\r\n          makeSameAs={this.makeSameAs}\r\n          onLoadSubscriptions={this.onLoadSubscriptions}\r\n          onUpdateOption={this.updateOption}\r\n          onUpdateSecureOption={this.updateSecureOption}\r\n          onResetOptionKey={this.resetKey}\r\n        />\r\n\r\n        <AnalyticsConfig\r\n          options={options}\r\n          workspaces={logAnalyticsWorkspaces}\r\n          subscriptions={logAnalyticsSubscriptions}\r\n          makeSameAs={this.makeSameAs}\r\n          onUpdateOptions={this.updateOptions}\r\n          onUpdateOption={this.updateOption}\r\n          onUpdateSecureOption={this.updateSecureOption}\r\n          onResetOptionKey={this.resetKey}\r\n          onLoadSubscriptions={this.onLoadSubscriptions}\r\n          onLoadWorkspaces={this.getWorkspaces}\r\n        />\r\n\r\n        <InsightsConfig options={options} onUpdateOption={this.updateOption} onResetOptionKey={this.resetKey} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ConfigEditor;\r\n","import React, { PureComponent, ChangeEvent } from 'react';\r\nimport { FormLabel, Button, Input } from '@grafana/ui';\r\nimport { AzureDataSourceSettings } from '../types';\r\n\r\nexport interface Props {\r\n  options: AzureDataSourceSettings;\r\n  onUpdateOption: (key: string, val: any, secure: boolean) => void;\r\n  onResetOptionKey: (key: string) => void;\r\n}\r\nexport class InsightsConfig extends PureComponent<Props> {\r\n  onAppInsightsAppIdChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    this.props.onUpdateOption('appInsightsAppId', event.target.value, false);\r\n  };\r\n\r\n  onAppInsightsApiKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    this.props.onUpdateOption('appInsightsApiKey', event.target.value, true);\r\n  };\r\n\r\n  onAppInsightsResetApiKey = () => {\r\n    this.props.onResetOptionKey('appInsightsApiKey');\r\n  };\r\n\r\n  render() {\r\n    const { options } = this.props;\r\n    return (\r\n      <>\r\n        <h3 className=\"page-heading\">Application Insights Details</h3>\r\n        <div className=\"gf-form-group\">\r\n          {options.secureJsonFields.appInsightsApiKey ? (\r\n            <div className=\"gf-form-inline\">\r\n              <div className=\"gf-form\">\r\n                <FormLabel className=\"width-12\">API Key</FormLabel>\r\n                <Input className=\"width-25\" placeholder=\"configured\" disabled={true} />\r\n              </div>\r\n              <div className=\"gf-form\">\r\n                <div className=\"max-width-30 gf-form-inline\">\r\n                  <Button variant=\"secondary\" type=\"button\" onClick={this.onAppInsightsResetApiKey}>\r\n                    reset\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"gf-form-inline\">\r\n              <div className=\"gf-form\">\r\n                <FormLabel className=\"width-12\">API Key</FormLabel>\r\n                <div className=\"width-15\">\r\n                  <Input\r\n                    className=\"width-30\"\r\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\r\n                    value={options.secureJsonData.appInsightsApiKey || ''}\r\n                    onChange={this.onAppInsightsApiKeyChange}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          <div className=\"gf-form-inline\">\r\n            <div className=\"gf-form\">\r\n              <FormLabel className=\"width-12\">Application ID</FormLabel>\r\n              <div className=\"width-15\">\r\n                <Input\r\n                  className=\"width-30\"\r\n                  value={options.jsonData.appInsightsAppId || ''}\r\n                  onChange={this.onAppInsightsAppIdChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InsightsConfig;\r\n","import React, { PureComponent, ChangeEvent } from 'react';\r\nimport { SelectableValue } from '@grafana/data';\r\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\r\nimport { AzureDataSourceSettings } from '../types';\r\n\r\nconst azureClouds = [\r\n  { value: 'azuremonitor', label: 'Azure' },\r\n  { value: 'govazuremonitor', label: 'Azure US Government' },\r\n  { value: 'germanyazuremonitor', label: 'Azure Germany' },\r\n  { value: 'chinaazuremonitor', label: 'Azure China' },\r\n] as SelectableValue[];\r\n\r\nexport interface Props {\r\n  options: AzureDataSourceSettings;\r\n  subscriptions: SelectableValue[];\r\n  makeSameAs: (updatedClientSecret?: string) => void;\r\n  onUpdateOption: (key: string, val: any) => void;\r\n  onUpdateSecureOption: (key: string, val: any) => void;\r\n  onResetOptionKey: (key: string) => void;\r\n  onLoadSubscriptions: () => void;\r\n}\r\n\r\nexport class MonitorConfig extends PureComponent<Props> {\r\n  onAzureCloudSelect = (cloudName: SelectableValue<string>) => {\r\n    this.props.onUpdateOption('cloudName', cloudName.value);\r\n  };\r\n\r\n  onTenantIdChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    this.props.onUpdateOption('tenantId', event.target.value);\r\n  };\r\n\r\n  onClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    this.props.onUpdateOption('clientId', event.target.value);\r\n  };\r\n\r\n  onClientSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const { options, makeSameAs } = this.props;\r\n\r\n    if (options.jsonData.azureLogAnalyticsSameAs && event.target.value) {\r\n      makeSameAs(event.target.value);\r\n    } else {\r\n      this.props.onUpdateSecureOption('clientSecret', event.target.value);\r\n    }\r\n  };\r\n\r\n  onResetClientSecret = () => {\r\n    this.props.onResetOptionKey('clientSecret');\r\n  };\r\n\r\n  onSubscriptionSelect = (subscription: SelectableValue<string>) => {\r\n    this.props.onUpdateOption('subscriptionId', subscription.value);\r\n  };\r\n\r\n  render() {\r\n    const { options, subscriptions } = this.props;\r\n    return (\r\n      <>\r\n        <h3 className=\"page-heading\">Azure Monitor Details</h3>\r\n        <AzureCredentialsForm\r\n          selectedAzureCloud={options.jsonData.cloudName || 'azuremonitor'}\r\n          azureCloudOptions={azureClouds}\r\n          subscriptionOptions={subscriptions}\r\n          selectedSubscription={options.jsonData.subscriptionId}\r\n          tenantId={options.jsonData.tenantId}\r\n          clientId={options.jsonData.clientId}\r\n          clientSecret={options.secureJsonData.clientSecret}\r\n          clientSecretConfigured={options.secureJsonFields.clientSecret}\r\n          onAzureCloudChange={this.onAzureCloudSelect}\r\n          onSubscriptionSelectChange={this.onSubscriptionSelect}\r\n          onTenantIdChange={this.onTenantIdChange}\r\n          onClientIdChange={this.onClientIdChange}\r\n          onClientSecretChange={this.onClientSecretChange}\r\n          onResetClientSecret={this.onResetClientSecret}\r\n          onLoadSubscriptions={this.props.onLoadSubscriptions}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MonitorConfig;\r\n","import _ from 'lodash';\r\nimport AzureMonitorDatasource from './azure_monitor/azure_monitor_datasource';\r\nimport AppInsightsDatasource from './app_insights/app_insights_datasource';\r\nimport AzureLogAnalyticsDatasource from './azure_log_analytics/azure_log_analytics_datasource';\r\nimport { AzureMonitorQuery, AzureDataSourceJsonData } from './types';\r\nimport { DataSourceApi, DataQueryRequest, DataSourceInstanceSettings } from '@grafana/data';\r\nimport { BackendSrv } from 'app/core/services/backend_srv';\r\nimport { TemplateSrv } from 'app/features/templating/template_srv';\r\n\r\nexport default class Datasource extends DataSourceApi<AzureMonitorQuery, AzureDataSourceJsonData> {\r\n  azureMonitorDatasource: AzureMonitorDatasource;\r\n  appInsightsDatasource: AppInsightsDatasource;\r\n  azureLogAnalyticsDatasource: AzureLogAnalyticsDatasource;\r\n\r\n  /** @ngInject */\r\n  constructor(\r\n    instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\r\n    private backendSrv: BackendSrv,\r\n    private templateSrv: TemplateSrv\r\n  ) {\r\n    super(instanceSettings);\r\n    this.azureMonitorDatasource = new AzureMonitorDatasource(instanceSettings, this.backendSrv, this.templateSrv);\r\n    this.appInsightsDatasource = new AppInsightsDatasource(instanceSettings, this.backendSrv, this.templateSrv);\r\n\r\n    this.azureLogAnalyticsDatasource = new AzureLogAnalyticsDatasource(\r\n      instanceSettings,\r\n      this.backendSrv,\r\n      this.templateSrv\r\n    );\r\n  }\r\n\r\n  async query(options: DataQueryRequest<AzureMonitorQuery>) {\r\n    const promises: any[] = [];\r\n    const azureMonitorOptions = _.cloneDeep(options);\r\n    const appInsightsOptions = _.cloneDeep(options);\r\n    const azureLogAnalyticsOptions = _.cloneDeep(options);\r\n\r\n    azureMonitorOptions.targets = _.filter(azureMonitorOptions.targets, ['queryType', 'Azure Monitor']);\r\n    appInsightsOptions.targets = _.filter(appInsightsOptions.targets, ['queryType', 'Application Insights']);\r\n    azureLogAnalyticsOptions.targets = _.filter(azureLogAnalyticsOptions.targets, ['queryType', 'Azure Log Analytics']);\r\n\r\n    if (azureMonitorOptions.targets.length > 0) {\r\n      const amPromise = this.azureMonitorDatasource.query(azureMonitorOptions);\r\n      if (amPromise) {\r\n        promises.push(amPromise);\r\n      }\r\n    }\r\n\r\n    if (appInsightsOptions.targets.length > 0) {\r\n      const aiPromise = this.appInsightsDatasource.query(appInsightsOptions);\r\n      if (aiPromise) {\r\n        promises.push(aiPromise);\r\n      }\r\n    }\r\n\r\n    if (azureLogAnalyticsOptions.targets.length > 0) {\r\n      const alaPromise = this.azureLogAnalyticsDatasource.query(azureLogAnalyticsOptions);\r\n      if (alaPromise) {\r\n        promises.push(alaPromise);\r\n      }\r\n    }\r\n\r\n    if (promises.length === 0) {\r\n      return Promise.resolve({ data: [] });\r\n    }\r\n\r\n    return Promise.all(promises).then(results => {\r\n      return { data: _.flatten(results) };\r\n    });\r\n  }\r\n\r\n  async annotationQuery(options: any) {\r\n    return this.azureLogAnalyticsDatasource.annotationQuery(options);\r\n  }\r\n\r\n  async metricFindQuery(query: string) {\r\n    if (!query) {\r\n      return Promise.resolve([]);\r\n    }\r\n\r\n    const aiResult = this.appInsightsDatasource.metricFindQuery(query);\r\n    if (aiResult) {\r\n      return aiResult;\r\n    }\r\n\r\n    const amResult = this.azureMonitorDatasource.metricFindQuery(query);\r\n    if (amResult) {\r\n      return amResult;\r\n    }\r\n\r\n    const alaResult = this.azureLogAnalyticsDatasource.metricFindQuery(query);\r\n    if (alaResult) {\r\n      return alaResult;\r\n    }\r\n\r\n    return Promise.resolve([]);\r\n  }\r\n\r\n  async testDatasource() {\r\n    const promises: any[] = [];\r\n\r\n    if (this.azureMonitorDatasource.isConfigured()) {\r\n      promises.push(this.azureMonitorDatasource.testDatasource());\r\n    }\r\n\r\n    if (this.appInsightsDatasource.isConfigured()) {\r\n      promises.push(this.appInsightsDatasource.testDatasource());\r\n    }\r\n\r\n    if (this.azureLogAnalyticsDatasource.isConfigured()) {\r\n      promises.push(this.azureLogAnalyticsDatasource.testDatasource());\r\n    }\r\n\r\n    if (promises.length === 0) {\r\n      return {\r\n        status: 'error',\r\n        message: `Nothing configured. At least one of the API's must be configured.`,\r\n        title: 'Error',\r\n      };\r\n    }\r\n\r\n    return Promise.all(promises).then(results => {\r\n      let status = 'success';\r\n      let message = '';\r\n\r\n      for (let i = 0; i < results.length; i++) {\r\n        if (results[i].status !== 'success') {\r\n          status = results[i].status;\r\n        }\r\n        message += `${i + 1}. ${results[i].message} `;\r\n      }\r\n\r\n      return {\r\n        status: status,\r\n        message: message,\r\n        title: _.upperFirst(status),\r\n      };\r\n    });\r\n  }\r\n\r\n  /* Azure Monitor REST API methods */\r\n  getResourceGroups(subscriptionId: string) {\r\n    return this.azureMonitorDatasource.getResourceGroups(subscriptionId);\r\n  }\r\n\r\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\r\n    return this.azureMonitorDatasource.getMetricDefinitions(subscriptionId, resourceGroup);\r\n  }\r\n\r\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string) {\r\n    return this.azureMonitorDatasource.getResourceNames(subscriptionId, resourceGroup, metricDefinition);\r\n  }\r\n\r\n  getMetricNames(\r\n    subscriptionId: string,\r\n    resourceGroup: string,\r\n    metricDefinition: string,\r\n    resourceName: string,\r\n    metricNamespace: string\r\n  ) {\r\n    return this.azureMonitorDatasource.getMetricNames(\r\n      subscriptionId,\r\n      resourceGroup,\r\n      metricDefinition,\r\n      resourceName,\r\n      metricNamespace\r\n    );\r\n  }\r\n\r\n  getMetricNamespaces(subscriptionId: string, resourceGroup: string, metricDefinition: string, resourceName: string) {\r\n    return this.azureMonitorDatasource.getMetricNamespaces(\r\n      subscriptionId,\r\n      resourceGroup,\r\n      metricDefinition,\r\n      resourceName\r\n    );\r\n  }\r\n\r\n  getMetricMetadata(\r\n    subscriptionId: string,\r\n    resourceGroup: string,\r\n    metricDefinition: string,\r\n    resourceName: string,\r\n    metricNamespace: string,\r\n    metricName: string\r\n  ) {\r\n    return this.azureMonitorDatasource.getMetricMetadata(\r\n      subscriptionId,\r\n      resourceGroup,\r\n      metricDefinition,\r\n      resourceName,\r\n      metricNamespace,\r\n      metricName\r\n    );\r\n  }\r\n\r\n  /* Application Insights API method */\r\n  getAppInsightsMetricNames() {\r\n    return this.appInsightsDatasource.getMetricNames();\r\n  }\r\n\r\n  getAppInsightsMetricMetadata(metricName: string) {\r\n    return this.appInsightsDatasource.getMetricMetadata(metricName);\r\n  }\r\n\r\n  getAppInsightsColumns(refId: string | number) {\r\n    return this.appInsightsDatasource.logAnalyticsColumns[refId];\r\n  }\r\n\r\n  /*Azure Log Analytics */\r\n  getAzureLogAnalyticsWorkspaces(subscriptionId: string) {\r\n    return this.azureLogAnalyticsDatasource.getWorkspaces(subscriptionId);\r\n  }\r\n\r\n  getSubscriptions() {\r\n    return this.azureMonitorDatasource.getSubscriptions();\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport Plain from 'slate-plain-serializer';\r\n\r\nimport QueryField from './query_field';\r\nimport debounce from 'lodash/debounce';\r\nimport { DOMUtil } from '@grafana/ui';\r\nimport { Editor as CoreEditor } from 'slate';\r\n\r\nimport { KEYWORDS, functionTokens, operatorTokens, grafanaMacros } from './kusto/kusto';\r\n// import '../sass/editor.base.scss';\r\n\r\nconst TYPEAHEAD_DELAY = 100;\r\n\r\ninterface Suggestion {\r\n  text: string;\r\n  deleteBackwards?: number;\r\n  type?: string;\r\n}\r\n\r\ninterface SuggestionGroup {\r\n  label: string;\r\n  items: Suggestion[];\r\n  prefixMatch?: boolean;\r\n  skipFilter?: boolean;\r\n}\r\n\r\ninterface KustoSchema {\r\n  Databases: {\r\n    Default?: KustoDBSchema;\r\n  };\r\n  Plugins?: any[];\r\n}\r\n\r\ninterface KustoDBSchema {\r\n  Name?: string;\r\n  Functions?: any;\r\n  Tables?: any;\r\n}\r\n\r\nconst defaultSchema: any = () => ({\r\n  Databases: {\r\n    Default: {},\r\n  },\r\n});\r\n\r\nconst cleanText = (s: string) => s.replace(/[{}[\\]=\"(),!~+\\-*/^%]/g, '').trim();\r\nconst wrapText = (text: string) => ({ text });\r\n\r\nexport default class KustoQueryField extends QueryField {\r\n  fields: any;\r\n  events: any;\r\n  schema: KustoSchema;\r\n\r\n  constructor(props: any, context: any) {\r\n    super(props, context);\r\n    this.schema = defaultSchema();\r\n\r\n    this.onTypeahead = debounce(this.onTypeahead, TYPEAHEAD_DELAY);\r\n  }\r\n\r\n  componentDidMount() {\r\n    super.componentDidMount();\r\n    this.fetchSchema();\r\n  }\r\n\r\n  onTypeahead = (force = false) => {\r\n    const selection = window.getSelection();\r\n    if (selection.anchorNode) {\r\n      const wrapperNode = selection.anchorNode.parentElement;\r\n      if (wrapperNode === null) {\r\n        return;\r\n      }\r\n      const editorNode = wrapperNode.closest('.slate-query-field');\r\n      if (!editorNode || this.state.value.isBlurred) {\r\n        // Not inside this editor\r\n        return;\r\n      }\r\n\r\n      // DOM ranges\r\n      const range = selection.getRangeAt(0);\r\n      const text = selection.anchorNode.textContent;\r\n      if (text === null) {\r\n        return;\r\n      }\r\n      const offset = range.startOffset;\r\n      let prefix = cleanText(text.substr(0, offset));\r\n\r\n      // Model ranges\r\n      const modelOffset = this.state.value.anchorOffset;\r\n      const modelPrefix = this.state.value.anchorText.text.slice(0, modelOffset);\r\n\r\n      // Determine candidates by context\r\n      let suggestionGroups: SuggestionGroup[] = [];\r\n      const wrapperClasses = wrapperNode.classList;\r\n      let typeaheadContext: string | null = null;\r\n\r\n      // Built-in functions\r\n      if (wrapperClasses.contains('function-context')) {\r\n        typeaheadContext = 'context-function';\r\n        suggestionGroups = this.getColumnSuggestions();\r\n\r\n        // where\r\n      } else if (modelPrefix.match(/(where\\s(\\w+\\b)?$)/i)) {\r\n        typeaheadContext = 'context-where';\r\n        suggestionGroups = this.getColumnSuggestions();\r\n\r\n        // summarize by\r\n      } else if (modelPrefix.match(/(summarize\\s(\\w+\\b)?$)/i)) {\r\n        typeaheadContext = 'context-summarize';\r\n        suggestionGroups = this.getFunctionSuggestions();\r\n      } else if (modelPrefix.match(/(summarize\\s(.+\\s)?by\\s+([^,\\s]+,\\s*)*([^,\\s]+\\b)?$)/i)) {\r\n        typeaheadContext = 'context-summarize-by';\r\n        suggestionGroups = this.getColumnSuggestions();\r\n\r\n        // order by, top X by, ... by ...\r\n      } else if (modelPrefix.match(/(by\\s+([^,\\s]+,\\s*)*([^,\\s]+\\b)?$)/i)) {\r\n        typeaheadContext = 'context-by';\r\n        suggestionGroups = this.getColumnSuggestions();\r\n\r\n        // join\r\n      } else if (modelPrefix.match(/(on\\s(.+\\b)?$)/i)) {\r\n        typeaheadContext = 'context-join-on';\r\n        suggestionGroups = this.getColumnSuggestions();\r\n      } else if (modelPrefix.match(/(join\\s+(\\(\\s+)?(\\w+\\b)?$)/i)) {\r\n        typeaheadContext = 'context-join';\r\n        suggestionGroups = this.getTableSuggestions();\r\n\r\n        // distinct\r\n      } else if (modelPrefix.match(/(distinct\\s(.+\\b)?$)/i)) {\r\n        typeaheadContext = 'context-distinct';\r\n        suggestionGroups = this.getColumnSuggestions();\r\n\r\n        // database()\r\n      } else if (modelPrefix.match(/(database\\(\\\"(\\w+)\\\"\\)\\.(.+\\b)?$)/i)) {\r\n        typeaheadContext = 'context-database-table';\r\n        const db = this.getDBFromDatabaseFunction(modelPrefix);\r\n        console.log(db);\r\n        suggestionGroups = this.getTableSuggestions(db);\r\n        prefix = prefix.replace('.', '');\r\n\r\n        // new\r\n      } else if (normalizeQuery(Plain.serialize(this.state.value)).match(/^\\s*\\w*$/i)) {\r\n        typeaheadContext = 'context-new';\r\n        if (this.schema) {\r\n          suggestionGroups = this.getInitialSuggestions();\r\n        } else {\r\n          this.fetchSchema();\r\n          setTimeout(this.onTypeahead, 0);\r\n          return;\r\n        }\r\n\r\n        // built-in\r\n      } else if (prefix && !wrapperClasses.contains('argument') && !force) {\r\n        // Use only last typed word as a prefix for searching\r\n        if (modelPrefix.match(/\\s$/i)) {\r\n          prefix = '';\r\n          return;\r\n        }\r\n        prefix = getLastWord(prefix);\r\n        typeaheadContext = 'context-builtin';\r\n        suggestionGroups = this.getKeywordSuggestions();\r\n      } else if (force === true) {\r\n        typeaheadContext = 'context-builtin-forced';\r\n        if (modelPrefix.match(/\\s$/i)) {\r\n          prefix = '';\r\n        }\r\n        suggestionGroups = this.getKeywordSuggestions();\r\n      }\r\n\r\n      let results = 0;\r\n      prefix = prefix.toLowerCase();\r\n      const filteredSuggestions = suggestionGroups\r\n        .map(group => {\r\n          if (group.items && prefix && !group.skipFilter) {\r\n            group.items = group.items.filter(c => c.text.length >= prefix.length);\r\n            if (group.prefixMatch) {\r\n              group.items = group.items.filter(c => c.text.toLowerCase().indexOf(prefix) === 0);\r\n            } else {\r\n              group.items = group.items.filter(c => c.text.toLowerCase().indexOf(prefix) > -1);\r\n            }\r\n          }\r\n          results += group.items.length;\r\n          return group;\r\n        })\r\n        .filter(group => group.items.length > 0);\r\n\r\n      // console.log('onTypeahead', selection.anchorNode, wrapperClasses, text, offset, prefix, typeaheadContext);\r\n      // console.log('onTypeahead', prefix, typeaheadContext, force);\r\n\r\n      this.setState({\r\n        typeaheadPrefix: prefix,\r\n        typeaheadContext,\r\n        typeaheadText: text,\r\n        suggestions: results > 0 ? filteredSuggestions : [],\r\n      });\r\n    }\r\n  };\r\n\r\n  applyTypeahead = (editor: CoreEditor, suggestion: { text: any; type: string; deleteBackwards: any }): CoreEditor => {\r\n    const { typeaheadPrefix, typeaheadContext, typeaheadText } = this.state;\r\n    let suggestionText = suggestion.text || suggestion;\r\n    const move = 0;\r\n\r\n    // Modify suggestion based on context\r\n\r\n    const nextChar = DOMUtil.getNextCharacter();\r\n    if (suggestion.type === 'function') {\r\n      if (!nextChar || nextChar !== '(') {\r\n        suggestionText += '(';\r\n      }\r\n    } else if (typeaheadContext === 'context-function') {\r\n      if (!nextChar || nextChar !== ')') {\r\n        suggestionText += ')';\r\n      }\r\n    } else {\r\n      if (!nextChar || nextChar !== ' ') {\r\n        suggestionText += ' ';\r\n      }\r\n    }\r\n\r\n    // Remove the current, incomplete text and replace it with the selected suggestion\r\n    const backward = suggestion.deleteBackwards || typeaheadPrefix.length;\r\n    const text = cleanText(typeaheadText);\r\n    const suffixLength = text.length - typeaheadPrefix.length;\r\n    const offset = typeaheadText.indexOf(typeaheadPrefix);\r\n    const midWord = typeaheadPrefix && ((suffixLength > 0 && offset > -1) || suggestionText === typeaheadText);\r\n    const forward = midWord ? suffixLength + offset : 0;\r\n\r\n    this.resetTypeahead(() =>\r\n      editor\r\n        .deleteBackward(backward)\r\n        .deleteForward(forward)\r\n        .insertText(suggestionText)\r\n        .moveForward(move)\r\n        .focus()\r\n    );\r\n\r\n    return editor;\r\n  };\r\n\r\n  // private _getFieldsSuggestions(): SuggestionGroup[] {\r\n  //   return [\r\n  //     {\r\n  //       prefixMatch: true,\r\n  //       label: 'Fields',\r\n  //       items: this.fields.map(wrapText)\r\n  //     },\r\n  //     {\r\n  //       prefixMatch: true,\r\n  //       label: 'Variables',\r\n  //       items: this.props.templateVariables.map(wrapText)\r\n  //     }\r\n  //   ];\r\n  // }\r\n\r\n  // private _getAfterFromSuggestions(): SuggestionGroup[] {\r\n  //   return [\r\n  //     {\r\n  //       skipFilter: true,\r\n  //       label: 'Events',\r\n  //       items: this.events.map(wrapText)\r\n  //     },\r\n  //     {\r\n  //       prefixMatch: true,\r\n  //       label: 'Variables',\r\n  //       items: this.props.templateVariables\r\n  //         .map(wrapText)\r\n  //         .map(suggestion => {\r\n  //           suggestion.deleteBackwards = 0;\r\n  //           return suggestion;\r\n  //         })\r\n  //     }\r\n  //   ];\r\n  // }\r\n\r\n  // private _getAfterSelectSuggestions(): SuggestionGroup[] {\r\n  //   return [\r\n  //     {\r\n  //       prefixMatch: true,\r\n  //       label: 'Fields',\r\n  //       items: this.fields.map(wrapText)\r\n  //     },\r\n  //     {\r\n  //       prefixMatch: true,\r\n  //       label: 'Functions',\r\n  //       items: FUNCTIONS.map((s: any) => { s.type = 'function'; return s; })\r\n  //     },\r\n  //     {\r\n  //       prefixMatch: true,\r\n  //       label: 'Variables',\r\n  //       items: this.props.templateVariables.map(wrapText)\r\n  //     }\r\n  //   ];\r\n  // }\r\n\r\n  private getInitialSuggestions(): SuggestionGroup[] {\r\n    return this.getTableSuggestions();\r\n  }\r\n\r\n  private getKeywordSuggestions(): SuggestionGroup[] {\r\n    return [\r\n      {\r\n        prefixMatch: true,\r\n        label: 'Keywords',\r\n        items: KEYWORDS.map(wrapText),\r\n      },\r\n      {\r\n        prefixMatch: true,\r\n        label: 'Operators',\r\n        items: operatorTokens,\r\n      },\r\n      {\r\n        prefixMatch: true,\r\n        label: 'Functions',\r\n        items: functionTokens.map((s: any) => {\r\n          s.type = 'function';\r\n          return s;\r\n        }),\r\n      },\r\n      {\r\n        prefixMatch: true,\r\n        label: 'Macros',\r\n        items: grafanaMacros.map((s: any) => {\r\n          s.type = 'function';\r\n          return s;\r\n        }),\r\n      },\r\n      {\r\n        prefixMatch: true,\r\n        label: 'Tables',\r\n        items: _.map(this.schema.Databases.Default.Tables, (t: any) => ({ text: t.Name })),\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getFunctionSuggestions(): SuggestionGroup[] {\r\n    return [\r\n      {\r\n        prefixMatch: true,\r\n        label: 'Functions',\r\n        items: functionTokens.map((s: any) => {\r\n          s.type = 'function';\r\n          return s;\r\n        }),\r\n      },\r\n      {\r\n        prefixMatch: true,\r\n        label: 'Macros',\r\n        items: grafanaMacros.map((s: any) => {\r\n          s.type = 'function';\r\n          return s;\r\n        }),\r\n      },\r\n    ];\r\n  }\r\n\r\n  getTableSuggestions(db = 'Default'): SuggestionGroup[] {\r\n    // @ts-ignore\r\n    if (this.schema.Databases[db]) {\r\n      return [\r\n        {\r\n          prefixMatch: true,\r\n          label: 'Tables',\r\n          // @ts-ignore\r\n          items: _.map(this.schema.Databases[db].Tables, (t: any) => ({ text: t.Name })),\r\n        },\r\n      ];\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private getColumnSuggestions(): SuggestionGroup[] {\r\n    const table = this.getTableFromContext();\r\n    if (table) {\r\n      const tableSchema = this.schema.Databases.Default.Tables[table];\r\n      if (tableSchema) {\r\n        return [\r\n          {\r\n            prefixMatch: true,\r\n            label: 'Fields',\r\n            items: _.map(tableSchema.OrderedColumns, (f: any) => ({\r\n              text: f.Name,\r\n              hint: f.Type,\r\n            })),\r\n          },\r\n        ];\r\n      }\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private getTableFromContext() {\r\n    const query = Plain.serialize(this.state.value);\r\n    const tablePattern = /^\\s*(\\w+)\\s*|/g;\r\n    const normalizedQuery = normalizeQuery(query);\r\n    const match = tablePattern.exec(normalizedQuery);\r\n    if (match && match.length > 1 && match[0] && match[1]) {\r\n      return match[1];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private getDBFromDatabaseFunction(prefix: string) {\r\n    const databasePattern = /database\\(\\\"(\\w+)\\\"\\)/gi;\r\n    const match = databasePattern.exec(prefix);\r\n    if (match && match.length > 1 && match[0] && match[1]) {\r\n      return match[1];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async fetchSchema() {\r\n    let schema = await this.props.getSchema();\r\n    if (schema) {\r\n      if (schema.Type === 'AppInsights') {\r\n        schema = castSchema(schema);\r\n      }\r\n      this.schema = schema;\r\n    } else {\r\n      this.schema = defaultSchema();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Cast schema from App Insights to default Kusto schema\r\n */\r\nfunction castSchema(schema: any) {\r\n  const defaultSchemaTemplate = defaultSchema();\r\n  defaultSchemaTemplate.Databases.Default = schema;\r\n  return defaultSchemaTemplate;\r\n}\r\n\r\nfunction normalizeQuery(query: string): string {\r\n  const commentPattern = /\\/\\/.*$/gm;\r\n  let normalizedQuery = query.replace(commentPattern, '');\r\n  normalizedQuery = normalizedQuery.replace('\\n', ' ');\r\n  return normalizedQuery;\r\n}\r\n\r\nfunction getLastWord(str: string): string {\r\n  const lastWordPattern = /(?:.*\\s)?([^\\s]+\\s*)$/gi;\r\n  const match = lastWordPattern.exec(str);\r\n  if (match && match.length > 1) {\r\n    return match[1];\r\n  }\r\n  return '';\r\n}\r\n","import KustoQueryField from './KustoQueryField';\r\nimport Kusto from './kusto/kusto';\r\n\r\nimport React, { Component } from 'react';\r\nimport coreModule from 'app/core/core_module';\r\n\r\ninterface EditorProps {\r\n  index: number;\r\n  placeholder?: string;\r\n  change: (value: string, index: number) => void;\r\n  variables: () => string[] | string[];\r\n  getSchema?: () => Promise<any>;\r\n  execute?: () => void;\r\n  query?: string;\r\n}\r\n\r\nclass Editor extends Component<EditorProps, any> {\r\n  static defaultProps = {\r\n    placeholder: 'Enter a query',\r\n  };\r\n\r\n  constructor(props: EditorProps) {\r\n    super(props);\r\n    this.state = {\r\n      edited: false,\r\n      query: props.query || '',\r\n    };\r\n  }\r\n\r\n  onChangeQuery = (value: any) => {\r\n    const { index, change } = this.props;\r\n    const { query } = this.state;\r\n    const edited = query !== value;\r\n    this.setState({ edited, query: value });\r\n    if (change) {\r\n      change(value, index);\r\n    }\r\n  };\r\n\r\n  onPressEnter = () => {\r\n    const { execute } = this.props;\r\n    if (execute) {\r\n      execute();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { variables, getSchema, placeholder } = this.props;\r\n    const { edited, query } = this.state;\r\n\r\n    return (\r\n      <div className=\"gf-form-input\" style={{ height: 'auto' }}>\r\n        <KustoQueryField\r\n          initialQuery={edited ? null : query}\r\n          onPressEnter={this.onPressEnter}\r\n          onQueryChange={this.onChangeQuery}\r\n          prismLanguage=\"kusto\"\r\n          prismDefinition={Kusto}\r\n          placeholder={placeholder}\r\n          templateVariables={variables}\r\n          getSchema={getSchema}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ncoreModule.directive('kustoEditor', [\r\n  'reactDirective',\r\n  reactDirective => {\r\n    return reactDirective(Editor, [\r\n      'change',\r\n      'database',\r\n      'execute',\r\n      'query',\r\n      'variables',\r\n      'placeholder',\r\n      ['getSchema', { watchDepth: 'reference' }],\r\n    ]);\r\n  },\r\n]);\r\n","/* tslint:disable:max-line-length */\r\nexport const operatorTokens = [\r\n  { text: '!between', hint: 'Matches the input that is outside the inclusive range.' },\r\n  { text: 'as', hint: \"Binds a name to the operator's input tabular expression.\" },\r\n  { text: 'between', hint: 'Matches the input that is inside the inclusive range.' },\r\n  {\r\n    text: 'consume',\r\n    hint:\r\n      'The `consume` operator consumes the tabular data stream handed to it. It is\\r\\nmostly used for triggering the query side-effect without actually returning\\r\\nthe results back to the caller.',\r\n  },\r\n  { text: 'count', hint: 'Returns the number of records in the input record set.' },\r\n  { text: 'datatable', hint: 'Returns a table whose schema and values are defined in the query itself.' },\r\n  {\r\n    text: 'distinct',\r\n    hint: 'Produces a table with the distinct combination of the provided columns of the input table.',\r\n  },\r\n  { text: 'evaluate', hint: 'Invokes a service-side query extension (plugin).' },\r\n  { text: 'extend', hint: 'Create calculated columns and append them to the result set.' },\r\n  {\r\n    text: 'externaldata',\r\n    hint:\r\n      'Returns a table whose schema is defined in the query itself, and whose data is read from an external raw file.',\r\n  },\r\n  {\r\n    text: 'facet',\r\n    hint:\r\n      'Returns a set of tables, one for each specified column.\\r\\nEach table specifies the list of values taken by its column.\\r\\nAn additional table can be created by using the `with` clause.',\r\n  },\r\n  { text: 'find', hint: 'Finds rows that match a predicate across a set of tables.' },\r\n  { text: 'fork', hint: 'Runs multiple consumer operators in parallel.' },\r\n  { text: 'getschema', hint: 'Produce a table that represents a tabular schema of the input.' },\r\n  { text: 'in', hint: 'Filters a recordset based on the provided set of values.' },\r\n  { text: 'invoke', hint: 'Invokes lambda that receives the source of `invoke` as tabular parameter argument.' },\r\n  {\r\n    text: 'join',\r\n    hint:\r\n      'Merge the rows of two tables to form a new table by matching values of the specified column(s) from each table.',\r\n  },\r\n  { text: 'limit', hint: 'Return up to the specified number of rows.' },\r\n  { text: 'make-series', hint: 'Create series of specified aggregated values along specified axis.' },\r\n  { text: 'mvexpand', hint: 'Expands multi-value array or property bag.' },\r\n  { text: 'order', hint: 'Sort the rows of the input table into order by one or more columns.' },\r\n  { text: 'parse', hint: 'Evaluates a string expression and parses its value into one or more calculated columns.' },\r\n  {\r\n    text: 'print',\r\n    hint:\r\n      'Evaluates one or more scalar expressions and inserts the results (as a single-row table with as many columns as there are expressions) into the output.',\r\n  },\r\n  { text: 'project', hint: 'Select the columns to include, rename or drop, and insert new computed columns.' },\r\n  { text: 'project-away', hint: 'Select what  columns to exclude from the input.' },\r\n  { text: 'project-rename', hint: 'Renames columns in the result output.' },\r\n  { text: 'range', hint: 'Generates a single-column table of values.' },\r\n  { text: 'reduce', hint: 'Groups a set of strings together based on values similarity.' },\r\n  { text: 'render', hint: 'Instructs the user agent to render the results of the query in a particular way.' },\r\n  { text: 'sample', hint: 'Returns up to the specified number of random rows from the input table.' },\r\n  {\r\n    text: 'sample-distinct',\r\n    hint:\r\n      'Returns a single column that contains up to the specified number of distinct values of the requested column.',\r\n  },\r\n  { text: 'search', hint: 'The search operator provides a multi-table/multi-column search experience.' },\r\n  { text: 'serialize', hint: 'Marks that order of the input row set is safe for window functions usage.' },\r\n  { text: 'sort', hint: 'Sort the rows of the input table into order by one or more columns.' },\r\n  { text: 'summarize', hint: 'Produces a table that aggregates the content of the input table.' },\r\n  { text: 'take', hint: 'Return up to the specified number of rows.' },\r\n  { text: 'top', hint: 'Returns the first *N* records sorted by the specified columns.' },\r\n  {\r\n    text: 'top-hitters',\r\n    hint: 'Returns an approximation of the first *N* results (assuming skewed distribution of the input).',\r\n  },\r\n  {\r\n    text: 'top-nested',\r\n    hint: 'Produces hierarchical top results, where each level is a drill-down based on previous level values.',\r\n  },\r\n  { text: 'union', hint: 'Takes two or more tables and returns the rows of all of them.' },\r\n  { text: 'where', hint: 'Filters a table to the subset of rows that satisfy a predicate.' },\r\n];\r\n\r\nexport const functionTokens = [\r\n  { text: 'abs', hint: 'Calculates the absolute value of the input.' },\r\n  {\r\n    text: 'acos',\r\n    hint:\r\n      'Returns the angle whose cosine is the specified number (the inverse operation of [`cos()`](cosfunction.md)) .',\r\n  },\r\n  { text: 'ago', hint: 'Subtracts the given timespan from the current UTC clock time.' },\r\n  { text: 'any', hint: 'Returns random non-empty value from the specified expression values.' },\r\n  {\r\n    text: 'arg_max',\r\n    hint:\r\n      'Finds a row in the group that maximizes *ExprToMaximize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\r\n  },\r\n  {\r\n    text: 'arg_min',\r\n    hint:\r\n      'Finds a row in the group that minimizes *ExprToMinimize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\r\n  },\r\n  {\r\n    text: 'argmax',\r\n    hint:\r\n      'Finds a row in the group that maximizes *ExprToMaximize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\r\n  },\r\n  {\r\n    text: 'argmin',\r\n    hint:\r\n      'Finds a row in the group that minimizes *ExprToMinimize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\r\n  },\r\n  { text: 'array_concat', hint: 'Concatenates a number of dynamic arrays to a single array.' },\r\n  { text: 'array_length', hint: 'Calculates the number of elements in a dynamic array.' },\r\n  { text: 'array_slice', hint: 'Extracts a slice of a dynamic array.' },\r\n  {\r\n    text: 'array_split',\r\n    hint:\r\n      'Splits an array to multiple arrays according to the split indices and packs the generated array in a dynamic array.',\r\n  },\r\n  {\r\n    text: 'asin',\r\n    hint: 'Returns the angle whose sine is the specified number (the inverse operation of [`sin()`](sinfunction.md)) .',\r\n  },\r\n  {\r\n    text: 'assert',\r\n    hint: 'Checks for a condition; if the condition is false, outputs error messages and fails the query.',\r\n  },\r\n  {\r\n    text: 'atan',\r\n    hint:\r\n      'Returns the angle whose tangent is the specified number (the inverse operation of [`tan()`](tanfunction.md)) .',\r\n  },\r\n  {\r\n    text: 'atan2',\r\n    hint:\r\n      'Calculates the angle, in radians, between the positive x-axis and the ray from the origin to the point (y, x).',\r\n  },\r\n  { text: 'avg', hint: 'Calculates the average of *Expr* across the group.' },\r\n  {\r\n    text: 'avgif',\r\n    hint:\r\n      'Calculates the [average](avg-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\r\n  },\r\n  { text: 'bag_keys', hint: 'Enumerates all the root keys in a dynamic property-bag object.' },\r\n  { text: 'base64_decodestring', hint: 'Decodes a base64 string to a UTF-8 string' },\r\n  { text: 'base64_encodestring', hint: 'Encodes a string as base64 string' },\r\n  { text: 'beta_cdf', hint: 'Returns the standard cumulative beta distribution function.' },\r\n  { text: 'beta_inv', hint: 'Returns the inverse of the beta cumulative probability beta density function.' },\r\n  { text: 'beta_pdf', hint: 'Returns the probability density beta function.' },\r\n  { text: 'bin', hint: 'Rounds values down to an integer multiple of a given bin size.' },\r\n  {\r\n    text: 'bin_at',\r\n    hint:\r\n      \"Rounds values down to a fixed-size 'bin', with control over the bin's starting point.\\r\\n(See also [`bin function`](./binfunction.md).)\",\r\n  },\r\n  {\r\n    text: 'bin_auto',\r\n    hint:\r\n      \"Rounds values down to a fixed-size 'bin', with control over the bin size and starting point provided by a query property.\",\r\n  },\r\n  { text: 'binary_and', hint: 'Returns a result of the bitwise `and` operation between two values.' },\r\n  { text: 'binary_not', hint: 'Returns a bitwise negation of the input value.' },\r\n  { text: 'binary_or', hint: 'Returns a result of the bitwise `or` operation of the two values.' },\r\n  { text: 'binary_shift_left', hint: 'Returns binary shift left operation on a pair of numbers.' },\r\n  { text: 'binary_shift_right', hint: 'Returns binary shift right operation on a pair of numbers.' },\r\n  { text: 'binary_xor', hint: 'Returns a result of the bitwise `xor` operation of the two values.' },\r\n  { text: 'buildschema', hint: 'Returns the minimal schema that admits all values of *DynamicExpr*.' },\r\n  {\r\n    text: 'case',\r\n    hint: 'Evaluates a list of predicates and returns the first result expression whose predicate is satisfied.',\r\n  },\r\n  {\r\n    text: 'ceiling',\r\n    hint: 'Calculates the smallest integer greater than, or equal to, the specified numeric expression.',\r\n  },\r\n  { text: 'cluster', hint: 'Changes the reference of the query to a remote cluster.' },\r\n  {\r\n    text: 'coalesce',\r\n    hint: 'Evaluates a list of expressions and returns the first non-null (or non-empty for string) expression.',\r\n  },\r\n  { text: 'cos', hint: 'Returns the cosine function.' },\r\n  { text: 'cot', hint: 'Calculates the trigonometric cotangent of the specified angle, in radians.' },\r\n  {\r\n    text: 'count',\r\n    hint:\r\n      'Returns a count of the records per summarization group (or in total if summarization is done without grouping).',\r\n  },\r\n  { text: 'countif', hint: 'Returns a count of rows for which *Predicate* evaluates to `true`.' },\r\n  {\r\n    text: 'countof',\r\n    hint: 'Counts occurrences of a substring in a string. Plain string matches may overlap; regex matches do not.',\r\n  },\r\n  { text: 'current_principal', hint: 'Returns the current principal running this query.' },\r\n  {\r\n    text: 'cursor_after',\r\n    hint: 'A predicate over the records of a table to compare their ingestion time\\r\\nagainst a database cursor.',\r\n  },\r\n  {\r\n    text: 'cursor_before_or_at',\r\n    hint: 'A predicate over the records of a table to compare their ingestion time\\r\\nagainst a database cursor.',\r\n  },\r\n  { text: 'database', hint: 'Changes the reference of the query to a specific database within the cluster scope.' },\r\n  {\r\n    text: 'datetime_add',\r\n    hint:\r\n      'Calculates a new [datetime](./scalar-data-types/datetime.md) from a specified datepart multiplied by a specified amount, added to a specified [datetime](./scalar-data-types/datetime.md).',\r\n  },\r\n  {\r\n    text: 'datetime_diff',\r\n    hint: 'Calculates calendarian difference between two [datetime](./scalar-data-types/datetime.md) values.',\r\n  },\r\n  { text: 'datetime_part', hint: 'Extracts the requested date part as an integer value.' },\r\n  { text: 'dayofmonth', hint: 'Returns the integer number representing the day number of the given month' },\r\n  { text: 'dayofweek', hint: 'Returns the integer number of days since the preceding Sunday, as a `timespan`.' },\r\n  { text: 'dayofyear', hint: 'Returns the integer number represents the day number of the given year.' },\r\n  { text: 'dcount', hint: 'Returns an estimate of the number of distinct values of *Expr* in the group.' },\r\n  {\r\n    text: 'dcount_hll',\r\n    hint:\r\n      'Calculates the dcount from hll results (which was generated by [hll](hll-aggfunction.md) or [hll_merge](hll-merge-aggfunction.md)).',\r\n  },\r\n  {\r\n    text: 'dcountif',\r\n    hint:\r\n      'Returns an estimate of the number of distinct values of *Expr* of rows for which *Predicate* evaluates to `true`.',\r\n  },\r\n  {\r\n    text: 'degrees',\r\n    hint:\r\n      'Converts angle value in radians into value in degrees, using formula `degrees = (180 / PI ) * angle_in_radians`',\r\n  },\r\n  { text: 'distance', hint: 'Returns the distance between two points in meters.' },\r\n  { text: 'endofday', hint: 'Returns the end of the day containing the date, shifted by an offset, if provided.' },\r\n  { text: 'endofmonth', hint: 'Returns the end of the month containing the date, shifted by an offset, if provided.' },\r\n  { text: 'endofweek', hint: 'Returns the end of the week containing the date, shifted by an offset, if provided.' },\r\n  { text: 'endofyear', hint: 'Returns the end of the year containing the date, shifted by an offset, if provided.' },\r\n  {\r\n    text: 'estimate_data_size',\r\n    hint: 'Returns an estimated data size of the selected columns of the tabular expression.',\r\n  },\r\n  { text: 'exp', hint: 'The base-e exponential function of x, which is e raised to the power x: e^x.' },\r\n  {\r\n    text: 'exp10',\r\n    hint: 'The base-10 exponential function of x, which is 10 raised to the power x: 10^x.  \\r\\n**Syntax**',\r\n  },\r\n  { text: 'exp2', hint: 'The base-2 exponential function of x, which is 2 raised to the power x: 2^x.' },\r\n  {\r\n    text: 'extent_id',\r\n    hint: 'Returns a unique identifier that identifies the data shard (\"extent\") that the current record resides in.',\r\n  },\r\n  {\r\n    text: 'extent_tags',\r\n    hint:\r\n      'Returns a dynamic array with the [tags](../management/extents-overview.md#extent-tagging) of the data shard (\"extent\") that the current record resides in.',\r\n  },\r\n  { text: 'extract', hint: 'Get a match for a [regular expression](./re2.md) from a text string.' },\r\n  { text: 'extract_all', hint: 'Get all matches for a [regular expression](./re2.md) from a text string.' },\r\n  { text: 'extractjson', hint: 'Get a specified element out of a JSON text using a path expression.' },\r\n  { text: 'floor', hint: 'An alias for [`bin()`](binfunction.md).' },\r\n  { text: 'format_datetime', hint: 'Formats a datetime parameter based on the format pattern parameter.' },\r\n  { text: 'format_timespan', hint: 'Formats a timespan parameter based on the format pattern parameter.' },\r\n  { text: 'gamma', hint: 'Computes [gamma function](https://en.wikipedia.org/wiki/Gamma_function)' },\r\n  { text: 'getmonth', hint: 'Get the month number (1-12) from a datetime.' },\r\n  { text: 'gettype', hint: 'Returns the runtime type of its single argument.' },\r\n  { text: 'getyear', hint: 'Returns the year part of the `datetime` argument.' },\r\n  { text: 'hash', hint: 'Returns a hash value for the input value.' },\r\n  { text: 'hash_sha256', hint: 'Returns a sha256 hash value for the input value.' },\r\n  { text: 'hll', hint: 'Calculates the Intermediate results of [dcount](dcount-aggfunction.md) across the group.' },\r\n  {\r\n    text: 'hll_merge',\r\n    hint: 'Merges hll results (scalar version of the aggregate version [`hll_merge()`](hll-merge-aggfunction.md)).',\r\n  },\r\n  { text: 'hourofday', hint: 'Returns the integer number representing the hour number of the given date' },\r\n  {\r\n    text: 'iff',\r\n    hint:\r\n      'Evaluates the first argument (the predicate), and returns the value of either the second or third arguments, depending on whether the predicate evaluated to `true` (second) or `false` (third).',\r\n  },\r\n  {\r\n    text: 'iif',\r\n    hint:\r\n      'Evaluates the first argument (the predicate), and returns the value of either the second or third arguments, depending on whether the predicate evaluated to `true` (second) or `false` (third).',\r\n  },\r\n  {\r\n    text: 'indexof',\r\n    hint: 'Function reports the zero-based index of the first occurrence of a specified string within input string.',\r\n  },\r\n  { text: 'ingestion_time', hint: \"Retrieves the record's `$IngestionTime` hidden `datetime` column, or null.\" },\r\n  {\r\n    text: 'iscolumnexists',\r\n    hint:\r\n      'Returns a boolean value indicating if the given string argument exists in the schema produced by the preceding tabular operator.',\r\n  },\r\n  { text: 'isempty', hint: 'Returns `true` if the argument is an empty string or is null.' },\r\n  { text: 'isfinite', hint: 'Returns whether input is a finite value (is neither infinite nor NaN).' },\r\n  { text: 'isinf', hint: 'Returns whether input is an infinite (positive or negative) value.' },\r\n  { text: 'isnan', hint: 'Returns whether input is Not-a-Number (NaN) value.' },\r\n  { text: 'isnotempty', hint: 'Returns `true` if the argument is not an empty string nor it is a null.' },\r\n  { text: 'isnotnull', hint: 'Returns `true` if the argument is not null.' },\r\n  {\r\n    text: 'isnull',\r\n    hint:\r\n      'Evaluates its sole argument and returns a `bool` value indicating if the argument evaluates to a null value.',\r\n  },\r\n  { text: 'log', hint: 'Returns the natural logarithm function.' },\r\n  { text: 'log10', hint: 'Returns the common (base-10) logarithm function.' },\r\n  { text: 'log2', hint: 'Returns the base-2 logarithm function.' },\r\n  {\r\n    text: 'loggamma',\r\n    hint: 'Computes log of absolute value of the [gamma function](https://en.wikipedia.org/wiki/Gamma_function)',\r\n  },\r\n  {\r\n    text: 'make_datetime',\r\n    hint: 'Creates a [datetime](./scalar-data-types/datetime.md) scalar value from the specified date and time.',\r\n  },\r\n  {\r\n    text: 'make_dictionary',\r\n    hint: 'Returns a `dynamic` (JSON) property-bag (dictionary) of all the values of *Expr* in the group.',\r\n  },\r\n  { text: 'make_string', hint: 'Returns the string generated by the Unicode characters.' },\r\n  {\r\n    text: 'make_timespan',\r\n    hint: 'Creates a [timespan](./scalar-data-types/timespan.md) scalar value from the specified time period.',\r\n  },\r\n  { text: 'makelist', hint: 'Returns a `dynamic` (JSON) array of all the values of *Expr* in the group.' },\r\n  {\r\n    text: 'makeset',\r\n    hint: 'Returns a `dynamic` (JSON) array of the set of distinct values that *Expr* takes in the group.',\r\n  },\r\n  {\r\n    text: 'materialize',\r\n    hint:\r\n      'Allows caching a sub-query result during the time of query execution in a way that other subqueries can reference the partial result.',\r\n  },\r\n  { text: 'max', hint: 'Returns the maximum value across the group.' },\r\n  { text: 'max_of', hint: 'Returns the maximum value of several evaluated numeric expressions.' },\r\n  {\r\n    text: 'merge_tdigests',\r\n    hint:\r\n      'Merges tdigest results (scalar version of the aggregate version [`merge_tdigests()`](merge-tdigests-aggfunction.md)).',\r\n  },\r\n  { text: 'min', hint: 'Returns the minimum value agross the group.' },\r\n  { text: 'min_of', hint: 'Returns the minimum value of several evaluated numeric expressions.' },\r\n  { text: 'monthofyear', hint: 'Returns the integer number represents the month number of the given year.' },\r\n  {\r\n    text: 'next',\r\n    hint:\r\n      'Returns the value of a column in a row that it at some offset following the\\r\\ncurrent row in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\r\n  },\r\n  { text: 'not', hint: 'Reverses the value of its `bool` argument.' },\r\n  {\r\n    text: 'now',\r\n    hint:\r\n      'Returns the current UTC clock time, optionally offset by a given timespan.\\r\\nThis function can be used multiple times in a statement and the clock time being referenced will be the same for all instances.',\r\n  },\r\n  { text: 'pack', hint: 'Creates a `dynamic` object (property bag) from a list of names and values.' },\r\n  {\r\n    text: 'pack_all',\r\n    hint: 'Creates a `dynamic` object (property bag) from all the columns of the tabular expression.',\r\n  },\r\n  { text: 'pack_array', hint: 'Packs all input values into a dynamic array.' },\r\n  { text: 'parse_ipv4', hint: 'Converts input to integer (signed 64-bit) number representation.' },\r\n  {\r\n    text: 'parse_json',\r\n    hint:\r\n      'Interprets a `string` as a [JSON value](https://json.org/)) and returns the value as [`dynamic`](./scalar-data-types/dynamic.md). \\r\\nIt is superior to using [extractjson() function](./extractjsonfunction.md)\\r\\nwhen you need to extract more than one element of a JSON compound object.',\r\n  },\r\n  {\r\n    text: 'parse_path',\r\n    hint:\r\n      'Parses a file path `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object that contains the following parts of the path: \\r\\nScheme, RootPath, DirectoryPath, DirectoryName, FileName, Extension, AlternateDataStreamName.\\r\\nIn addition to the simple paths with both types of slashes, supports paths with schemas (e.g. \"file://...\"), shared paths (e.g. \"\\\\\\\\shareddrive\\\\users...\"), long paths (e.g \"\\\\\\\\?\\\\C:...\"\"), alternate data streams (e.g. \"file1.exe:file2.exe\")',\r\n  },\r\n  {\r\n    text: 'parse_url',\r\n    hint:\r\n      'Parses an absolute URL `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object contains all parts of the URL (Scheme, Host, Port, Path, Username, Password, Query Parameters, Fragment).',\r\n  },\r\n  {\r\n    text: 'parse_urlquery',\r\n    hint:\r\n      'Parses a url query `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object contains the Query parameters.',\r\n  },\r\n  {\r\n    text: 'parse_user_agent',\r\n    hint:\r\n      \"Interprets a user-agent string, which identifies the user's browser and provides certain system details to servers hosting the websites the user visits. The result is returned as [`dynamic`](./scalar-data-types/dynamic.md).\",\r\n  },\r\n  { text: 'parse_version', hint: 'Converts input string representation of version to a comparable decimal number.' },\r\n  {\r\n    text: 'parse_xml',\r\n    hint:\r\n      'Interprets a `string` as a XML value, converts the value to a [JSON value](https://json.org/) and returns the value as  [`dynamic`](./scalar-data-types/dynamic.md).',\r\n  },\r\n  {\r\n    text: 'percentile',\r\n    hint:\r\n      'Returns an estimate for the specified [nearest-rank percentile](#nearest-rank-percentile) of the population defined by *Expr*. \\r\\nThe accuracy depends on the density of population in the region of the percentile.',\r\n  },\r\n  {\r\n    text: 'percentile_tdigest',\r\n    hint:\r\n      'Calculates the percentile result from tdigest results (which was generated by [tdigest](tdigest-aggfunction.md) or [merge-tdigests](merge-tdigests-aggfunction.md))',\r\n  },\r\n  {\r\n    text: 'percentrank_tdigest',\r\n    hint:\r\n      \"Calculates the approximate rank of the value in a set where rank is expressed as percentage of set's size. \\r\\nThis function can be viewed as the inverse of the percentile.\",\r\n  },\r\n  { text: 'pi', hint: 'Returns the constant value of Pi (π).' },\r\n  { text: 'point', hint: 'Returns a dynamic array representation of a point.' },\r\n  { text: 'pow', hint: 'Returns a result of raising to power' },\r\n  {\r\n    text: 'prev',\r\n    hint:\r\n      'Returns the value of a column in a row that it at some offset prior to the\\r\\ncurrent row in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\r\n  },\r\n  {\r\n    text: 'radians',\r\n    hint:\r\n      'Converts angle value in degrees into value in radians, using formula `radians = (PI / 180 ) * angle_in_degrees`',\r\n  },\r\n  { text: 'rand', hint: 'Returns a random number.' },\r\n  { text: 'range', hint: 'Generates a dynamic array holding a series of equally-spaced values.' },\r\n  { text: 'repeat', hint: 'Generates a dynamic array holding a series of equal values.' },\r\n  { text: 'replace', hint: 'Replace all regex matches with another string.' },\r\n  { text: 'reverse', hint: 'Function makes reverse of input string.' },\r\n  { text: 'round', hint: 'Returns the rounded source to the specified precision.' },\r\n  {\r\n    text: 'row_cumsum',\r\n    hint:\r\n      'Calculates the cumulative sum of a column in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\r\n  },\r\n  {\r\n    text: 'row_number',\r\n    hint:\r\n      \"Returns the current row's index in a [serialized row set](./windowsfunctions.md#serialized-row-set).\\r\\nThe row index starts by default at `1` for the first row, and is incremented by `1` for each additional row.\\r\\nOptionally, the row index can start at a different value than `1`.\\r\\nAdditionally, the row index may be reset according to some provided predicate.\",\r\n  },\r\n  { text: 'series_add', hint: 'Calculates the element-wise addition of two numeric series inputs.' },\r\n  { text: 'series_decompose', hint: 'Applies a decomposition transformation on a series.' },\r\n  {\r\n    text: 'series_decompose_anomalies',\r\n    hint:\r\n      'Anomaly Detection based on series decomposition (refer to [series_decompose()](series-decomposefunction.md))',\r\n  },\r\n  { text: 'series_decompose_forecast', hint: 'Forecast based on series decomposition.' },\r\n  { text: 'series_divide', hint: 'Calculates the element-wise division of two numeric series inputs.' },\r\n  {\r\n    text: 'series_equals',\r\n    hint: 'Calculates the element-wise equals (`==`) logic operation of two numeric series inputs.',\r\n  },\r\n  { text: 'series_fill_backward', hint: 'Performs backward fill interpolation of missing values in a series.' },\r\n  { text: 'series_fill_const', hint: 'Replaces missing values in a series with a specified constant value.' },\r\n  { text: 'series_fill_forward', hint: 'Performs forward fill interpolation of missing values in a series.' },\r\n  { text: 'series_fill_linear', hint: 'Performs linear interpolation of missing values in a series.' },\r\n  { text: 'series_fir', hint: 'Applies a Finite Impulse Response filter on a series.' },\r\n  {\r\n    text: 'series_fit_2lines',\r\n    hint: 'Applies two segments linear regression on a series, returning multiple columns.',\r\n  },\r\n  {\r\n    text: 'series_fit_2lines_dynamic',\r\n    hint: 'Applies two segments linear regression on a series, returning dynamic object.',\r\n  },\r\n  { text: 'series_fit_line', hint: 'Applies linear regression on a series, returning multiple columns.' },\r\n  { text: 'series_fit_line_dynamic', hint: 'Applies linear regression on a series, returning dynamic object.' },\r\n  {\r\n    text: 'series_greater',\r\n    hint: 'Calculates the element-wise greater (`>`) logic operation of two numeric series inputs.',\r\n  },\r\n  {\r\n    text: 'series_greater_equals',\r\n    hint: 'Calculates the element-wise greater or equals (`>=`) logic operation of two numeric series inputs.',\r\n  },\r\n  { text: 'series_iir', hint: 'Applies a Infinite Impulse Response filter on a series.' },\r\n  { text: 'series_less', hint: 'Calculates the element-wise less (`<`) logic operation of two numeric series inputs.' },\r\n  {\r\n    text: 'series_less_equals',\r\n    hint: 'Calculates the element-wise less or equal (`<=`) logic operation of two numeric series inputs.',\r\n  },\r\n  { text: 'series_multiply', hint: 'Calculates the element-wise multiplication of two numeric series inputs.' },\r\n  {\r\n    text: 'series_not_equals',\r\n    hint: 'Calculates the element-wise not equals (`!=`) logic operation of two numeric series inputs.',\r\n  },\r\n  { text: 'series_outliers', hint: 'Scores anomaly points in a series.' },\r\n  { text: 'series_periods_detect', hint: 'Finds the most significant periods that exist in a time series.' },\r\n  {\r\n    text: 'series_periods_validate',\r\n    hint: 'Checks whether a time series contains periodic patterns of given lengths.',\r\n  },\r\n  {\r\n    text: 'series_seasonal',\r\n    hint: 'Calculates the seasonal component of a series according to the detected or given seasonal period.',\r\n  },\r\n  { text: 'series_stats', hint: 'Returns statistics for a series in multiple columns.' },\r\n  { text: 'series_stats_dynamic', hint: 'Returns statistics for a series in dynamic object.' },\r\n  { text: 'series_subtract', hint: 'Calculates the element-wise subtraction of two numeric series inputs.' },\r\n  { text: 'sign', hint: 'Sign of a numeric expression' },\r\n  { text: 'sin', hint: 'Returns the sine function.' },\r\n  {\r\n    text: 'split',\r\n    hint:\r\n      'Splits a given string according to a given delimiter and returns a string array with the contained substrings.',\r\n  },\r\n  { text: 'sqrt', hint: 'Returns the square root function.' },\r\n  { text: 'startofday', hint: 'Returns the start of the day containing the date, shifted by an offset, if provided.' },\r\n  {\r\n    text: 'startofmonth',\r\n    hint: 'Returns the start of the month containing the date, shifted by an offset, if provided.',\r\n  },\r\n  {\r\n    text: 'startofweek',\r\n    hint: 'Returns the start of the week containing the date, shifted by an offset, if provided.',\r\n  },\r\n  {\r\n    text: 'startofyear',\r\n    hint: 'Returns the start of the year containing the date, shifted by an offset, if provided.',\r\n  },\r\n  {\r\n    text: 'stdev',\r\n    hint:\r\n      'Calculates the standard deviation of *Expr* across the group, considering the group as a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).',\r\n  },\r\n  {\r\n    text: 'stdevif',\r\n    hint:\r\n      'Calculates the [stdev](stdev-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\r\n  },\r\n  {\r\n    text: 'stdevp',\r\n    hint:\r\n      'Calculates the standard deviation of *Expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population).',\r\n  },\r\n  { text: 'strcat', hint: 'Concatenates between 1 and 64 arguments.' },\r\n  { text: 'strcat_array', hint: 'Creates a concatenated string of array values using specified delimiter.' },\r\n  {\r\n    text: 'strcat_delim',\r\n    hint: 'Concatenates between 2 and 64 arguments, with delimiter, provided as first argument.',\r\n  },\r\n  { text: 'strcmp', hint: 'Compares two strings.' },\r\n  { text: 'string_size', hint: 'Returns the size, in bytes, of the input string.' },\r\n  { text: 'strlen', hint: 'Returns the length, in characters, of the input string.' },\r\n  { text: 'strrep', hint: 'Repeats given [string](./scalar-data-types/string.md) provided amount of times.' },\r\n  {\r\n    text: 'substring',\r\n    hint: 'Extracts a substring from a source string starting from some index to the end of the string.',\r\n  },\r\n  { text: 'sum', hint: 'Calculates the sum of *Expr* across the group.' },\r\n  { text: 'sumif', hint: 'Returns a sum of *Expr* for which *Predicate* evaluates to `true`.' },\r\n  { text: 'table', hint: 'References specific table using an query-time evaluated string-expression.' },\r\n  { text: 'tan', hint: 'Returns the tangent function.' },\r\n  {\r\n    text: 'tdigest',\r\n    hint: 'Calculates the Intermediate results of [`percentiles()`](percentiles-aggfunction.md) across the group.',\r\n  },\r\n  {\r\n    text: 'tdigest_merge',\r\n    hint:\r\n      'Merges tdigest results (scalar version of the aggregate version [`tdigest_merge()`](tdigest-merge-aggfunction.md)).',\r\n  },\r\n  { text: 'tobool', hint: 'Converts input to boolean (signed 8-bit) representation.' },\r\n  { text: 'todatetime', hint: 'Converts input to [datetime](./scalar-data-types/datetime.md) scalar.' },\r\n  { text: 'todecimal', hint: 'Converts input to decimal number representation.' },\r\n  {\r\n    text: 'todouble',\r\n    hint: 'Converts the input to a value of type `real`. (`todouble()` and `toreal()` are synonyms.)',\r\n  },\r\n  {\r\n    text: 'todynamic',\r\n    hint:\r\n      'Interprets a `string` as a [JSON value](https://json.org/) and returns the value as [`dynamic`](./scalar-data-types/dynamic.md).',\r\n  },\r\n  { text: 'toguid', hint: 'Converts input to [`guid`](./scalar-data-types/guid.md) representation.' },\r\n  { text: 'tohex', hint: 'Converts input to a hexadecimal string.' },\r\n  { text: 'toint', hint: 'Converts input to integer (signed 32-bit) number representation.' },\r\n  { text: 'tolong', hint: 'Converts input to long (signed 64-bit) number representation.' },\r\n  { text: 'tolower', hint: 'Converts input string to lower case.' },\r\n  { text: 'toscalar', hint: 'Returns a scalar constant value of the evaluated expression.' },\r\n  { text: 'tostring', hint: 'Converts input to a string representation.' },\r\n  { text: 'totimespan', hint: 'Converts input  to [timespan](./scalar-data-types/timespan.md) scalar.' },\r\n  { text: 'toupper', hint: 'Converts a string to upper case.' },\r\n  {\r\n    text: 'translate',\r\n    hint:\r\n      \"Replaces a set of characters ('searchList') with another set of characters ('replacementList') in a given a string.\\r\\nThe function searches for characters in the 'searchList' and replaces them with the corresponding characters in 'replacementList'\",\r\n  },\r\n  { text: 'treepath', hint: 'Enumerates all the path expressions that identify leaves in a dynamic object.' },\r\n  { text: 'trim', hint: 'Removes all leading and trailing matches of the specified regular expression.' },\r\n  { text: 'trim_end', hint: 'Removes trailing match of the specified regular expression.' },\r\n  { text: 'trim_start', hint: 'Removes leading match of the specified regular expression.' },\r\n  { text: 'url_decode', hint: 'The function converts encoded URL into a to regular URL representation.' },\r\n  {\r\n    text: 'url_encode',\r\n    hint: 'The function converts characters of the input URL into a format that can be transmitted over the Internet.',\r\n  },\r\n  {\r\n    text: 'variance',\r\n    hint:\r\n      'Calculates the variance of *Expr* across the group, considering the group as a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).',\r\n  },\r\n  {\r\n    text: 'varianceif',\r\n    hint:\r\n      'Calculates the [variance](variance-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\r\n  },\r\n  {\r\n    text: 'variancep',\r\n    hint:\r\n      'Calculates the variance of *Expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population).',\r\n  },\r\n  { text: 'weekofyear', hint: 'Returns the integer number represents the week number.' },\r\n  {\r\n    text: 'welch_test',\r\n    hint: 'Computes the p_value of the [Welch-test function](https://en.wikipedia.org/wiki/Welch%27s_t-test)',\r\n  },\r\n  {\r\n    text: 'zip',\r\n    hint:\r\n      'The `zip` function accepts any number of `dynamic` arrays, and returns an\\r\\narray whose elements are each an array holding the elements of the input\\r\\narrays of the same index.',\r\n  },\r\n];\r\n\r\nexport const KEYWORDS = [\r\n  'by',\r\n  'on',\r\n  'contains',\r\n  'notcontains',\r\n  'containscs',\r\n  'notcontainscs',\r\n  'startswith',\r\n  'has',\r\n  'matches',\r\n  'regex',\r\n  'true',\r\n  'false',\r\n  'and',\r\n  'or',\r\n  'typeof',\r\n  'int',\r\n  'string',\r\n  'date',\r\n  'datetime',\r\n  'time',\r\n  'long',\r\n  'real',\r\n  '​boolean',\r\n  'bool',\r\n];\r\n\r\nexport const grafanaMacros = [\r\n  {\r\n    text: '$__timeFilter',\r\n    display: '$__timeFilter()',\r\n    hint: 'Macro that uses the selected timerange in Grafana to filter the query.',\r\n  },\r\n  {\r\n    text: '$__timeTo',\r\n    display: '$__timeTo()',\r\n    hint: 'Returns the From datetime from the Grafana picker. Example: datetime(2018-06-05T20:09:58.907Z).',\r\n  },\r\n  {\r\n    text: '$__timeFrom',\r\n    display: '$__timeFrom()',\r\n    hint: 'Returns the From datetime from the Grafana picker. Example: datetime(2018-06-05T18:09:58.907Z).',\r\n  },\r\n  {\r\n    text: '$__escapeMulti',\r\n    display: '$__escapeMulti()',\r\n    hint: 'Macro to escape multi-value template variables that contain illegal characters.',\r\n  },\r\n  { text: '$__contains', display: '$__contains()', hint: 'Macro for multi-value template variables.' },\r\n];\r\n\r\n// Kusto operators\r\n// export const OPERATORS = ['+', '-', '*', '/', '>', '<', '==', '<>', '<=', '>=', '~', '!~'];\r\n\r\nexport const DURATION = ['SECONDS', 'MINUTES', 'HOURS', 'DAYS', 'WEEKS', 'MONTHS', 'YEARS'];\r\n\r\nconst tokenizer = {\r\n  comment: {\r\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\r\n    lookbehind: true,\r\n    greedy: true,\r\n  },\r\n  'function-context': {\r\n    pattern: /[a-z0-9_]+\\([^)]*\\)?/i,\r\n    inside: {},\r\n  },\r\n  duration: {\r\n    pattern: new RegExp(`${DURATION.join('?|')}?`, 'i'),\r\n    alias: 'number',\r\n  },\r\n  builtin: new RegExp(`\\\\b(?:${functionTokens.map(f => f.text).join('|')})(?=\\\\s*\\\\()`, 'i'),\r\n  string: {\r\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\r\n    greedy: true,\r\n  },\r\n  keyword: new RegExp(`\\\\b(?:${KEYWORDS.join('|')}|${operatorTokens.map(f => f.text).join('|')}|\\\\*)\\\\b`, 'i'),\r\n  boolean: /\\b(?:true|false)\\b/,\r\n  number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\r\n  operator: /-|\\+|\\*|\\/|>|<|==|<=?|>=?|<>|!~|~|=|\\|/,\r\n  punctuation: /[{};(),.:]/,\r\n  variable: /(\\[\\[(.+?)\\]\\])|(\\$(.+?))\\b/,\r\n};\r\n\r\ntokenizer['function-context'].inside = {\r\n  argument: {\r\n    pattern: /[a-z0-9_]+(?=:)/i,\r\n    alias: 'symbol',\r\n  },\r\n  duration: tokenizer.duration,\r\n  number: tokenizer.number,\r\n  builtin: tokenizer.builtin,\r\n  string: tokenizer.string,\r\n  variable: tokenizer.variable,\r\n};\r\n\r\n// console.log(tokenizer.builtin);\r\n\r\nexport default tokenizer;\r\n\r\n// function escapeRegExp(str: string): string {\r\n//   return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n// }\r\n","import PluginPrism from 'app/features/explore/slate-plugins/prism';\r\nimport { BracesPlugin, ClearPlugin, RunnerPlugin, NewlinePlugin } from '@grafana/ui';\r\nimport Typeahead from './typeahead';\r\nimport { getKeybindingSrv, KeybindingSrv } from 'app/core/services/keybindingSrv';\r\n\r\nimport { Block, Document, Text, Value, Editor as CoreEditor } from 'slate';\r\nimport { Editor } from '@grafana/slate-react';\r\nimport Plain from 'slate-plain-serializer';\r\nimport ReactDOM from 'react-dom';\r\nimport React from 'react';\r\nimport _ from 'lodash';\r\n\r\nfunction flattenSuggestions(s: any) {\r\n  return s ? s.reduce((acc: any, g: any) => acc.concat(g.items), []) : [];\r\n}\r\n\r\nexport const makeFragment = (text: string) => {\r\n  const lines = text.split('\\n').map((line: any) =>\r\n    Block.create({\r\n      type: 'paragraph',\r\n      nodes: [Text.create(line)],\r\n    } as any)\r\n  );\r\n\r\n  const fragment = Document.create({\r\n    nodes: lines,\r\n  });\r\n  return fragment;\r\n};\r\n\r\nexport const getInitialValue = (query: string) => Value.create({ document: makeFragment(query) });\r\n\r\nclass Portal extends React.Component<any, any> {\r\n  node: any;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    const { index = 0, prefix = 'query' } = props;\r\n    this.node = document.createElement('div');\r\n    this.node.classList.add(`slate-typeahead`, `slate-typeahead-${prefix}-${index}`);\r\n    document.body.appendChild(this.node);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.body.removeChild(this.node);\r\n  }\r\n\r\n  render() {\r\n    return ReactDOM.createPortal(this.props.children, this.node);\r\n  }\r\n}\r\n\r\nclass QueryField extends React.Component<any, any> {\r\n  menuEl: any;\r\n  plugins: any;\r\n  resetTimer: any;\r\n  keybindingSrv: KeybindingSrv = getKeybindingSrv();\r\n\r\n  constructor(props: any, context: any) {\r\n    super(props, context);\r\n\r\n    const { prismDefinition = {}, prismLanguage = 'kusto' } = props;\r\n\r\n    this.plugins = [\r\n      BracesPlugin(),\r\n      ClearPlugin(),\r\n      RunnerPlugin({ handler: props.onPressEnter }),\r\n      NewlinePlugin(),\r\n      PluginPrism({ definition: prismDefinition, language: prismLanguage }),\r\n    ];\r\n\r\n    this.state = {\r\n      labelKeys: {},\r\n      labelValues: {},\r\n      suggestions: [],\r\n      typeaheadIndex: 0,\r\n      typeaheadPrefix: '',\r\n      value: getInitialValue(props.initialQuery || ''),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateMenu();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.restoreEscapeKeyBinding();\r\n    clearTimeout(this.resetTimer);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.updateMenu();\r\n  }\r\n\r\n  onChange = ({ value }: { value: Value }) => {\r\n    const changed = value.document !== this.state.value.document;\r\n    this.setState({ value }, () => {\r\n      if (changed) {\r\n        // call typeahead only if query changed\r\n        requestAnimationFrame(() => this.onTypeahead());\r\n        this.onChangeQuery();\r\n      }\r\n    });\r\n  };\r\n\r\n  request = (url?: string) => {\r\n    if (this.props.request) {\r\n      return this.props.request(url);\r\n    }\r\n    return fetch(url);\r\n  };\r\n\r\n  onChangeQuery = () => {\r\n    // Send text change to parent\r\n    const { onQueryChange } = this.props;\r\n    if (onQueryChange) {\r\n      onQueryChange(Plain.serialize(this.state.value));\r\n    }\r\n  };\r\n\r\n  onKeyDown = (event: Event, editor: CoreEditor, next: Function) => {\r\n    const { typeaheadIndex, suggestions } = this.state;\r\n    const keyboardEvent = event as KeyboardEvent;\r\n\r\n    switch (keyboardEvent.key) {\r\n      case 'Escape': {\r\n        if (this.menuEl) {\r\n          keyboardEvent.preventDefault();\r\n          keyboardEvent.stopPropagation();\r\n          this.resetTypeahead();\r\n          return true;\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ' ': {\r\n        if (keyboardEvent.ctrlKey) {\r\n          keyboardEvent.preventDefault();\r\n          this.onTypeahead(true);\r\n          return true;\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'Tab':\r\n      case 'Enter': {\r\n        if (this.menuEl) {\r\n          // Dont blur input\r\n          keyboardEvent.preventDefault();\r\n          if (!suggestions || !suggestions.length) {\r\n            return next();\r\n          }\r\n\r\n          // Get the currently selected suggestion\r\n          const flattenedSuggestions = flattenSuggestions(suggestions);\r\n          const selected = Math.abs(typeaheadIndex);\r\n          const selectedIndex = selected % flattenedSuggestions.length || 0;\r\n          const suggestion = flattenedSuggestions[selectedIndex];\r\n\r\n          return this.applyTypeahead(editor, suggestion);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'ArrowDown': {\r\n        if (this.menuEl) {\r\n          // Select next suggestion\r\n          keyboardEvent.preventDefault();\r\n          this.setState({ typeaheadIndex: typeaheadIndex + 1 });\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'ArrowUp': {\r\n        if (this.menuEl) {\r\n          // Select previous suggestion\r\n          keyboardEvent.preventDefault();\r\n          this.setState({ typeaheadIndex: Math.max(0, typeaheadIndex - 1) });\r\n        }\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        // console.log('default key', event.key, event.which, event.charCode, event.locale, data.key);\r\n        break;\r\n      }\r\n    }\r\n    return next();\r\n  };\r\n\r\n  onTypeahead = (change = false, item?: any): boolean | void => {\r\n    return change;\r\n  };\r\n\r\n  applyTypeahead = (\r\n    editor?: CoreEditor,\r\n    suggestion?: { text: any; type: string; deleteBackwards: any }\r\n  ): { value: Value } => {\r\n    return { value: new Value() };\r\n  };\r\n\r\n  resetTypeahead = (callback?: () => void) => {\r\n    this.setState(\r\n      {\r\n        suggestions: [],\r\n        typeaheadIndex: 0,\r\n        typeaheadPrefix: '',\r\n        typeaheadContext: null,\r\n      },\r\n      callback\r\n    );\r\n  };\r\n\r\n  handleBlur = (event: Event, editor: CoreEditor, next: Function) => {\r\n    const { onBlur } = this.props;\r\n    // If we dont wait here, menu clicks wont work because the menu\r\n    // will be gone.\r\n    this.resetTimer = setTimeout(this.resetTypeahead, 100);\r\n    if (onBlur) {\r\n      onBlur();\r\n    }\r\n    this.restoreEscapeKeyBinding();\r\n    return next();\r\n  };\r\n\r\n  handleFocus = (event: Event, editor: CoreEditor, next: Function) => {\r\n    const { onFocus } = this.props;\r\n    if (onFocus) {\r\n      onFocus();\r\n    }\r\n    // Don't go back to dashboard if Escape pressed inside the editor.\r\n    this.removeEscapeKeyBinding();\r\n    return next();\r\n  };\r\n\r\n  removeEscapeKeyBinding() {\r\n    this.keybindingSrv.unbind('esc', 'keydown');\r\n  }\r\n\r\n  restoreEscapeKeyBinding() {\r\n    this.keybindingSrv.setupGlobal();\r\n  }\r\n\r\n  onClickItem = (item: any) => {\r\n    const { suggestions } = this.state;\r\n    if (!suggestions || suggestions.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Manually triggering change\r\n    const change = this.applyTypeahead();\r\n    this.onChange(change);\r\n  };\r\n\r\n  updateMenu = () => {\r\n    const { suggestions } = this.state;\r\n    const menu = this.menuEl;\r\n    const selection = window.getSelection();\r\n    const node = selection.anchorNode;\r\n\r\n    // No menu, nothing to do\r\n    if (!menu) {\r\n      return;\r\n    }\r\n\r\n    // No suggestions or blur, remove menu\r\n    const hasSuggesstions = suggestions && suggestions.length > 0;\r\n    if (!hasSuggesstions) {\r\n      menu.removeAttribute('style');\r\n      return;\r\n    }\r\n\r\n    // Align menu overlay to editor node\r\n    if (node && node.parentElement) {\r\n      // Read from DOM\r\n      const rect = node.parentElement.getBoundingClientRect();\r\n      const scrollX = window.scrollX;\r\n      const scrollY = window.scrollY;\r\n      const screenHeight = window.innerHeight;\r\n\r\n      const menuLeft = rect.left + scrollX - 2;\r\n      const menuTop = rect.top + scrollY + rect.height + 4;\r\n      const menuHeight = screenHeight - menuTop - 10;\r\n\r\n      // Write DOM\r\n      requestAnimationFrame(() => {\r\n        menu.style.opacity = 1;\r\n        menu.style.top = `${menuTop}px`;\r\n        menu.style.left = `${menuLeft}px`;\r\n        menu.style.maxHeight = `${menuHeight}px`;\r\n      });\r\n    }\r\n  };\r\n\r\n  menuRef = (el: any) => {\r\n    this.menuEl = el;\r\n  };\r\n\r\n  renderMenu = () => {\r\n    const { portalPrefix } = this.props;\r\n    const { suggestions } = this.state;\r\n    const hasSuggesstions = suggestions && suggestions.length > 0;\r\n    if (!hasSuggesstions) {\r\n      return null;\r\n    }\r\n\r\n    // Guard selectedIndex to be within the length of the suggestions\r\n    let selectedIndex = Math.max(this.state.typeaheadIndex, 0);\r\n    const flattenedSuggestions = flattenSuggestions(suggestions);\r\n    selectedIndex = selectedIndex % flattenedSuggestions.length || 0;\r\n    const selectedKeys = (flattenedSuggestions.length > 0 ? [flattenedSuggestions[selectedIndex]] : []).map(i =>\r\n      typeof i === 'object' ? i.text : i\r\n    );\r\n\r\n    // Create typeahead in DOM root so we can later position it absolutely\r\n    return (\r\n      <Portal prefix={portalPrefix}>\r\n        <Typeahead\r\n          menuRef={this.menuRef}\r\n          selectedItems={selectedKeys}\r\n          onClickItem={this.onClickItem}\r\n          groupedItems={suggestions}\r\n        />\r\n      </Portal>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"slate-query-field\">\r\n        {this.renderMenu()}\r\n        <Editor\r\n          autoCorrect={false}\r\n          onBlur={this.handleBlur}\r\n          onKeyDown={this.onKeyDown}\r\n          onChange={this.onChange}\r\n          onFocus={this.handleFocus}\r\n          placeholder={this.props.placeholder}\r\n          plugins={this.plugins}\r\n          spellCheck={false}\r\n          value={this.state.value}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QueryField;\r\n","import React from 'react';\n\nfunction scrollIntoView(el: any) {\n  if (!el || !el.offsetParent) {\n    return;\n  }\n  const container = el.offsetParent;\n  if (el.offsetTop > container.scrollTop + container.offsetHeight || el.offsetTop < container.scrollTop) {\n    container.scrollTop = el.offsetTop - container.offsetTop;\n  }\n}\n\nclass TypeaheadItem extends React.PureComponent<any, any> {\n  el: any;\n  componentDidUpdate(prevProps: any) {\n    if (this.props.isSelected && !prevProps.isSelected) {\n      scrollIntoView(this.el);\n    }\n  }\n\n  getRef = (el: any) => {\n    this.el = el;\n  };\n\n  render() {\n    const { hint, isSelected, label, onClickItem } = this.props;\n    const className = isSelected ? 'typeahead-item typeahead-item__selected' : 'typeahead-item';\n    const onClick = () => onClickItem(label);\n    return (\n      <li ref={this.getRef} className={className} onClick={onClick}>\n        {label}\n        {hint && isSelected ? <div className=\"typeahead-item-hint\">{hint}</div> : null}\n      </li>\n    );\n  }\n}\n\nclass TypeaheadGroup extends React.PureComponent<any, any> {\n  render() {\n    const { items, label, selected, onClickItem } = this.props;\n    return (\n      <li className=\"typeahead-group\">\n        <div className=\"typeahead-group__title\">{label}</div>\n        <ul className=\"typeahead-group__list\">\n          {items.map((item: any) => {\n            const text = typeof item === 'object' ? item.text : item;\n            const label = typeof item === 'object' ? item.display || item.text : item;\n            return (\n              <TypeaheadItem\n                key={text}\n                onClickItem={onClickItem}\n                isSelected={selected.indexOf(text) > -1}\n                hint={item.hint}\n                label={label}\n              />\n            );\n          })}\n        </ul>\n      </li>\n    );\n  }\n}\n\nclass Typeahead extends React.PureComponent<any, any> {\n  render() {\n    const { groupedItems, menuRef, selectedItems, onClickItem } = this.props;\n    return (\n      <ul className=\"typeahead\" ref={menuRef}>\n        {groupedItems.map((g: any) => (\n          <TypeaheadGroup key={g.label} onClickItem={onClickItem} selected={selectedItems} {...g} />\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default Typeahead;\n","import { dateTime } from '@grafana/data';\r\n\r\nexport default class LogAnalyticsQuerystringBuilder {\r\n  constructor(public rawQueryString: string, public options: any, public defaultTimeField: any) {}\r\n\r\n  generate() {\r\n    let queryString = this.rawQueryString;\r\n    const macroRegexp = /\\$__([_a-zA-Z0-9]+)\\(([^\\)]*)\\)/gi;\r\n    queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\r\n      if (p1 === 'contains') {\r\n        return this.getMultiContains(p2);\r\n      }\r\n\r\n      return match;\r\n    });\r\n\r\n    queryString = queryString.replace(/\\$__escapeMulti\\(('[^]*')\\)/gi, (match, p1) => this.escape(p1));\r\n\r\n    if (this.options) {\r\n      queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\r\n        if (p1 === 'timeFilter') {\r\n          return this.getTimeFilter(p2, this.options);\r\n        }\r\n        if (p1 === 'timeFrom') {\r\n          return this.getFrom(this.options);\r\n        }\r\n        if (p1 === 'timeTo') {\r\n          return this.getUntil(this.options);\r\n        }\r\n\r\n        return match;\r\n      });\r\n      queryString = queryString.replace(/\\$__interval/gi, this.options.interval);\r\n    }\r\n    const rawQuery = queryString;\r\n    queryString = encodeURIComponent(queryString);\r\n    const uriString = `query=${queryString}`;\r\n\r\n    return { uriString, rawQuery };\r\n  }\r\n\r\n  getFrom(options: any) {\r\n    const from = options.range.from;\r\n    return `datetime(${dateTime(from)\r\n      .startOf('minute')\r\n      .toISOString()})`;\r\n  }\r\n\r\n  getUntil(options: any) {\r\n    if (options.rangeRaw.to === 'now') {\r\n      const now = Date.now();\r\n      return `datetime(${dateTime(now)\r\n        .startOf('minute')\r\n        .toISOString()})`;\r\n    } else {\r\n      const until = options.range.to;\r\n      return `datetime(${dateTime(until)\r\n        .startOf('minute')\r\n        .toISOString()})`;\r\n    }\r\n  }\r\n\r\n  getTimeFilter(timeFieldArg: any, options: any) {\r\n    const timeField = timeFieldArg || this.defaultTimeField;\r\n    if (options.rangeRaw.to === 'now') {\r\n      return `${timeField} >= ${this.getFrom(options)}`;\r\n    } else {\r\n      return `${timeField}  >= ${this.getFrom(options)} and ${timeField} <= ${this.getUntil(options)}`;\r\n    }\r\n  }\r\n\r\n  getMultiContains(inputs: string) {\r\n    const firstCommaIndex = inputs.indexOf(',');\r\n    const field = inputs.substring(0, firstCommaIndex);\r\n    const templateVar = inputs.substring(inputs.indexOf(',') + 1);\r\n\r\n    if (templateVar && templateVar.toLowerCase().trim() === 'all') {\r\n      return '1 == 1';\r\n    }\r\n\r\n    return `${field.trim()} in (${templateVar.trim()})`;\r\n  }\r\n\r\n  escape(inputs: string) {\r\n    return inputs\r\n      .substring(1, inputs.length - 1)\r\n      .split(`','`)\r\n      .map(v => `@'${v}'`)\r\n      .join(', ');\r\n  }\r\n}\r\n","import { DataSourcePlugin } from '@grafana/data';\r\nimport { AzureMonitorQueryCtrl } from './query_ctrl';\r\nimport Datasource from './datasource';\r\nimport { ConfigEditor } from './components/ConfigEditor';\r\nimport { AzureMonitorAnnotationsQueryCtrl } from './annotations_query_ctrl';\r\nimport { AzureMonitorQuery, AzureDataSourceJsonData } from './types';\r\n\r\nexport const plugin = new DataSourcePlugin<Datasource, AzureMonitorQuery, AzureDataSourceJsonData>(Datasource)\r\n  .setConfigEditor(ConfigEditor)\r\n  .setQueryCtrl(AzureMonitorQueryCtrl)\r\n  .setAnnotationQueryCtrl(AzureMonitorAnnotationsQueryCtrl);\r\n","import _ from 'lodash';\r\nimport { QueryCtrl } from 'app/plugins/sdk';\r\n// import './css/query_editor.css';\r\nimport TimegrainConverter from './time_grain_converter';\r\nimport './editor/editor_component';\r\nimport kbn from 'app/core/utils/kbn';\r\n\r\nimport { TemplateSrv } from 'app/features/templating/template_srv';\r\nimport { auto, IPromise } from 'angular';\r\nimport { DataFrame } from '@grafana/data';\r\nimport { PanelEvents } from '@grafana/data';\r\n\r\nexport interface ResultFormat {\r\n  text: string;\r\n  value: string;\r\n}\r\n\r\nexport class AzureMonitorQueryCtrl extends QueryCtrl {\r\n  static templateUrl = 'partials/query.editor.html';\r\n\r\n  defaultDropdownValue = 'select';\r\n\r\n  target: {\r\n    refId: string;\r\n    queryType: string;\r\n    subscription: string;\r\n    azureMonitor: {\r\n      resourceGroup: string;\r\n      resourceName: string;\r\n      metricDefinition: string;\r\n      metricNamespace: string;\r\n      metricName: string;\r\n      dimensionFilter: string;\r\n      timeGrain: string;\r\n      timeGrainUnit: string;\r\n      allowedTimeGrainsMs: number[];\r\n      dimensions: any[];\r\n      dimension: any;\r\n      top: string;\r\n      aggregation: string;\r\n      aggOptions: string[];\r\n      timeGrains: Array<{ text: string; value: string }>;\r\n    };\r\n    azureLogAnalytics: {\r\n      query: string;\r\n      resultFormat: string;\r\n      workspace: string;\r\n    };\r\n    appInsights: {\r\n      rawQuery: boolean;\r\n      // metric style query when rawQuery == false\r\n      metricName: string;\r\n      dimension: any;\r\n      dimensionFilter: string;\r\n      dimensions: string[];\r\n\r\n      aggOptions: string[];\r\n      aggregation: string;\r\n\r\n      timeGrainType: string;\r\n      timeGrainCount: string;\r\n      timeGrainUnit: string;\r\n      timeGrain: string;\r\n      timeGrains: Array<{ text: string; value: string }>;\r\n      allowedTimeGrainsMs: number[];\r\n\r\n      // query style query when rawQuery == true\r\n      rawQueryString: string;\r\n      timeColumn: string;\r\n      valueColumn: string;\r\n      segmentColumn: string;\r\n    };\r\n  };\r\n\r\n  defaults = {\r\n    queryType: 'Azure Monitor',\r\n    azureMonitor: {\r\n      resourceGroup: this.defaultDropdownValue,\r\n      metricDefinition: this.defaultDropdownValue,\r\n      resourceName: this.defaultDropdownValue,\r\n      metricNamespace: this.defaultDropdownValue,\r\n      metricName: this.defaultDropdownValue,\r\n      dimensionFilter: '*',\r\n      timeGrain: 'auto',\r\n      top: '10',\r\n      aggOptions: [] as string[],\r\n      timeGrains: [] as string[],\r\n    },\r\n    azureLogAnalytics: {\r\n      query: [\r\n        '//change this example to create your own time series query',\r\n        '<table name>                                                              ' +\r\n          '//the table to query (e.g. Usage, Heartbeat, Perf)',\r\n        '| where $__timeFilter(TimeGenerated)                                      ' +\r\n          '//this is a macro used to show the full chart’s time range, choose the datetime column here',\r\n        '| summarize count() by <group by column>, bin(TimeGenerated, $__interval) ' +\r\n          '//change “group by column” to a column in your table, such as “Computer”. ' +\r\n          'The $__interval macro is used to auto-select the time grain. Can also use 1h, 5m etc.',\r\n        '| order by TimeGenerated asc',\r\n      ].join('\\n'),\r\n      resultFormat: 'time_series',\r\n      workspace:\r\n        this.datasource && this.datasource.azureLogAnalyticsDatasource\r\n          ? this.datasource.azureLogAnalyticsDatasource.defaultOrFirstWorkspace\r\n          : '',\r\n    },\r\n    appInsights: {\r\n      metricName: this.defaultDropdownValue,\r\n      rawQuery: false,\r\n      rawQueryString: '',\r\n      dimension: 'none',\r\n      timeGrain: 'auto',\r\n      timeColumn: 'timestamp',\r\n      valueColumn: '',\r\n    },\r\n  };\r\n\r\n  resultFormats: ResultFormat[];\r\n  workspaces: any[];\r\n  showHelp: boolean;\r\n  showLastQuery: boolean;\r\n  lastQuery: string;\r\n  lastQueryError?: string;\r\n  subscriptions: Array<{ text: string; value: string }>;\r\n\r\n  /** @ngInject */\r\n  constructor($scope: any, $injector: auto.IInjectorService, private templateSrv: TemplateSrv) {\r\n    super($scope, $injector);\r\n\r\n    _.defaultsDeep(this.target, this.defaults);\r\n\r\n    this.migrateTimeGrains();\r\n\r\n    this.migrateToFromTimes();\r\n\r\n    this.migrateToDefaultNamespace();\r\n\r\n    this.migrateApplicationInsightsKeys();\r\n\r\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\r\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\r\n    this.resultFormats = [\r\n      { text: 'Time series', value: 'time_series' },\r\n      { text: 'Table', value: 'table' },\r\n    ];\r\n    this.getSubscriptions();\r\n    if (this.target.queryType === 'Azure Log Analytics') {\r\n      this.getWorkspaces();\r\n    }\r\n  }\r\n\r\n  onDataReceived(dataList: DataFrame[]) {\r\n    this.lastQueryError = undefined;\r\n    this.lastQuery = '';\r\n\r\n    const anySeriesFromQuery: any = _.find(dataList, { refId: this.target.refId });\r\n    if (anySeriesFromQuery && anySeriesFromQuery.meta) {\r\n      this.lastQuery = anySeriesFromQuery.meta.query;\r\n    }\r\n  }\r\n\r\n  onDataError(err: any) {\r\n    this.handleQueryCtrlError(err);\r\n  }\r\n\r\n  handleQueryCtrlError(err: any) {\r\n    if (err.query && err.query.refId && err.query.refId !== this.target.refId) {\r\n      return;\r\n    }\r\n\r\n    if (err.error && err.error.data && err.error.data.error && err.error.data.error.innererror) {\r\n      if (err.error.data.error.innererror.innererror) {\r\n        this.lastQueryError = err.error.data.error.innererror.innererror.message;\r\n      } else {\r\n        this.lastQueryError = err.error.data.error.innererror.message;\r\n      }\r\n    } else if (err.error && err.error.data && err.error.data.error) {\r\n      this.lastQueryError = err.error.data.error.message;\r\n    } else if (err.error && err.error.data) {\r\n      this.lastQueryError = err.error.data.message;\r\n    } else if (err.data && err.data.error) {\r\n      this.lastQueryError = err.data.error.message;\r\n    } else if (err.data && err.data.message) {\r\n      this.lastQueryError = err.data.message;\r\n    } else {\r\n      this.lastQueryError = err;\r\n    }\r\n  }\r\n\r\n  migrateTimeGrains() {\r\n    if (this.target.azureMonitor.timeGrainUnit) {\r\n      if (this.target.azureMonitor.timeGrain !== 'auto') {\r\n        this.target.azureMonitor.timeGrain = TimegrainConverter.createISO8601Duration(\r\n          this.target.azureMonitor.timeGrain,\r\n          this.target.azureMonitor.timeGrainUnit\r\n        );\r\n      }\r\n\r\n      delete this.target.azureMonitor.timeGrainUnit;\r\n      this.onMetricNameChange();\r\n    }\r\n\r\n    if (this.target.appInsights.timeGrainUnit) {\r\n      if (this.target.appInsights.timeGrain !== 'auto') {\r\n        if (this.target.appInsights.timeGrainCount) {\r\n          this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\r\n            this.target.appInsights.timeGrainCount,\r\n            this.target.appInsights.timeGrainUnit\r\n          );\r\n        } else {\r\n          this.target.appInsights.timeGrainCount = this.target.appInsights.timeGrain;\r\n          this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\r\n            this.target.appInsights.timeGrain,\r\n            this.target.appInsights.timeGrainUnit\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    if (\r\n      this.target.azureMonitor.timeGrains &&\r\n      this.target.azureMonitor.timeGrains.length > 0 &&\r\n      (!this.target.azureMonitor.allowedTimeGrainsMs || this.target.azureMonitor.allowedTimeGrainsMs.length === 0)\r\n    ) {\r\n      this.target.azureMonitor.allowedTimeGrainsMs = this.convertTimeGrainsToMs(this.target.azureMonitor.timeGrains);\r\n    }\r\n\r\n    if (\r\n      this.target.appInsights.timeGrains &&\r\n      this.target.appInsights.timeGrains.length > 0 &&\r\n      (!this.target.appInsights.allowedTimeGrainsMs || this.target.appInsights.allowedTimeGrainsMs.length === 0)\r\n    ) {\r\n      this.target.appInsights.allowedTimeGrainsMs = this.convertTimeGrainsToMs(this.target.appInsights.timeGrains);\r\n    }\r\n  }\r\n\r\n  migrateToFromTimes() {\r\n    this.target.azureLogAnalytics.query = this.target.azureLogAnalytics.query.replace(/\\$__from\\s/gi, '$__timeFrom() ');\r\n    this.target.azureLogAnalytics.query = this.target.azureLogAnalytics.query.replace(/\\$__to\\s/gi, '$__timeTo() ');\r\n  }\r\n\r\n  async migrateToDefaultNamespace() {\r\n    if (\r\n      this.target.azureMonitor.metricNamespace &&\r\n      this.target.azureMonitor.metricNamespace !== this.defaultDropdownValue &&\r\n      this.target.azureMonitor.metricDefinition\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    this.target.azureMonitor.metricNamespace = this.target.azureMonitor.metricDefinition;\r\n  }\r\n\r\n  migrateApplicationInsightsKeys(): void {\r\n    const appInsights = this.target.appInsights as any;\r\n\r\n    // Migrate old app insights data keys to match other datasources\r\n    const mappings = {\r\n      xaxis: 'timeColumn',\r\n      yaxis: 'valueColumn',\r\n      spliton: 'segmentColumn',\r\n      groupBy: 'dimension',\r\n      groupByOptions: 'dimensions',\r\n      filter: 'dimensionFilter',\r\n    } as { [old: string]: string };\r\n\r\n    for (const old in mappings) {\r\n      if (appInsights[old]) {\r\n        appInsights[mappings[old]] = appInsights[old];\r\n        delete appInsights[old];\r\n      }\r\n    }\r\n  }\r\n\r\n  replace(variable: string) {\r\n    return this.templateSrv.replace(variable, this.panelCtrl.panel.scopedVars);\r\n  }\r\n\r\n  onQueryTypeChange() {\r\n    if (this.target.queryType === 'Azure Log Analytics') {\r\n      return this.getWorkspaces();\r\n    }\r\n  }\r\n\r\n  getSubscriptions() {\r\n    if (!this.datasource.azureMonitorDatasource.isConfigured()) {\r\n      return;\r\n    }\r\n\r\n    return this.datasource.azureMonitorDatasource.getSubscriptions().then((subs: any) => {\r\n      this.subscriptions = subs;\r\n      if (!this.target.subscription && this.target.queryType === 'Azure Monitor') {\r\n        this.target.subscription = this.datasource.azureMonitorDatasource.subscriptionId;\r\n      } else if (!this.target.subscription && this.target.queryType === 'Azure Log Analytics') {\r\n        this.target.subscription = this.datasource.azureLogAnalyticsDatasource.logAnalyticsSubscriptionId;\r\n      }\r\n\r\n      if (!this.target.subscription && this.subscriptions.length > 0) {\r\n        this.target.subscription = this.subscriptions[0].value;\r\n      }\r\n\r\n      return this.subscriptions;\r\n    });\r\n  }\r\n\r\n  onSubscriptionChange() {\r\n    if (this.target.queryType === 'Azure Log Analytics') {\r\n      return this.getWorkspaces();\r\n    }\r\n\r\n    if (this.target.queryType === 'Azure Monitor') {\r\n      this.target.azureMonitor.resourceGroup = this.defaultDropdownValue;\r\n      this.target.azureMonitor.metricDefinition = this.defaultDropdownValue;\r\n      this.target.azureMonitor.resourceName = this.defaultDropdownValue;\r\n      this.target.azureMonitor.metricName = this.defaultDropdownValue;\r\n      this.target.azureMonitor.aggregation = '';\r\n      this.target.azureMonitor.timeGrains = [];\r\n      this.target.azureMonitor.timeGrain = '';\r\n      this.target.azureMonitor.dimensions = [];\r\n      this.target.azureMonitor.dimension = '';\r\n    }\r\n  }\r\n\r\n  /* Azure Monitor Section */\r\n  getResourceGroups(query: any) {\r\n    if (this.target.queryType !== 'Azure Monitor' || !this.datasource.azureMonitorDatasource.isConfigured()) {\r\n      return;\r\n    }\r\n\r\n    return this.datasource\r\n      .getResourceGroups(\r\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId)\r\n      )\r\n      .catch(this.handleQueryCtrlError.bind(this));\r\n  }\r\n\r\n  getMetricDefinitions(query: any) {\r\n    if (\r\n      this.target.queryType !== 'Azure Monitor' ||\r\n      !this.target.azureMonitor.resourceGroup ||\r\n      this.target.azureMonitor.resourceGroup === this.defaultDropdownValue\r\n    ) {\r\n      return;\r\n    }\r\n    return this.datasource\r\n      .getMetricDefinitions(\r\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId),\r\n        this.replace(this.target.azureMonitor.resourceGroup)\r\n      )\r\n      .catch(this.handleQueryCtrlError.bind(this));\r\n  }\r\n\r\n  getResourceNames(query: any) {\r\n    if (\r\n      this.target.queryType !== 'Azure Monitor' ||\r\n      !this.target.azureMonitor.resourceGroup ||\r\n      this.target.azureMonitor.resourceGroup === this.defaultDropdownValue ||\r\n      !this.target.azureMonitor.metricDefinition ||\r\n      this.target.azureMonitor.metricDefinition === this.defaultDropdownValue\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return this.datasource\r\n      .getResourceNames(\r\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId),\r\n        this.replace(this.target.azureMonitor.resourceGroup),\r\n        this.replace(this.target.azureMonitor.metricDefinition)\r\n      )\r\n      .catch(this.handleQueryCtrlError.bind(this));\r\n  }\r\n\r\n  getMetricNamespaces() {\r\n    if (\r\n      this.target.queryType !== 'Azure Monitor' ||\r\n      !this.target.azureMonitor.resourceGroup ||\r\n      this.target.azureMonitor.resourceGroup === this.defaultDropdownValue ||\r\n      !this.target.azureMonitor.metricDefinition ||\r\n      this.target.azureMonitor.metricDefinition === this.defaultDropdownValue ||\r\n      !this.target.azureMonitor.resourceName ||\r\n      this.target.azureMonitor.resourceName === this.defaultDropdownValue\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return this.datasource\r\n      .getMetricNamespaces(\r\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId),\r\n        this.replace(this.target.azureMonitor.resourceGroup),\r\n        this.replace(this.target.azureMonitor.metricDefinition),\r\n        this.replace(this.target.azureMonitor.resourceName)\r\n      )\r\n      .catch(this.handleQueryCtrlError.bind(this));\r\n  }\r\n\r\n  getMetricNames() {\r\n    if (\r\n      this.target.queryType !== 'Azure Monitor' ||\r\n      !this.target.azureMonitor.resourceGroup ||\r\n      this.target.azureMonitor.resourceGroup === this.defaultDropdownValue ||\r\n      !this.target.azureMonitor.metricDefinition ||\r\n      this.target.azureMonitor.metricDefinition === this.defaultDropdownValue ||\r\n      !this.target.azureMonitor.resourceName ||\r\n      this.target.azureMonitor.resourceName === this.defaultDropdownValue ||\r\n      !this.target.azureMonitor.metricNamespace ||\r\n      this.target.azureMonitor.metricNamespace === this.defaultDropdownValue\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return this.datasource\r\n      .getMetricNames(\r\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId),\r\n        this.replace(this.target.azureMonitor.resourceGroup),\r\n        this.replace(this.target.azureMonitor.metricDefinition),\r\n        this.replace(this.target.azureMonitor.resourceName),\r\n        this.replace(this.target.azureMonitor.metricNamespace)\r\n      )\r\n      .catch(this.handleQueryCtrlError.bind(this));\r\n  }\r\n\r\n  onResourceGroupChange() {\r\n    this.target.azureMonitor.metricDefinition = this.defaultDropdownValue;\r\n    this.target.azureMonitor.resourceName = this.defaultDropdownValue;\r\n    this.target.azureMonitor.metricNamespace = this.defaultDropdownValue;\r\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\r\n    this.target.azureMonitor.aggregation = '';\r\n    this.target.azureMonitor.timeGrains = [];\r\n    this.target.azureMonitor.timeGrain = '';\r\n    this.target.azureMonitor.dimensions = [];\r\n    this.target.azureMonitor.dimension = '';\r\n    this.refresh();\r\n  }\r\n\r\n  onMetricDefinitionChange() {\r\n    this.target.azureMonitor.resourceName = this.defaultDropdownValue;\r\n    this.target.azureMonitor.metricNamespace = this.defaultDropdownValue;\r\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\r\n    this.target.azureMonitor.aggregation = '';\r\n    this.target.azureMonitor.timeGrains = [];\r\n    this.target.azureMonitor.timeGrain = '';\r\n    this.target.azureMonitor.dimensions = [];\r\n    this.target.azureMonitor.dimension = '';\r\n  }\r\n\r\n  onResourceNameChange() {\r\n    this.target.azureMonitor.metricNamespace = this.defaultDropdownValue;\r\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\r\n    this.target.azureMonitor.aggregation = '';\r\n    this.target.azureMonitor.timeGrains = [];\r\n    this.target.azureMonitor.timeGrain = '';\r\n    this.target.azureMonitor.dimensions = [];\r\n    this.target.azureMonitor.dimension = '';\r\n    this.refresh();\r\n  }\r\n\r\n  onMetricNamespacesChange() {\r\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\r\n    this.target.azureMonitor.dimensions = [];\r\n    this.target.azureMonitor.dimension = '';\r\n  }\r\n\r\n  onMetricNameChange(): IPromise<void> {\r\n    if (!this.target.azureMonitor.metricName || this.target.azureMonitor.metricName === this.defaultDropdownValue) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return this.datasource\r\n      .getMetricMetadata(\r\n        this.replace(this.target.subscription),\r\n        this.replace(this.target.azureMonitor.resourceGroup),\r\n        this.replace(this.target.azureMonitor.metricDefinition),\r\n        this.replace(this.target.azureMonitor.resourceName),\r\n        this.replace(this.target.azureMonitor.metricNamespace),\r\n        this.replace(this.target.azureMonitor.metricName)\r\n      )\r\n      .then((metadata: any) => {\r\n        this.target.azureMonitor.aggOptions = metadata.supportedAggTypes || [metadata.primaryAggType];\r\n        this.target.azureMonitor.aggregation = metadata.primaryAggType;\r\n        this.target.azureMonitor.timeGrains = [{ text: 'auto', value: 'auto' }].concat(metadata.supportedTimeGrains);\r\n        this.target.azureMonitor.timeGrain = 'auto';\r\n\r\n        this.target.azureMonitor.allowedTimeGrainsMs = this.convertTimeGrainsToMs(metadata.supportedTimeGrains || []);\r\n\r\n        this.target.azureMonitor.dimensions = metadata.dimensions;\r\n        if (metadata.dimensions.length > 0) {\r\n          this.target.azureMonitor.dimension = metadata.dimensions[0].value;\r\n        }\r\n\r\n        return this.refresh();\r\n      })\r\n      .catch(this.handleQueryCtrlError.bind(this));\r\n  }\r\n\r\n  convertTimeGrainsToMs(timeGrains: Array<{ text: string; value: string }>) {\r\n    const allowedTimeGrainsMs: number[] = [];\r\n    timeGrains.forEach((tg: any) => {\r\n      if (tg.value !== 'auto') {\r\n        allowedTimeGrainsMs.push(kbn.interval_to_ms(TimegrainConverter.createKbnUnitFromISO8601Duration(tg.value)));\r\n      }\r\n    });\r\n    return allowedTimeGrainsMs;\r\n  }\r\n\r\n  generateAutoUnits(timeGrain: string, timeGrains: Array<{ value: string }>) {\r\n    if (timeGrain === 'auto') {\r\n      return TimegrainConverter.findClosestTimeGrain(\r\n        this.templateSrv.getBuiltInIntervalValue(),\r\n        _.map(timeGrains, o => TimegrainConverter.createKbnUnitFromISO8601Duration(o.value)) || [\r\n          '1m',\r\n          '5m',\r\n          '15m',\r\n          '30m',\r\n          '1h',\r\n          '6h',\r\n          '12h',\r\n          '1d',\r\n        ]\r\n      );\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  getAzureMonitorAutoInterval() {\r\n    return this.generateAutoUnits(this.target.azureMonitor.timeGrain, this.target.azureMonitor.timeGrains);\r\n  }\r\n\r\n  getApplicationInsightAutoInterval() {\r\n    return this.generateAutoUnits(this.target.appInsights.timeGrain, this.target.appInsights.timeGrains);\r\n  }\r\n\r\n  /* Azure Log Analytics */\r\n\r\n  getWorkspaces = () => {\r\n    return this.datasource.azureLogAnalyticsDatasource\r\n      .getWorkspaces(this.target.subscription)\r\n      .then((list: any[]) => {\r\n        this.workspaces = list;\r\n\r\n        if (list.length > 0 && !this.target.azureLogAnalytics.workspace) {\r\n          if (this.datasource.azureLogAnalyticsDatasource.defaultOrFirstWorkspace) {\r\n            this.target.azureLogAnalytics.workspace = this.datasource.azureLogAnalyticsDatasource.defaultOrFirstWorkspace;\r\n          }\r\n\r\n          if (!this.target.azureLogAnalytics.workspace) {\r\n            this.target.azureLogAnalytics.workspace = list[0].value;\r\n          }\r\n        }\r\n\r\n        return this.workspaces;\r\n      })\r\n      .catch(this.handleQueryCtrlError.bind(this));\r\n  };\r\n\r\n  getAzureLogAnalyticsSchema = () => {\r\n    return this.getWorkspaces()\r\n      .then(() => {\r\n        return this.datasource.azureLogAnalyticsDatasource.getSchema(this.target.azureLogAnalytics.workspace);\r\n      })\r\n      .catch(this.handleQueryCtrlError.bind(this));\r\n  };\r\n\r\n  onLogAnalyticsQueryChange = (nextQuery: string) => {\r\n    this.target.azureLogAnalytics.query = nextQuery;\r\n  };\r\n\r\n  onLogAnalyticsQueryExecute = () => {\r\n    this.panelCtrl.refresh();\r\n  };\r\n\r\n  get templateVariables() {\r\n    return this.templateSrv.variables.map(t => '$' + t.name);\r\n  }\r\n\r\n  /* Application Insights Section */\r\n\r\n  getAppInsightsAutoInterval() {\r\n    const interval = this.templateSrv.getBuiltInIntervalValue();\r\n    if (interval[interval.length - 1] === 's') {\r\n      return '1m';\r\n    }\r\n    return interval;\r\n  }\r\n\r\n  getAppInsightsMetricNames() {\r\n    if (!this.datasource.appInsightsDatasource.isConfigured()) {\r\n      return;\r\n    }\r\n\r\n    return this.datasource.getAppInsightsMetricNames().catch(this.handleQueryCtrlError.bind(this));\r\n  }\r\n\r\n  getAppInsightsColumns() {\r\n    return this.datasource.getAppInsightsColumns(this.target.refId);\r\n  }\r\n\r\n  onAppInsightsColumnChange() {\r\n    return this.refresh();\r\n  }\r\n\r\n  onAppInsightsMetricNameChange() {\r\n    if (!this.target.appInsights.metricName || this.target.appInsights.metricName === this.defaultDropdownValue) {\r\n      return;\r\n    }\r\n\r\n    return this.datasource\r\n      .getAppInsightsMetricMetadata(this.replace(this.target.appInsights.metricName))\r\n      .then((aggData: { supportedAggTypes: string[]; supportedGroupBy: string[]; primaryAggType: string }) => {\r\n        this.target.appInsights.aggOptions = aggData.supportedAggTypes;\r\n        this.target.appInsights.dimensions = aggData.supportedGroupBy;\r\n        this.target.appInsights.aggregation = aggData.primaryAggType;\r\n        return this.refresh();\r\n      })\r\n      .catch(this.handleQueryCtrlError.bind(this));\r\n  }\r\n\r\n  onAppInsightsQueryChange = (nextQuery: string) => {\r\n    this.target.appInsights.rawQueryString = nextQuery;\r\n  };\r\n\r\n  onAppInsightsQueryExecute = () => {\r\n    return this.refresh();\r\n  };\r\n\r\n  getAppInsightsQuerySchema = () => {\r\n    return this.datasource.appInsightsDatasource.getQuerySchema().catch(this.handleQueryCtrlError.bind(this));\r\n  };\r\n\r\n  getAppInsightsGroupBySegments(query: any) {\r\n    return _.map(this.target.appInsights.dimensions, (option: string) => {\r\n      return { text: option, value: option };\r\n    });\r\n  }\r\n\r\n  resetAppInsightsGroupBy() {\r\n    this.target.appInsights.dimension = 'none';\r\n    this.refresh();\r\n  }\r\n\r\n  toggleEditorMode() {\r\n    this.target.appInsights.rawQuery = !this.target.appInsights.rawQuery;\r\n  }\r\n\r\n  updateTimeGrainType() {\r\n    if (this.target.appInsights.timeGrainType === 'specific') {\r\n      this.target.appInsights.timeGrainCount = '1';\r\n      this.target.appInsights.timeGrainUnit = 'minute';\r\n      this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\r\n        this.target.appInsights.timeGrainCount,\r\n        this.target.appInsights.timeGrainUnit\r\n      );\r\n    } else {\r\n      this.target.appInsights.timeGrainCount = '';\r\n      this.target.appInsights.timeGrainUnit = '';\r\n    }\r\n  }\r\n\r\n  updateAppInsightsTimeGrain() {\r\n    if (this.target.appInsights.timeGrainUnit && this.target.appInsights.timeGrainCount) {\r\n      this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\r\n        this.target.appInsights.timeGrainCount,\r\n        this.target.appInsights.timeGrainUnit\r\n      );\r\n    }\r\n    this.refresh();\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport kbn from 'app/core/utils/kbn';\r\n\r\nexport default class TimeGrainConverter {\r\n  static createISO8601Duration(timeGrain: string | number, timeGrainUnit: any) {\r\n    const timeIntervals = ['hour', 'minute', 'h', 'm'];\r\n    if (_.includes(timeIntervals, timeGrainUnit)) {\r\n      return `PT${timeGrain}${timeGrainUnit[0].toUpperCase()}`;\r\n    }\r\n\r\n    return `P${timeGrain}${timeGrainUnit[0].toUpperCase()}`;\r\n  }\r\n\r\n  static createISO8601DurationFromInterval(interval: string) {\r\n    const timeGrain = +interval.slice(0, interval.length - 1);\r\n    const unit = interval[interval.length - 1];\r\n\r\n    if (interval.indexOf('ms') > -1) {\r\n      return TimeGrainConverter.createISO8601Duration(1, 'm');\r\n    }\r\n\r\n    if (interval[interval.length - 1] === 's') {\r\n      let toMinutes = (timeGrain * 60) % 60;\r\n\r\n      if (toMinutes < 1) {\r\n        toMinutes = 1;\r\n      }\r\n\r\n      return TimeGrainConverter.createISO8601Duration(toMinutes, 'm');\r\n    }\r\n\r\n    return TimeGrainConverter.createISO8601Duration(timeGrain, unit);\r\n  }\r\n\r\n  static findClosestTimeGrain(interval: any, allowedTimeGrains: string[]) {\r\n    const timeGrains = _.filter(allowedTimeGrains, o => o !== 'auto');\r\n\r\n    let closest = timeGrains[0];\r\n    const intervalMs = kbn.interval_to_ms(interval);\r\n\r\n    for (let i = 0; i < timeGrains.length; i++) {\r\n      // abs (num - val) < abs (num - curr):\r\n      if (intervalMs > kbn.interval_to_ms(timeGrains[i])) {\r\n        if (i + 1 < timeGrains.length) {\r\n          closest = timeGrains[i + 1];\r\n        } else {\r\n          closest = timeGrains[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    return closest;\r\n  }\r\n\r\n  static createTimeGrainFromISO8601Duration(duration: string) {\r\n    let offset = 1;\r\n    if (duration.substring(0, 2) === 'PT') {\r\n      offset = 2;\r\n    }\r\n\r\n    const value = duration.substring(offset, duration.length - 1);\r\n    const unit = duration.substring(duration.length - 1);\r\n\r\n    return value + ' ' + TimeGrainConverter.timeUnitToText(+value, unit);\r\n  }\r\n\r\n  static timeUnitToText(value: number, unit: string) {\r\n    let text = '';\r\n\r\n    if (unit === 'S') {\r\n      text = 'second';\r\n    }\r\n    if (unit === 'M') {\r\n      text = 'minute';\r\n    }\r\n    if (unit === 'H') {\r\n      text = 'hour';\r\n    }\r\n    if (unit === 'D') {\r\n      text = 'day';\r\n    }\r\n\r\n    if (value > 1) {\r\n      return text + 's';\r\n    }\r\n\r\n    return text;\r\n  }\r\n\r\n  static createKbnUnitFromISO8601Duration(duration: string) {\r\n    if (duration === 'auto') {\r\n      return 'auto';\r\n    }\r\n\r\n    let offset = 1;\r\n    if (duration.substring(0, 2) === 'PT') {\r\n      offset = 2;\r\n    }\r\n\r\n    const value = duration.substring(offset, duration.length - 1);\r\n    const unit = duration.substring(duration.length - 1);\r\n\r\n    return value + TimeGrainConverter.timeUnitToKbn(+value, unit);\r\n  }\r\n\r\n  static timeUnitToKbn(value: number, unit: string) {\r\n    if (unit === 'S') {\r\n      return 's';\r\n    }\r\n    if (unit === 'M') {\r\n      return 'm';\r\n    }\r\n    if (unit === 'H') {\r\n      return 'h';\r\n    }\r\n    if (unit === 'D') {\r\n      return 'd';\r\n    }\r\n\r\n    return '';\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AAIA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;AACA;AACA;;AAEA;AACA;AAAA;AACA;AACA;;;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC/HA;AAUA;AACA;AAAA;AAAA;AAJA;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AA3DA;AACA;AACA;AACA;AAEA;;;;AACA;;AAAA;AACA;;AAAA;;;;;AACA;AAEA;;;;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AAEA;;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAkBA;AAAA;AACA;AACA;;;AAAA;AA1EA;AA2EA;AAAA;AA5EA;;;;;;;;;;;;;;;;;;;;;ACFA;AAIA;AAEA;AAEA;AAMA;AAQA;AACA;AAEA;AACA;AARA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;AC/QA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;AC7OA;AACA;AACA;AAMA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AC9UA;AACA;AAYA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA;;AAEA;AAAA;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;;;;;;;;;AACA;;;;;;;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AC7NA;AACA;AACA;AACA;AACA;AASA;AAIA;AAaA;AACA;AACA;AACA;AACA;AAhBA;AACA;AAOA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AAEA;AAOA;AAUA;AACA;AACA;AACA;AAEA;AAQA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;AClcA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AA0KA;AAzlPA;AAAA;AAAA;AAqDA;AApDA;AAQA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AASA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AAEA;AAIA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACrDA;AAEA;AACA;AAeA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAWA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AA+FA;AA7FA;AAAA;AACA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAMA;AAEA;AACA;AAIA;AAgBA;AACA;AACA;AACA;AAMA;AACA;AASA;AACA;AACA;AACA;AAeA;AACA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;AC9LA;AAEA;AAoBA;AAAA;AAAA;;AAoIA;AAnIA;AACA;AAiBA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAGA;AAUA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AACA;AACA;AAUA;AAEA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAiBA;AACA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5JA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AAAA;AACA;AAAA;AAkBA;AACA;AACA;AAeA;;;AACA;;AAAA;AAEA;AACA;;AAAA;;;;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAeA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;;;AACA;AACA;AACA;AACA;AACA;;AAJA;AAMA;AACA;AACA;AAAA;AACA;AACA;;;;AACA;AAEA;;;;;AACA;AAEA;AACA;AACA;AACA;;AAHA;AAKA;;;AACA;AAEA;;;;;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;;AAHA;AAKA;;;AACA;AAEA;;;;;AACA;AACA;AACA;AAEA;;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;AAAA;;;;;AAEA;AAEA;;;;;AACA;AACA;AACA;AAEA;;AAAA;AACA;AAEA;AACA;AAEA;AAIA;AAEA;AACA;;AAAA;;;;;AAEA;AAEA;;;;;AACA;AACA;AACA;AACA;AAEA;;AAAA;AAIA;AACA;AAEA;AAIA;;;;AACA;AA1OA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA8MA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAUA;AAaA;AAGA;AACA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;AClTA;AACA;AAQA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAqDA;AAnDA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AAWA;AACA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;AC3EA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAYA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AA2BA;AAzBA;AACA;AACA;AAEA;AACA;AAmBA;AACA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AChFA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AAKA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AAEA;;AAKA;AAEA;;;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AACA;AAEA;;;AACA;;;AACA;AAEA;;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AACA;AAEA;;;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAOA;AAOA;AAEA;AACA;AAMA;AAEA;AAQA;AAQA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACzNA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AA4BA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAKA;AAAA;AAYA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAvLA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AAilcA;AACA;AAEA;AACA;AAYA;AAAA;AAKA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AArBA;AACA;AACA;AACA;;AACA;AAmBA;AACA;AACA;AAEA;AAEA;AAYA;AA/CA;AACA;AACA;AA8CA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChsBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAMA;AAAA;AAFA;AAsxQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AA+IA;AACA;AACA;AAEA;AACA;AACA;AAsFA;AACA;AAEA;AACA;AAaA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;;;;AC3VA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;;AAaA;AArBA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AAEA;AAAA;AAAA;;AAwBA;AAvBA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AASA;AAIA;AACA;AAAA;AAEA;AAAA;AAAA;;AAWA;AAVA;AACA;AACA;AAOA;AACA;AAAA;AAEA;;;;;;;;;;;;;AC5EA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;AC1FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AAKA;AAOA;AAAA;AA4GA;AACA;AAAA;AAAA;AA1GA;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiaA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAgDA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAlfA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAyCA;AAAA;AACA;AACA;;;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAxoBA;AAyoBA;AAAA;AA1oBA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAsHA;AArHA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;;;;;;A","sourceRoot":""}