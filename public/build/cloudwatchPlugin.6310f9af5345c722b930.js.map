{"version":3,"file":"cloudwatchPlugin.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/core/utils/CancelablePromise.ts","webpack:///webpack:///./public/app/plugins/datasource/cloudwatch/annotations_query_ctrl.ts","webpack:///webpack:///./public/app/plugins/datasource/cloudwatch/components/ConfigEditor.tsx","webpack:///webpack:///./public/app/plugins/datasource/cloudwatch/components/QueryEditor.tsx","webpack:///webpack:///./public/app/plugins/datasource/cloudwatch/components/ThrottlingErrorMessage.tsx","webpack:///webpack:///./public/app/plugins/datasource/cloudwatch/datasource.ts","webpack:///webpack:///./public/app/plugins/datasource/cloudwatch/memoizedDebounce.ts","webpack:///webpack:///./public/app/plugins/datasource/cloudwatch/module.tsx","webpack:///webpack:///./public/app/plugins/datasource/cloudwatch/query_parameter_ctrl.ts"],"sourcesContent":["// https://github.com/facebook/react/issues/5465\r\n\r\nexport interface CancelablePromise<T> {\r\n  promise: Promise<T>;\r\n  cancel: () => void;\r\n}\r\n\r\nexport const makePromiseCancelable = <T>(promise: Promise<T>): CancelablePromise<T> => {\r\n  let hasCanceled_ = false;\r\n\r\n  const wrappedPromise = new Promise<T>((resolve, reject) => {\r\n    promise.then(val => (hasCanceled_ ? reject({ isCanceled: true }) : resolve(val)));\r\n    promise.catch(error => (hasCanceled_ ? reject({ isCanceled: true }) : reject(error)));\r\n  });\r\n\r\n  return {\r\n    promise: wrappedPromise,\r\n    cancel() {\r\n      hasCanceled_ = true;\r\n    },\r\n  };\r\n};\r\n","import _ from 'lodash';\r\nimport { AnnotationQuery } from './types';\r\n\r\nexport class CloudWatchAnnotationsQueryCtrl {\r\n  static templateUrl = 'partials/annotations.editor.html';\r\n  annotation: any;\r\n\r\n  /** @ngInject */\r\n  constructor() {\r\n    _.defaultsDeep(this.annotation, {\r\n      namespace: '',\r\n      metricName: '',\r\n      expression: '',\r\n      dimensions: {},\r\n      region: 'default',\r\n      id: '',\r\n      alias: '',\r\n      statistics: ['Average'],\r\n      matchExact: true,\r\n      prefixMatching: false,\r\n      actionPrefix: '',\r\n      alarmNamePrefix: '',\r\n    });\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n\r\n  onChange(query: AnnotationQuery) {\r\n    Object.assign(this.annotation, query);\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport { FormLabel, Select, Input, Button } from '@grafana/ui';\r\nimport {\r\n  DataSourcePluginOptionsEditorProps,\r\n  onUpdateDatasourceJsonDataOptionSelect,\r\n  onUpdateDatasourceOption,\r\n  onUpdateDatasourceResetOption,\r\n  onUpdateDatasourceJsonDataOption,\r\n  onUpdateDatasourceSecureJsonDataOption,\r\n} from '@grafana/data';\r\nimport { SelectableValue } from '@grafana/data';\r\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\r\nimport CloudWatchDatasource from '../datasource';\r\nimport { CloudWatchJsonData, CloudWatchSecureJsonData } from '../types';\r\nimport { CancelablePromise, makePromiseCancelable } from 'app/core/utils/CancelablePromise';\r\n\r\nconst authProviderOptions = [\r\n  { label: 'Access & secret key', value: 'keys' },\r\n  { label: 'Credentials file', value: 'credentials' },\r\n  { label: 'ARN', value: 'arn' },\r\n] as SelectableValue[];\r\n\r\nexport type Props = DataSourcePluginOptionsEditorProps<CloudWatchJsonData, CloudWatchSecureJsonData>;\r\n\r\nexport interface State {\r\n  regions: SelectableValue[];\r\n}\r\n\r\nexport class ConfigEditor extends PureComponent<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      regions: [],\r\n    };\r\n  }\r\n\r\n  loadRegionsPromise: CancelablePromise<any> = null;\r\n\r\n  componentDidMount() {\r\n    this.loadRegionsPromise = makePromiseCancelable(this.loadRegions());\r\n    this.loadRegionsPromise.promise.catch(({ isCanceled }) => {\r\n      if (isCanceled) {\r\n        console.warn('Cloud Watch ConfigEditor has unmounted, intialization was canceled');\r\n      }\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.loadRegionsPromise) {\r\n      this.loadRegionsPromise.cancel();\r\n    }\r\n  }\r\n\r\n  async loadRegions() {\r\n    await getDatasourceSrv()\r\n      .loadDatasource(this.props.options.name)\r\n      .then((ds: CloudWatchDatasource) => {\r\n        return ds.getRegions();\r\n      })\r\n      .then(\r\n        (regions: any) => {\r\n          this.setState({\r\n            regions: regions.map((region: any) => {\r\n              return {\r\n                value: region.value,\r\n                label: region.text,\r\n              };\r\n            }),\r\n          });\r\n        },\r\n        (err: any) => {\r\n          const regions = [\r\n            'ap-east-1',\r\n            'ap-northeast-1',\r\n            'ap-northeast-2',\r\n            'ap-northeast-3',\r\n            'ap-south-1',\r\n            'ap-southeast-1',\r\n            'ap-southeast-2',\r\n            'ca-central-1',\r\n            'cn-north-1',\r\n            'cn-northwest-1',\r\n            'eu-central-1',\r\n            'eu-north-1',\r\n            'eu-west-1',\r\n            'eu-west-2',\r\n            'eu-west-3',\r\n            'me-south-1',\r\n            'sa-east-1',\r\n            'us-east-1',\r\n            'us-east-2',\r\n            'us-gov-east-1',\r\n            'us-gov-west-1',\r\n            'us-iso-east-1',\r\n            'us-isob-east-1',\r\n            'us-west-1',\r\n            'us-west-2',\r\n          ];\r\n\r\n          this.setState({\r\n            regions: regions.map((region: string) => {\r\n              return {\r\n                value: region,\r\n                label: region,\r\n              };\r\n            }),\r\n          });\r\n\r\n          // expected to fail when creating new datasource\r\n          // console.error('failed to get latest regions', err);\r\n        }\r\n      );\r\n  }\r\n\r\n  render() {\r\n    const { regions } = this.state;\r\n    const { options } = this.props;\r\n    const secureJsonData = (options.secureJsonData || {}) as CloudWatchSecureJsonData;\r\n\r\n    return (\r\n      <>\r\n        <h3 className=\"page-heading\">CloudWatch Details</h3>\r\n        <div className=\"gf-form-group\">\r\n          <div className=\"gf-form-inline\">\r\n            <div className=\"gf-form\">\r\n              <FormLabel className=\"width-14\">Auth Provider</FormLabel>\r\n              <Select\r\n                className=\"width-30\"\r\n                value={authProviderOptions.find(authProvider => authProvider.value === options.jsonData.authType)}\r\n                options={authProviderOptions}\r\n                defaultValue={options.jsonData.authType}\r\n                onChange={onUpdateDatasourceJsonDataOptionSelect(this.props, 'authType')}\r\n              />\r\n            </div>\r\n          </div>\r\n          {options.jsonData.authType === 'credentials' && (\r\n            <div className=\"gf-form-inline\">\r\n              <div className=\"gf-form\">\r\n                <FormLabel\r\n                  className=\"width-14\"\r\n                  tooltip=\"Credentials profile name, as specified in ~/.aws/credentials, leave blank for default.\"\r\n                >\r\n                  Credentials Profile Name\r\n                </FormLabel>\r\n                <div className=\"width-30\">\r\n                  <Input\r\n                    className=\"width-30\"\r\n                    placeholder=\"default\"\r\n                    value={options.jsonData.database}\r\n                    onChange={onUpdateDatasourceOption(this.props, 'database')}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {options.jsonData.authType === 'keys' && (\r\n            <div>\r\n              {options.secureJsonFields.accessKey ? (\r\n                <div className=\"gf-form-inline\">\r\n                  <div className=\"gf-form\">\r\n                    <FormLabel className=\"width-14\">Access Key ID</FormLabel>\r\n                    <Input className=\"width-25\" placeholder=\"Configured\" disabled={true} />\r\n                  </div>\r\n                  <div className=\"gf-form\">\r\n                    <div className=\"max-width-30 gf-form-inline\">\r\n                      <Button\r\n                        variant=\"secondary\"\r\n                        type=\"button\"\r\n                        onClick={onUpdateDatasourceResetOption(this.props, 'accessKey')}\r\n                      >\r\n                        Reset\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"gf-form-inline\">\r\n                  <div className=\"gf-form\">\r\n                    <FormLabel className=\"width-14\">Access Key ID</FormLabel>\r\n                    <div className=\"width-30\">\r\n                      <Input\r\n                        className=\"width-30\"\r\n                        value={secureJsonData.accessKey || ''}\r\n                        onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'accessKey')}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              {options.secureJsonFields.secretKey ? (\r\n                <div className=\"gf-form-inline\">\r\n                  <div className=\"gf-form\">\r\n                    <FormLabel className=\"width-14\">Secret Access Key</FormLabel>\r\n                    <Input className=\"width-25\" placeholder=\"Configured\" disabled={true} />\r\n                  </div>\r\n                  <div className=\"gf-form\">\r\n                    <div className=\"max-width-30 gf-form-inline\">\r\n                      <Button\r\n                        variant=\"secondary\"\r\n                        type=\"button\"\r\n                        onClick={onUpdateDatasourceResetOption(this.props, 'secretKey')}\r\n                      >\r\n                        Reset\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"gf-form-inline\">\r\n                  <div className=\"gf-form\">\r\n                    <FormLabel className=\"width-14\">Secret Access Key</FormLabel>\r\n                    <div className=\"width-30\">\r\n                      <Input\r\n                        className=\"width-30\"\r\n                        value={secureJsonData.secretKey || ''}\r\n                        onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'secretKey')}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n          {options.jsonData.authType === 'arn' && (\r\n            <div className=\"gf-form-inline\">\r\n              <div className=\"gf-form\">\r\n                <FormLabel className=\"width-14\" tooltip=\"ARN of Assume Role\">\r\n                  Assume Role ARN\r\n                </FormLabel>\r\n                <div className=\"width-30\">\r\n                  <Input\r\n                    className=\"width-30\"\r\n                    placeholder=\"arn:aws:iam:*\"\r\n                    value={options.jsonData.assumeRoleArn || ''}\r\n                    onChange={onUpdateDatasourceJsonDataOption(this.props, 'assumeRoleArn')}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          <div className=\"gf-form-inline\">\r\n            <div className=\"gf-form\">\r\n              <FormLabel\r\n                className=\"width-14\"\r\n                tooltip=\"Specify the region, such as for US West (Oregon) use ` us-west-2 ` as the region.\"\r\n              >\r\n                Default Region\r\n              </FormLabel>\r\n              <Select\r\n                className=\"width-30\"\r\n                value={regions.find(region => region.value === options.jsonData.defaultRegion)}\r\n                options={regions}\r\n                defaultValue={options.jsonData.defaultRegion}\r\n                onChange={onUpdateDatasourceJsonDataOptionSelect(this.props, 'defaultRegion')}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"gf-form-inline\">\r\n            <div className=\"gf-form\">\r\n              <FormLabel className=\"width-14\" tooltip=\"Namespaces of Custom Metrics.\">\r\n                Custom Metrics\r\n              </FormLabel>\r\n              <Input\r\n                className=\"width-30\"\r\n                placeholder=\"Namespace1,Namespace2\"\r\n                value={options.jsonData.customMetricsNamespaces || ''}\r\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'customMetricsNamespaces')}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ConfigEditor;\r\n","import React, { PureComponent, ChangeEvent } from 'react';\r\nimport { ExploreQueryFieldProps } from '@grafana/data';\r\nimport { Input, ValidationEvents, EventsWithValidation, Switch } from '@grafana/ui';\r\nimport { CloudWatchQuery } from '../types';\r\nimport CloudWatchDatasource from '../datasource';\r\nimport { QueryField, Alias, QueryFieldsEditor } from './';\r\n\r\nexport type Props = ExploreQueryFieldProps<CloudWatchDatasource, CloudWatchQuery>;\r\n\r\ninterface State {\r\n  showMeta: boolean;\r\n}\r\n\r\nconst idValidationEvents: ValidationEvents = {\r\n  [EventsWithValidation.onBlur]: [\r\n    {\r\n      rule: value => new RegExp(/^$|^[a-z][a-zA-Z0-9_]*$/).test(value),\r\n      errorMessage: 'Invalid format. Only alphanumeric characters and underscores are allowed',\r\n    },\r\n  ],\r\n};\r\n\r\nexport class QueryEditor extends PureComponent<Props, State> {\r\n  state: State = { showMeta: false };\r\n\r\n  static getDerivedStateFromProps(props: Props, state: State) {\r\n    const { query } = props;\r\n\r\n    if (!query.namespace) {\r\n      query.namespace = '';\r\n    }\r\n\r\n    if (!query.metricName) {\r\n      query.metricName = '';\r\n    }\r\n\r\n    if (!query.expression) {\r\n      query.expression = '';\r\n    }\r\n\r\n    if (!query.dimensions) {\r\n      query.dimensions = {};\r\n    }\r\n\r\n    if (!query.region) {\r\n      query.region = 'default';\r\n    }\r\n\r\n    if (!query.id) {\r\n      query.id = '';\r\n    }\r\n\r\n    if (!query.alias) {\r\n      query.alias = '';\r\n    }\r\n\r\n    if (!query.statistics || !query.statistics.length) {\r\n      query.statistics = ['Average'];\r\n    }\r\n\r\n    if (!query.hasOwnProperty('matchExact')) {\r\n      query.matchExact = true;\r\n    }\r\n\r\n    return state;\r\n  }\r\n\r\n  onChange(query: CloudWatchQuery) {\r\n    const { onChange, onRunQuery } = this.props;\r\n    onChange(query);\r\n    onRunQuery();\r\n  }\r\n\r\n  render() {\r\n    const { data, query, onRunQuery } = this.props;\r\n    const { showMeta } = this.state;\r\n    const metaDataExist = data && Object.values(data).length && data.state === 'Done';\r\n    return (\r\n      <>\r\n        <QueryFieldsEditor {...this.props}></QueryFieldsEditor>\r\n        {query.statistics.length <= 1 && (\r\n          <div className=\"gf-form-inline\">\r\n            <div className=\"gf-form\">\r\n              <QueryField\r\n                label=\"Id\"\r\n                tooltip=\"Id can include numbers, letters, and underscore, and must start with a lowercase letter.\"\r\n              >\r\n                <Input\r\n                  className=\"gf-form-input width-8\"\r\n                  onBlur={onRunQuery}\r\n                  onChange={(event: ChangeEvent<HTMLInputElement>) =>\r\n                    this.onChange({ ...query, id: event.target.value })\r\n                  }\r\n                  validationEvents={idValidationEvents}\r\n                  value={query.id || ''}\r\n                />\r\n              </QueryField>\r\n            </div>\r\n            <div className=\"gf-form gf-form--grow\">\r\n              <QueryField\r\n                className=\"gf-form--grow\"\r\n                label=\"Expression\"\r\n                tooltip=\"Optionally you can add an expression here. Please note that if a math expression that is referencing other queries is being used, it will not be possible to create an alert rule based on this query\"\r\n              >\r\n                <Input\r\n                  className=\"gf-form-input\"\r\n                  onBlur={onRunQuery}\r\n                  value={query.expression || ''}\r\n                  onChange={(event: ChangeEvent<HTMLInputElement>) =>\r\n                    this.onChange({ ...query, expression: event.target.value })\r\n                  }\r\n                />\r\n              </QueryField>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className=\"gf-form-inline\">\r\n          <div className=\"gf-form\">\r\n            <QueryField label=\"Period\" tooltip=\"Minimum interval between points in seconds\">\r\n              <Input\r\n                className=\"gf-form-input width-8\"\r\n                value={query.period || ''}\r\n                placeholder=\"auto\"\r\n                onBlur={onRunQuery}\r\n                onChange={(event: ChangeEvent<HTMLInputElement>) =>\r\n                  this.onChange({ ...query, period: event.target.value })\r\n                }\r\n              />\r\n            </QueryField>\r\n          </div>\r\n          <div className=\"gf-form\">\r\n            <QueryField\r\n              label=\"Alias\"\r\n              tooltip=\"Alias replacement variables: {{metric}}, {{stat}}, {{namespace}}, {{region}}, {{period}}, {{label}}, {{YOUR_DIMENSION_NAME}}\"\r\n            >\r\n              <Alias value={query.alias} onChange={(value: string) => this.onChange({ ...query, alias: value })} />\r\n            </QueryField>\r\n            <Switch\r\n              label=\"Match Exact\"\r\n              labelClass=\"query-keyword\"\r\n              tooltip=\"Only show metrics that exactly match all defined dimension names.\"\r\n              checked={query.matchExact}\r\n              onChange={() => this.onChange({ ...query, matchExact: !query.matchExact })}\r\n            />\r\n            <label className=\"gf-form-label\">\r\n              <a\r\n                onClick={() =>\r\n                  metaDataExist &&\r\n                  this.setState({\r\n                    showMeta: !showMeta,\r\n                  })\r\n                }\r\n              >\r\n                <i className={`fa fa-caret-${showMeta ? 'down' : 'right'}`} /> {showMeta ? 'Hide' : 'Show'} Query\r\n                Preview\r\n              </a>\r\n            </label>\r\n          </div>\r\n          <div className=\"gf-form gf-form--grow\">\r\n            <div className=\"gf-form-label gf-form-label--grow\" />\r\n          </div>\r\n          {showMeta && metaDataExist && (\r\n            <table className=\"filter-table form-inline\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Metric Data Query ID</th>\r\n                  <th>Metric Data Query Expression</th>\r\n                  <th>Period</th>\r\n                  <th />\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {data.series[0].meta.gmdMeta.map(({ ID, Expression, Period }: any) => (\r\n                  <tr key={ID}>\r\n                    <td>{ID}</td>\r\n                    <td>{Expression}</td>\r\n                    <td>{Period}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          )}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nexport interface Props {\r\n  region: string;\r\n}\r\n\r\nexport const ThrottlingErrorMessage: FunctionComponent<Props> = ({ region }) => (\r\n  <p>\r\n    Please visit the&nbsp;\r\n    <a\r\n      target=\"_blank\"\r\n      className=\"text-link\"\r\n      href={`https://${region}.console.aws.amazon.com/servicequotas/home?region=${region}#!/services/monitoring/quotas/L-5E141212`}\r\n    >\r\n      AWS Service Quotas console\r\n    </a>\r\n    &nbsp;to request a quota increase or see our&nbsp;\r\n    <a\r\n      target=\"_blank\"\r\n      className=\"text-link\"\r\n      href={`https://grafana.com/docs/features/datasources/cloudwatch/#service-quotas`}\r\n    >\r\n      documentation\r\n    </a>\r\n    &nbsp;to learn more.\r\n  </p>\r\n);\r\n","import React from 'react';\r\nimport angular from 'angular';\r\nimport _ from 'lodash';\r\nimport { notifyApp } from 'app/core/actions';\r\nimport { createErrorNotification } from 'app/core/copy/appNotification';\r\nimport { AppNotificationTimeout } from 'app/types';\r\nimport { store } from 'app/store/store';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport {\r\n  dateMath,\r\n  ScopedVars,\r\n  toDataFrame,\r\n  TimeRange,\r\n  DataSourceApi,\r\n  DataQueryRequest,\r\n  DataSourceInstanceSettings,\r\n} from '@grafana/data';\r\nimport { BackendSrv } from 'app/core/services/backend_srv';\r\nimport { TemplateSrv } from 'app/features/templating/template_srv';\r\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\r\nimport { ThrottlingErrorMessage } from './components/ThrottlingErrorMessage';\r\nimport memoizedDebounce from './memoizedDebounce';\r\nimport { CloudWatchQuery, CloudWatchJsonData } from './types';\r\n\r\nconst displayAlert = (datasourceName: string, region: string) =>\r\n  store.dispatch(\r\n    notifyApp(\r\n      createErrorNotification(\r\n        `CloudWatch request limit reached in ${region} for data source ${datasourceName}`,\r\n        '',\r\n        React.createElement(ThrottlingErrorMessage, { region }, null)\r\n      )\r\n    )\r\n  );\r\n\r\nconst displayCustomError = (title: string, message: string) =>\r\n  store.dispatch(notifyApp(createErrorNotification(title, message)));\r\n\r\nexport default class CloudWatchDatasource extends DataSourceApi<CloudWatchQuery, CloudWatchJsonData> {\r\n  type: any;\r\n  proxyUrl: any;\r\n  defaultRegion: any;\r\n  standardStatistics: any;\r\n  datasourceName: string;\r\n  debouncedAlert: (datasourceName: string, region: string) => void;\r\n  debouncedCustomAlert: (title: string, message: string) => void;\r\n\r\n  /** @ngInject */\r\n  constructor(\r\n    instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>,\r\n    private backendSrv: BackendSrv,\r\n    private templateSrv: TemplateSrv,\r\n    private timeSrv: TimeSrv\r\n  ) {\r\n    super(instanceSettings);\r\n    this.type = 'cloudwatch';\r\n    this.proxyUrl = instanceSettings.url;\r\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\r\n    this.datasourceName = instanceSettings.name;\r\n    this.standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount'];\r\n    this.debouncedAlert = memoizedDebounce(displayAlert, AppNotificationTimeout.Error);\r\n    this.debouncedCustomAlert = memoizedDebounce(displayCustomError, AppNotificationTimeout.Error);\r\n  }\r\n\r\n  query(options: DataQueryRequest<CloudWatchQuery>) {\r\n    options = angular.copy(options);\r\n\r\n    const queries = _.filter(options.targets, item => {\r\n      return (\r\n        (item.id !== '' || item.hide !== true) &&\r\n        ((!!item.region && !!item.namespace && !!item.metricName && !_.isEmpty(item.statistics)) ||\r\n          item.expression.length > 0)\r\n      );\r\n    }).map(item => {\r\n      item.region = this.replace(this.getActualRegion(item.region), options.scopedVars, true, 'region');\r\n      item.namespace = this.replace(item.namespace, options.scopedVars, true, 'namespace');\r\n      item.metricName = this.replace(item.metricName, options.scopedVars, true, 'metric name');\r\n      item.dimensions = this.convertDimensionFormat(item.dimensions, options.scopedVars);\r\n      item.statistics = item.statistics.map(stat => this.replace(stat, options.scopedVars, true, 'statistics'));\r\n      item.period = String(this.getPeriod(item, options)); // use string format for period in graph query, and alerting\r\n      item.id = this.templateSrv.replace(item.id, options.scopedVars);\r\n      item.expression = this.templateSrv.replace(item.expression, options.scopedVars);\r\n\r\n      // valid ExtendedStatistics is like p90.00, check the pattern\r\n      const hasInvalidStatistics = item.statistics.some(s => {\r\n        if (s.indexOf('p') === 0) {\r\n          const matches = /^p\\d{2}(?:\\.\\d{1,2})?$/.exec(s);\r\n          return !matches || matches[0] !== s;\r\n        }\r\n\r\n        return false;\r\n      });\r\n\r\n      if (hasInvalidStatistics) {\r\n        throw { message: 'Invalid extended statistics' };\r\n      }\r\n\r\n      return _.extend(\r\n        {\r\n          refId: item.refId,\r\n          intervalMs: options.intervalMs,\r\n          maxDataPoints: options.maxDataPoints,\r\n          datasourceId: this.id,\r\n          type: 'timeSeriesQuery',\r\n        },\r\n        item\r\n      );\r\n    });\r\n\r\n    // No valid targets, return the empty result to save a round trip.\r\n    if (_.isEmpty(queries)) {\r\n      return Promise.resolve({ data: [] });\r\n    }\r\n\r\n    const request = {\r\n      from: options.range.from.valueOf().toString(),\r\n      to: options.range.to.valueOf().toString(),\r\n      queries: queries,\r\n    };\r\n\r\n    return this.performTimeSeriesQuery(request, options.range);\r\n  }\r\n\r\n  get variables() {\r\n    return this.templateSrv.variables.map(v => `$${v.name}`);\r\n  }\r\n\r\n  getPeriod(target: any, options: any) {\r\n    let period = this.templateSrv.replace(target.period, options.scopedVars);\r\n    if (period && period.toLowerCase() !== 'auto') {\r\n      if (/^\\d+$/.test(period)) {\r\n        period = parseInt(period, 10);\r\n      } else {\r\n        period = kbn.interval_to_seconds(period);\r\n      }\r\n\r\n      if (period < 1) {\r\n        period = 1;\r\n      }\r\n    }\r\n\r\n    return period || '';\r\n  }\r\n\r\n  buildCloudwatchConsoleUrl(\r\n    { region, namespace, metricName, dimensions, statistics, expression }: CloudWatchQuery,\r\n    start: string,\r\n    end: string,\r\n    title: string,\r\n    gmdMeta: Array<{ Expression: string; Period: string }>\r\n  ) {\r\n    region = this.getActualRegion(region);\r\n    let conf = {\r\n      view: 'timeSeries',\r\n      stacked: false,\r\n      title,\r\n      start,\r\n      end,\r\n      region,\r\n    } as any;\r\n\r\n    const isSearchExpression =\r\n      gmdMeta && gmdMeta.length && gmdMeta.every(({ Expression: expression }) => /SEARCH().*/.test(expression));\r\n    const isMathExpression = !isSearchExpression && expression;\r\n\r\n    if (isMathExpression) {\r\n      return '';\r\n    }\r\n\r\n    if (isSearchExpression) {\r\n      const metrics: any =\r\n        gmdMeta && gmdMeta.length ? gmdMeta.map(({ Expression: expression }) => ({ expression })) : [{ expression }];\r\n      conf = { ...conf, metrics };\r\n    } else {\r\n      conf = {\r\n        ...conf,\r\n        metrics: [\r\n          ...statistics.map(stat => [\r\n            namespace,\r\n            metricName,\r\n            ...Object.entries(dimensions).reduce((acc, [key, value]) => [...acc, key, value[0]], []),\r\n            {\r\n              stat,\r\n              period: gmdMeta.length ? gmdMeta[0].Period : 60,\r\n            },\r\n          ]),\r\n        ],\r\n      };\r\n    }\r\n\r\n    return `https://${region}.console.aws.amazon.com/cloudwatch/deeplink.js?region=${region}#metricsV2:graph=${encodeURIComponent(\r\n      JSON.stringify(conf)\r\n    )}`;\r\n  }\r\n\r\n  performTimeSeriesQuery(request: any, { from, to }: TimeRange) {\r\n    return this.awsRequest('/api/tsdb/query', request)\r\n      .then((res: any) => {\r\n        if (!res.results) {\r\n          return { data: [] };\r\n        }\r\n        return Object.values(request.queries).reduce(\r\n          ({ data, error }: any, queryRequest: any) => {\r\n            const queryResult = res.results[queryRequest.refId];\r\n            if (!queryResult) {\r\n              return { data, error };\r\n            }\r\n\r\n            const link = this.buildCloudwatchConsoleUrl(\r\n              queryRequest,\r\n              from.toISOString(),\r\n              to.toISOString(),\r\n              queryRequest.refId,\r\n              queryResult.meta.gmdMeta\r\n            );\r\n\r\n            return {\r\n              error: error || queryResult.error ? { message: queryResult.error } : null,\r\n              data: [\r\n                ...data,\r\n                ...queryResult.series.map(({ name, points }: any) => {\r\n                  const dataFrame = toDataFrame({\r\n                    target: name,\r\n                    datapoints: points,\r\n                    refId: queryRequest.refId,\r\n                    meta: queryResult.meta,\r\n                  });\r\n                  if (link) {\r\n                    for (const field of dataFrame.fields) {\r\n                      field.config.links = [\r\n                        {\r\n                          url: link,\r\n                          title: 'View in CloudWatch console',\r\n                          targetBlank: true,\r\n                        },\r\n                      ];\r\n                    }\r\n                  }\r\n                  return dataFrame;\r\n                }),\r\n              ],\r\n            };\r\n          },\r\n          { data: [], error: null }\r\n        );\r\n      })\r\n      .catch((err: any = { data: { error: '' } }) => {\r\n        if (/^Throttling:.*/.test(err.data.message)) {\r\n          const failedRedIds = Object.keys(err.data.results);\r\n          const regionsAffected = Object.values(request.queries).reduce(\r\n            (res: string[], { refId, region }: CloudWatchQuery) =>\r\n              !failedRedIds.includes(refId) || res.includes(region) ? res : [...res, region],\r\n            []\r\n          ) as string[];\r\n\r\n          regionsAffected.forEach(region => this.debouncedAlert(this.datasourceName, this.getActualRegion(region)));\r\n        }\r\n\r\n        if (err.data && err.data.message === 'Metric request error' && err.data.error) {\r\n          err.data.message = err.data.error;\r\n        }\r\n\r\n        throw err;\r\n      });\r\n  }\r\n\r\n  transformSuggestDataFromTable(suggestData: any) {\r\n    return _.map(suggestData.results['metricFindQuery'].tables[0].rows, v => {\r\n      return {\r\n        text: v[0],\r\n        value: v[1],\r\n        label: v[1],\r\n      };\r\n    });\r\n  }\r\n\r\n  doMetricQueryRequest(subtype: any, parameters: any) {\r\n    const range = this.timeSrv.timeRange();\r\n    return this.awsRequest('/api/tsdb/query', {\r\n      from: range.from.valueOf().toString(),\r\n      to: range.to.valueOf().toString(),\r\n      queries: [\r\n        _.extend(\r\n          {\r\n            refId: 'metricFindQuery',\r\n            intervalMs: 1, // dummy\r\n            maxDataPoints: 1, // dummy\r\n            datasourceId: this.id,\r\n            type: 'metricFindQuery',\r\n            subtype: subtype,\r\n          },\r\n          parameters\r\n        ),\r\n      ],\r\n    }).then((r: any) => {\r\n      return this.transformSuggestDataFromTable(r);\r\n    });\r\n  }\r\n\r\n  getRegions() {\r\n    return this.doMetricQueryRequest('regions', null).then((regions: any) => [\r\n      { label: 'default', value: 'default', text: 'default' },\r\n      ...regions,\r\n    ]);\r\n  }\r\n\r\n  getNamespaces() {\r\n    return this.doMetricQueryRequest('namespaces', null);\r\n  }\r\n\r\n  async getMetrics(namespace: string, region?: string) {\r\n    if (!namespace) {\r\n      return [];\r\n    }\r\n\r\n    return this.doMetricQueryRequest('metrics', {\r\n      region: this.templateSrv.replace(this.getActualRegion(region)),\r\n      namespace: this.templateSrv.replace(namespace),\r\n    });\r\n  }\r\n\r\n  async getDimensionKeys(namespace: string, region: string) {\r\n    if (!namespace) {\r\n      return [];\r\n    }\r\n\r\n    return this.doMetricQueryRequest('dimension_keys', {\r\n      region: this.templateSrv.replace(this.getActualRegion(region)),\r\n      namespace: this.templateSrv.replace(namespace),\r\n    });\r\n  }\r\n\r\n  async getDimensionValues(\r\n    region: string,\r\n    namespace: string,\r\n    metricName: string,\r\n    dimensionKey: string,\r\n    filterDimensions: {}\r\n  ) {\r\n    if (!namespace || !metricName) {\r\n      return [];\r\n    }\r\n\r\n    const values = await this.doMetricQueryRequest('dimension_values', {\r\n      region: this.templateSrv.replace(this.getActualRegion(region)),\r\n      namespace: this.templateSrv.replace(namespace),\r\n      metricName: this.templateSrv.replace(metricName.trim()),\r\n      dimensionKey: this.templateSrv.replace(dimensionKey),\r\n      dimensions: this.convertDimensionFormat(filterDimensions, {}),\r\n    });\r\n\r\n    return values;\r\n  }\r\n\r\n  getEbsVolumeIds(region: string, instanceId: string) {\r\n    return this.doMetricQueryRequest('ebs_volume_ids', {\r\n      region: this.templateSrv.replace(this.getActualRegion(region)),\r\n      instanceId: this.templateSrv.replace(instanceId),\r\n    });\r\n  }\r\n\r\n  getEc2InstanceAttribute(region: string, attributeName: string, filters: any) {\r\n    return this.doMetricQueryRequest('ec2_instance_attribute', {\r\n      region: this.templateSrv.replace(this.getActualRegion(region)),\r\n      attributeName: this.templateSrv.replace(attributeName),\r\n      filters: filters,\r\n    });\r\n  }\r\n\r\n  getResourceARNs(region: string, resourceType: string, tags: any) {\r\n    return this.doMetricQueryRequest('resource_arns', {\r\n      region: this.templateSrv.replace(this.getActualRegion(region)),\r\n      resourceType: this.templateSrv.replace(resourceType),\r\n      tags: tags,\r\n    });\r\n  }\r\n\r\n  async metricFindQuery(query: string) {\r\n    let region;\r\n    let namespace;\r\n    let metricName;\r\n    let filterJson;\r\n\r\n    const regionQuery = query.match(/^regions\\(\\)/);\r\n    if (regionQuery) {\r\n      return this.getRegions();\r\n    }\r\n\r\n    const namespaceQuery = query.match(/^namespaces\\(\\)/);\r\n    if (namespaceQuery) {\r\n      return this.getNamespaces();\r\n    }\r\n\r\n    const metricNameQuery = query.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\r\n    if (metricNameQuery) {\r\n      namespace = metricNameQuery[1];\r\n      region = metricNameQuery[3];\r\n      return this.getMetrics(namespace, region);\r\n    }\r\n\r\n    const dimensionKeysQuery = query.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\r\n    if (dimensionKeysQuery) {\r\n      namespace = dimensionKeysQuery[1];\r\n      region = dimensionKeysQuery[3];\r\n      return this.getDimensionKeys(namespace, region);\r\n    }\r\n\r\n    const dimensionValuesQuery = query.match(\r\n      /^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/\r\n    );\r\n    if (dimensionValuesQuery) {\r\n      region = dimensionValuesQuery[1];\r\n      namespace = dimensionValuesQuery[2];\r\n      metricName = dimensionValuesQuery[3];\r\n      const dimensionKey = dimensionValuesQuery[4];\r\n      filterJson = {};\r\n      if (dimensionValuesQuery[6]) {\r\n        filterJson = JSON.parse(this.templateSrv.replace(dimensionValuesQuery[6]));\r\n      }\r\n\r\n      return this.getDimensionValues(region, namespace, metricName, dimensionKey, filterJson);\r\n    }\r\n\r\n    const ebsVolumeIdsQuery = query.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\r\n    if (ebsVolumeIdsQuery) {\r\n      region = ebsVolumeIdsQuery[1];\r\n      const instanceId = ebsVolumeIdsQuery[2];\r\n      return this.getEbsVolumeIds(region, instanceId);\r\n    }\r\n\r\n    const ec2InstanceAttributeQuery = query.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\r\n    if (ec2InstanceAttributeQuery) {\r\n      region = ec2InstanceAttributeQuery[1];\r\n      const targetAttributeName = ec2InstanceAttributeQuery[2];\r\n      filterJson = JSON.parse(this.templateSrv.replace(ec2InstanceAttributeQuery[3]));\r\n      return this.getEc2InstanceAttribute(region, targetAttributeName, filterJson);\r\n    }\r\n\r\n    const resourceARNsQuery = query.match(/^resource_arns\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\r\n    if (resourceARNsQuery) {\r\n      region = resourceARNsQuery[1];\r\n      const resourceType = resourceARNsQuery[2];\r\n      const tagsJSON = JSON.parse(this.templateSrv.replace(resourceARNsQuery[3]));\r\n      return this.getResourceARNs(region, resourceType, tagsJSON);\r\n    }\r\n\r\n    const statsQuery = query.match(/^statistics\\(\\)/);\r\n    if (statsQuery) {\r\n      return this.standardStatistics.map((s: string) => ({ value: s, label: s, text: s }));\r\n    }\r\n\r\n    return Promise.resolve([]);\r\n  }\r\n\r\n  annotationQuery(options: any) {\r\n    const annotation = options.annotation;\r\n    const statistics = _.map(annotation.statistics, s => {\r\n      return this.templateSrv.replace(s);\r\n    });\r\n    const defaultPeriod = annotation.prefixMatching ? '' : '300';\r\n    let period = annotation.period || defaultPeriod;\r\n    period = parseInt(period, 10);\r\n    const parameters = {\r\n      prefixMatching: annotation.prefixMatching,\r\n      region: this.templateSrv.replace(this.getActualRegion(annotation.region)),\r\n      namespace: this.templateSrv.replace(annotation.namespace),\r\n      metricName: this.templateSrv.replace(annotation.metricName),\r\n      dimensions: this.convertDimensionFormat(annotation.dimensions, {}),\r\n      statistics: statistics,\r\n      period: period,\r\n      actionPrefix: annotation.actionPrefix || '',\r\n      alarmNamePrefix: annotation.alarmNamePrefix || '',\r\n    };\r\n\r\n    return this.awsRequest('/api/tsdb/query', {\r\n      from: options.range.from.valueOf().toString(),\r\n      to: options.range.to.valueOf().toString(),\r\n      queries: [\r\n        _.extend(\r\n          {\r\n            refId: 'annotationQuery',\r\n            intervalMs: 1, // dummy\r\n            maxDataPoints: 1, // dummy\r\n            datasourceId: this.id,\r\n            type: 'annotationQuery',\r\n          },\r\n          parameters\r\n        ),\r\n      ],\r\n    }).then((r: any) => {\r\n      return _.map(r.results['annotationQuery'].tables[0].rows, v => {\r\n        return {\r\n          annotation: annotation,\r\n          time: Date.parse(v[0]),\r\n          title: v[1],\r\n          tags: [v[2]],\r\n          text: v[3],\r\n        };\r\n      });\r\n    });\r\n  }\r\n\r\n  targetContainsTemplate(target: any) {\r\n    return (\r\n      this.templateSrv.variableExists(target.region) ||\r\n      this.templateSrv.variableExists(target.namespace) ||\r\n      this.templateSrv.variableExists(target.metricName) ||\r\n      _.find(target.dimensions, (v, k) => {\r\n        return this.templateSrv.variableExists(k) || this.templateSrv.variableExists(v);\r\n      })\r\n    );\r\n  }\r\n\r\n  testDatasource() {\r\n    // use billing metrics for test\r\n    const region = this.defaultRegion;\r\n    const namespace = 'AWS/Billing';\r\n    const metricName = 'EstimatedCharges';\r\n    const dimensions = {};\r\n\r\n    return this.getDimensionValues(region, namespace, metricName, 'ServiceName', dimensions).then(() => {\r\n      return { status: 'success', message: 'Data source is working' };\r\n    });\r\n  }\r\n\r\n  awsRequest(url: string, data: any) {\r\n    const options = {\r\n      method: 'POST',\r\n      url,\r\n      data,\r\n    };\r\n\r\n    return this.backendSrv.datasourceRequest(options).then((result: any) => {\r\n      return result.data;\r\n    });\r\n  }\r\n\r\n  getDefaultRegion() {\r\n    return this.defaultRegion;\r\n  }\r\n\r\n  getActualRegion(region: string) {\r\n    if (region === 'default' || _.isEmpty(region)) {\r\n      return this.getDefaultRegion();\r\n    }\r\n    return region;\r\n  }\r\n\r\n  convertToCloudWatchTime(date: any, roundUp: any) {\r\n    if (_.isString(date)) {\r\n      date = dateMath.parse(date, roundUp);\r\n    }\r\n    return Math.round(date.valueOf() / 1000);\r\n  }\r\n\r\n  convertDimensionFormat(dimensions: { [key: string]: string | string[] }, scopedVars: ScopedVars) {\r\n    return Object.entries(dimensions).reduce((result, [key, value]) => {\r\n      key = this.replace(key, scopedVars, true, 'dimension keys');\r\n\r\n      if (Array.isArray(value)) {\r\n        return { ...result, [key]: value };\r\n      }\r\n\r\n      const valueVar = this.templateSrv.variables.find(({ name }) => name === this.templateSrv.getVariableName(value));\r\n      if (valueVar) {\r\n        if (valueVar.multi) {\r\n          const values = this.templateSrv.replace(value, scopedVars, 'pipe').split('|');\r\n          return { ...result, [key]: values };\r\n        }\r\n        return { ...result, [key]: [this.templateSrv.replace(value, scopedVars)] };\r\n      }\r\n\r\n      return { ...result, [key]: [value] };\r\n    }, {});\r\n  }\r\n\r\n  replace(target: string, scopedVars: ScopedVars, displayErrorIfIsMultiTemplateVariable?: boolean, fieldName?: string) {\r\n    if (displayErrorIfIsMultiTemplateVariable) {\r\n      const variable = this.templateSrv.variables.find(({ name }) => name === this.templateSrv.getVariableName(target));\r\n      if (variable && variable.multi) {\r\n        this.debouncedCustomAlert(\r\n          'CloudWatch templating error',\r\n          `Multi template variables are not supported for ${fieldName || target}`\r\n        );\r\n      }\r\n    }\r\n\r\n    return this.templateSrv.replace(target, scopedVars);\r\n  }\r\n}\r\n","import { debounce, memoize } from 'lodash';\n\nexport default (func: (...args: any[]) => void, wait = 7000) => {\n  const mem = memoize(\n    (...args) =>\n      debounce(func, wait, {\n        leading: true,\n      }),\n    (...args) => JSON.stringify(args)\n  );\n\n  return (...args: any[]) => mem(...args)(...args);\n};\n","import './query_parameter_ctrl';\r\nimport { DataSourcePlugin } from '@grafana/data';\r\nimport { ConfigEditor } from './components/ConfigEditor';\r\nimport { QueryEditor } from './components/QueryEditor';\r\nimport CloudWatchDatasource from './datasource';\r\nimport { CloudWatchAnnotationsQueryCtrl } from './annotations_query_ctrl';\r\nimport { CloudWatchJsonData, CloudWatchQuery } from './types';\r\n\r\nexport const plugin = new DataSourcePlugin<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>(\r\n  CloudWatchDatasource\r\n)\r\n  .setConfigEditor(ConfigEditor)\r\n  .setQueryEditor(QueryEditor)\r\n  .setExploreQueryField(QueryEditor)\r\n  .setAnnotationQueryCtrl(CloudWatchAnnotationsQueryCtrl);\r\n","import angular from 'angular';\r\nimport coreModule from 'app/core/core_module';\r\nimport _ from 'lodash';\r\nimport { TemplateSrv } from 'app/features/templating/template_srv';\r\nimport DatasourceSrv from 'app/features/plugins/datasource_srv';\r\n\r\nexport class CloudWatchQueryParameterCtrl {\r\n  /** @ngInject */\r\n  constructor($scope: any, templateSrv: TemplateSrv, uiSegmentSrv: any, datasourceSrv: DatasourceSrv) {\r\n    $scope.init = () => {\r\n      const target = $scope.target;\r\n      target.namespace = target.namespace || '';\r\n      target.metricName = target.metricName || '';\r\n      target.statistics = target.statistics || ['Average'];\r\n      target.dimensions = target.dimensions || {};\r\n      target.period = target.period || '';\r\n      target.region = target.region || 'default';\r\n      target.id = target.id || '';\r\n      target.expression = target.expression || '';\r\n\r\n      $scope.regionSegment = uiSegmentSrv.getSegmentForValue($scope.target.region, 'select region');\r\n      $scope.namespaceSegment = uiSegmentSrv.getSegmentForValue($scope.target.namespace, 'select namespace');\r\n      $scope.metricSegment = uiSegmentSrv.getSegmentForValue($scope.target.metricName, 'select metric');\r\n\r\n      $scope.dimSegments = _.reduce(\r\n        $scope.target.dimensions,\r\n        (memo, value, key) => {\r\n          memo.push(uiSegmentSrv.newKey(key));\r\n          memo.push(uiSegmentSrv.newOperator('='));\r\n          memo.push(uiSegmentSrv.newKeyValue(value));\r\n          return memo;\r\n        },\r\n        []\r\n      );\r\n\r\n      $scope.statSegments = _.map($scope.target.statistics, stat => {\r\n        return uiSegmentSrv.getSegmentForValue(stat);\r\n      });\r\n\r\n      $scope.ensurePlusButton($scope.statSegments);\r\n      $scope.ensurePlusButton($scope.dimSegments);\r\n      $scope.removeDimSegment = uiSegmentSrv.newSegment({\r\n        fake: true,\r\n        value: '-- remove dimension --',\r\n      });\r\n      $scope.removeStatSegment = uiSegmentSrv.newSegment({\r\n        fake: true,\r\n        value: '-- remove stat --',\r\n      });\r\n\r\n      if (_.isEmpty($scope.target.region)) {\r\n        $scope.target.region = 'default';\r\n      }\r\n\r\n      if (!$scope.onChange) {\r\n        $scope.onChange = () => {};\r\n      }\r\n    };\r\n\r\n    $scope.getStatSegments = () => {\r\n      return Promise.resolve(\r\n        _.flatten([\r\n          angular.copy($scope.removeStatSegment),\r\n          _.map($scope.datasource.standardStatistics, s => {\r\n            return uiSegmentSrv.getSegmentForValue(s);\r\n          }),\r\n          uiSegmentSrv.getSegmentForValue('pNN.NN'),\r\n        ])\r\n      );\r\n    };\r\n\r\n    $scope.statSegmentChanged = (segment: any, index: number) => {\r\n      if (segment.value === $scope.removeStatSegment.value) {\r\n        $scope.statSegments.splice(index, 1);\r\n      } else {\r\n        segment.type = 'value';\r\n      }\r\n\r\n      $scope.target.statistics = _.reduce(\r\n        $scope.statSegments,\r\n        (memo, seg) => {\r\n          if (!seg.fake) {\r\n            memo.push(seg.value);\r\n          }\r\n          return memo;\r\n        },\r\n        []\r\n      );\r\n\r\n      $scope.ensurePlusButton($scope.statSegments);\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.ensurePlusButton = (segments: any) => {\r\n      const count = segments.length;\r\n      const lastSegment = segments[Math.max(count - 1, 0)];\r\n\r\n      if (!lastSegment || lastSegment.type !== 'plus-button') {\r\n        segments.push(uiSegmentSrv.newPlusButton());\r\n      }\r\n    };\r\n\r\n    $scope.getDimSegments = (segment: any, $index: number) => {\r\n      if (segment.type === 'operator') {\r\n        return Promise.resolve([]);\r\n      }\r\n\r\n      const target = $scope.target;\r\n      let query = Promise.resolve([]);\r\n\r\n      if (segment.type === 'key' || segment.type === 'plus-button') {\r\n        query = $scope.datasource.getDimensionKeys($scope.target.namespace, $scope.target.region);\r\n      } else if (segment.type === 'value') {\r\n        const dimensionKey = $scope.dimSegments[$index - 2].value;\r\n        delete target.dimensions[dimensionKey];\r\n        query = $scope.datasource.getDimensionValues(\r\n          target.region,\r\n          target.namespace,\r\n          target.metricName,\r\n          dimensionKey,\r\n          target.dimensions\r\n        );\r\n      }\r\n\r\n      return query.then($scope.transformToSegments(true)).then(results => {\r\n        if (segment.type === 'key') {\r\n          results.splice(0, 0, angular.copy($scope.removeDimSegment));\r\n        }\r\n        return results;\r\n      });\r\n    };\r\n\r\n    $scope.dimSegmentChanged = (segment: any, index: number) => {\r\n      $scope.dimSegments[index] = segment;\r\n\r\n      if (segment.value === $scope.removeDimSegment.value) {\r\n        $scope.dimSegments.splice(index, 3);\r\n      } else if (segment.type === 'plus-button') {\r\n        $scope.dimSegments.push(uiSegmentSrv.newOperator('='));\r\n        $scope.dimSegments.push(uiSegmentSrv.newFake('select dimension value', 'value', 'query-segment-value'));\r\n        segment.type = 'key';\r\n        segment.cssClass = 'query-segment-key';\r\n      }\r\n\r\n      $scope.syncDimSegmentsWithModel();\r\n      $scope.ensurePlusButton($scope.dimSegments);\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.syncDimSegmentsWithModel = () => {\r\n      const dims: any = {};\r\n      const length = $scope.dimSegments.length;\r\n\r\n      for (let i = 0; i < length - 2; i += 3) {\r\n        const keySegment = $scope.dimSegments[i];\r\n        const valueSegment = $scope.dimSegments[i + 2];\r\n        if (!valueSegment.fake) {\r\n          dims[keySegment.value] = valueSegment.value;\r\n        }\r\n      }\r\n\r\n      $scope.target.dimensions = dims;\r\n    };\r\n\r\n    $scope.getRegions = () => {\r\n      return $scope.datasource\r\n        .metricFindQuery('regions()')\r\n        .then((results: any) => {\r\n          results.unshift({ text: 'default' });\r\n          return results;\r\n        })\r\n        .then($scope.transformToSegments(true));\r\n    };\r\n\r\n    $scope.getNamespaces = () => {\r\n      return $scope.datasource.metricFindQuery('namespaces()').then($scope.transformToSegments(true));\r\n    };\r\n\r\n    $scope.getMetrics = () => {\r\n      return $scope.datasource\r\n        .metricFindQuery('metrics(' + $scope.target.namespace + ',' + $scope.target.region + ')')\r\n        .then($scope.transformToSegments(true));\r\n    };\r\n\r\n    $scope.regionChanged = () => {\r\n      $scope.target.region = $scope.regionSegment.value;\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.namespaceChanged = () => {\r\n      $scope.target.namespace = $scope.namespaceSegment.value;\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.metricChanged = () => {\r\n      $scope.target.metricName = $scope.metricSegment.value;\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.transformToSegments = (addTemplateVars: any) => {\r\n      return (results: any) => {\r\n        const segments = _.map(results, segment => {\r\n          return uiSegmentSrv.newSegment({\r\n            value: segment.text,\r\n            expandable: segment.expandable,\r\n          });\r\n        });\r\n\r\n        if (addTemplateVars) {\r\n          _.each(templateSrv.variables, variable => {\r\n            segments.unshift(\r\n              uiSegmentSrv.newSegment({\r\n                type: 'template',\r\n                value: '$' + variable.name,\r\n                expandable: true,\r\n              })\r\n            );\r\n          });\r\n        }\r\n\r\n        return segments;\r\n      };\r\n    };\r\n\r\n    $scope.init();\r\n  }\r\n}\r\n\r\nexport function cloudWatchQueryParameter() {\r\n  return {\r\n    templateUrl: 'public/app/plugins/datasource/cloudwatch/partials/query.parameter.html',\r\n    controller: CloudWatchQueryParameterCtrl,\r\n    restrict: 'E',\r\n    scope: {\r\n      target: '=',\r\n      datasource: '=',\r\n      onChange: '&',\r\n    },\r\n  };\r\n}\r\n\r\ncoreModule.directive('cloudwatchQueryParameter', cloudWatchQueryParameter);\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAzBA;AA0BA;AAAA;AA3BA;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AASA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AAAA;AAQA;AALA;AACA;AACA;;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAxDA;;;;;AA0DA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AASA;AAEA;AACA;AAMA;AACA;AAUA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAYA;AACA;AACA;AACA;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAYA;AACA;AACA;AACA;AAWA;AAEA;AACA;AAGA;AACA;AAUA;AACA;AACA;AAMA;AASA;AACA;AACA;AAGA;AAWA;AACA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;ACrRA;AAEA;AAGA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;;AAmKA;AAjKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAIA;AAAA;AAOA;AACA;AAKA;AAKA;AAAA;AAOA;AACA;AACA;AACA;AAMA;AAAA;AAKA;AACA;AAIA;AAEA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;;AAAA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAJA;AAaA;AACA;AAAA;;;;;;;;;;;;;;AC1LA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;;AAGA;;AAQA;AAQA;AAnBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AAGA;AACA;AAAA;AAUA;AACA;AAAA;AAEA;AAAA;AASA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAPA;AAWA;AAEA;AAGA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AAEA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AAEA;;;;;;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AANA;AAQA;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;AC7kBA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AAFA;AAGA;AAAA;AAAA;;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;A","sourceRoot":""}