{"version":3,"file":"default~DataSourceDashboards~DataSourceSettingsPage~DataSourcesListPage~NewDataSourcePage.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/features/datasources/state/actions.ts","webpack:///webpack:///./public/app/features/datasources/state/buildCategories.ts","webpack:///webpack:///./public/app/features/datasources/state/navModel.ts","webpack:///webpack:///./public/app/features/datasources/state/selectors.ts"],"sourcesContent":["import config from '../../../core/config';\r\nimport { getBackendSrv } from '@grafana/runtime';\r\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\r\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\r\nimport { buildNavModel } from './navModel';\r\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\r\nimport { DataSourcePluginCategory, ThunkResult } from 'app/types';\r\nimport { getPluginSettings } from 'app/features/plugins/PluginSettingsCache';\r\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\r\nimport {\r\n  dataSourceLoaded,\r\n  dataSourceMetaLoaded,\r\n  dataSourcePluginsLoad,\r\n  dataSourcePluginsLoaded,\r\n  dataSourcesLoaded,\r\n} from './reducers';\r\nimport { buildCategories } from './buildCategories';\r\n\r\nexport interface DataSourceTypesLoadedPayload {\r\n  plugins: DataSourcePluginMeta[];\r\n  categories: DataSourcePluginCategory[];\r\n}\r\n\r\nexport function loadDataSources(): ThunkResult<void> {\r\n  return async dispatch => {\r\n    const response = await getBackendSrv().get('/api/datasources');\r\n    dispatch(dataSourcesLoaded(response));\r\n  };\r\n}\r\n\r\nexport function loadDataSource(id: number): ThunkResult<void> {\r\n  return async dispatch => {\r\n    const dataSource = await getBackendSrv().get(`/api/datasources/${id}`);\r\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\r\n    const plugin = await importDataSourcePlugin(pluginInfo);\r\n\r\n    dispatch(dataSourceLoaded(dataSource));\r\n    dispatch(dataSourceMetaLoaded(pluginInfo));\r\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\r\n  };\r\n}\r\n\r\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\r\n  return async (dispatch, getStore) => {\r\n    await dispatch(loadDataSources());\r\n\r\n    const dataSources = getStore().dataSources.dataSources;\r\n\r\n    const newInstance = {\r\n      name: plugin.name,\r\n      type: plugin.id,\r\n      access: 'proxy',\r\n      isDefault: dataSources.length === 0,\r\n    };\r\n\r\n    if (nameExits(dataSources, newInstance.name)) {\r\n      newInstance.name = findNewName(dataSources, newInstance.name);\r\n    }\r\n\r\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\r\n    dispatch(updateLocation({ path: `/datasources/edit/${result.id}` }));\r\n  };\r\n}\r\n\r\nexport function loadDataSourcePlugins(): ThunkResult<void> {\r\n  return async dispatch => {\r\n    dispatch(dataSourcePluginsLoad());\r\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\r\n    const categories = buildCategories(plugins);\r\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\r\n  };\r\n}\r\n\r\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\r\n  return async dispatch => {\r\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource);\r\n    await updateFrontendSettings();\r\n    return dispatch(loadDataSource(dataSource.id));\r\n  };\r\n}\r\n\r\nexport function deleteDataSource(): ThunkResult<void> {\r\n  return async (dispatch, getStore) => {\r\n    const dataSource = getStore().dataSources.dataSource;\r\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\r\n    await updateFrontendSettings();\r\n    dispatch(updateLocation({ path: '/datasources' }));\r\n  };\r\n}\r\n\r\ninterface ItemWithName {\r\n  name: string;\r\n}\r\n\r\nexport function nameExits(dataSources: ItemWithName[], name: string) {\r\n  return (\r\n    dataSources.filter(dataSource => {\r\n      return dataSource.name.toLowerCase() === name.toLowerCase();\r\n    }).length > 0\r\n  );\r\n}\r\n\r\nexport function findNewName(dataSources: ItemWithName[], name: string) {\r\n  // Need to loop through current data sources to make sure\r\n  // the name doesn't exist\r\n  while (nameExits(dataSources, name)) {\r\n    // If there's a duplicate name that doesn't end with '-x'\r\n    // we can add -1 to the name and be done.\r\n    if (!nameHasSuffix(name)) {\r\n      name = `${name}-1`;\r\n    } else {\r\n      // if there's a duplicate name that ends with '-x'\r\n      // we can try to increment the last digit until the name is unique\r\n\r\n      // remove the 'x' part and replace it with the new number\r\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\r\n    }\r\n  }\r\n\r\n  return name;\r\n}\r\n\r\nfunction updateFrontendSettings() {\r\n  return getBackendSrv()\r\n    .get('/api/frontend/settings')\r\n    .then(settings => {\r\n      config.datasources = settings.datasources;\r\n      config.defaultDatasource = settings.defaultDatasource;\r\n      getDatasourceSrv().init();\r\n    });\r\n}\r\n\r\nfunction nameHasSuffix(name: string) {\r\n  return name.endsWith('-', name.length - 1);\r\n}\r\n\r\nfunction getLastDigit(name: string) {\r\n  return parseInt(name.slice(-1), 10);\r\n}\r\n\r\nfunction incrementLastDigit(digit: number) {\r\n  return isNaN(digit) ? 1 : digit + 1;\r\n}\r\n\r\nfunction getNewName(name: string) {\r\n  return name.slice(0, name.length - 1);\r\n}\r\n","import { DataSourcePluginMeta, PluginType } from '@grafana/data';\r\nimport { DataSourcePluginCategory } from 'app/types';\r\n\r\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\r\n  const categories: DataSourcePluginCategory[] = [\r\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\r\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\r\n    { id: 'sql', title: 'SQL', plugins: [] },\r\n    { id: 'cloud', title: 'Cloud', plugins: [] },\r\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\r\n    { id: 'other', title: 'Others', plugins: [] },\r\n  ];\r\n\r\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\r\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\r\n  const enterprisePlugins = getEnterprisePhantomPlugins();\r\n\r\n  // build indices\r\n  for (const category of categories) {\r\n    categoryIndex[category.id] = category;\r\n  }\r\n\r\n  for (const plugin of plugins) {\r\n    // Force category for enterprise plugins\r\n    if (enterprisePlugins.find(item => item.id === plugin.id)) {\r\n      plugin.category = 'enterprise';\r\n    }\r\n\r\n    // Fix link name\r\n    if (plugin.info.links) {\r\n      for (const link of plugin.info.links) {\r\n        link.name = 'Learn more';\r\n      }\r\n    }\r\n\r\n    const category = categories.find(item => item.id === plugin.category) || categoryIndex['other'];\r\n    category.plugins.push(plugin);\r\n    // add to plugin index\r\n    pluginIndex[plugin.id] = plugin;\r\n  }\r\n\r\n  for (const category of categories) {\r\n    // add phantom plugin\r\n    if (category.id === 'cloud') {\r\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\r\n    }\r\n\r\n    // add phantom plugins\r\n    if (category.id === 'enterprise') {\r\n      for (const plugin of enterprisePlugins) {\r\n        if (!pluginIndex[plugin.id]) {\r\n          category.plugins.push(plugin);\r\n        }\r\n      }\r\n    }\r\n\r\n    sortPlugins(category.plugins);\r\n  }\r\n\r\n  return categories;\r\n}\r\n\r\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\r\n  const sortingRules: { [id: string]: number } = {\r\n    prometheus: 100,\r\n    graphite: 95,\r\n    loki: 90,\r\n    mysql: 80,\r\n    postgres: 79,\r\n    gcloud: -1,\r\n  };\r\n\r\n  plugins.sort((a, b) => {\r\n    const aSort = sortingRules[a.id] || 0;\r\n    const bSort = sortingRules[b.id] || 0;\r\n    if (aSort > bSort) {\r\n      return -1;\r\n    }\r\n    if (aSort < bSort) {\r\n      return 1;\r\n    }\r\n\r\n    return a.name > b.name ? -1 : 1;\r\n  });\r\n}\r\n\r\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\r\n  return [\r\n    getPhantomPlugin({\r\n      id: 'grafana-splunk-datasource',\r\n      name: 'Splunk',\r\n      description: 'Visualize & explore Splunk logs',\r\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\r\n    }),\r\n    getPhantomPlugin({\r\n      id: 'grafana-oracle-datasource',\r\n      name: 'Oracle',\r\n      description: 'Visualize & explore Oracle SQL',\r\n      imgUrl: 'public/img/plugins/oracle.png',\r\n    }),\r\n    getPhantomPlugin({\r\n      id: 'grafana-dynatrace-datasource',\r\n      name: 'Dynatrace',\r\n      description: 'Visualize & explore Dynatrace data',\r\n      imgUrl: 'public/img/plugins/dynatrace.png',\r\n    }),\r\n    getPhantomPlugin({\r\n      id: 'grafana-servicenow-datasource',\r\n      description: 'ServiceNow integration & data source',\r\n      name: 'ServiceNow',\r\n      imgUrl: 'public/img/plugins/servicenow.svg',\r\n    }),\r\n    getPhantomPlugin({\r\n      id: 'grafana-datadog-datasource',\r\n      description: 'DataDog integration & data source',\r\n      name: 'DataDog',\r\n      imgUrl: 'public/img/plugins/datadog.png',\r\n    }),\r\n    getPhantomPlugin({\r\n      id: 'grafana-newrelic-datasource',\r\n      description: 'New Relic integration & data source',\r\n      name: 'New Relic',\r\n      imgUrl: 'public/img/plugins/newrelic.svg',\r\n    }),\r\n  ];\r\n}\r\n\r\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\r\n  return {\r\n    id: 'gcloud',\r\n    name: 'Grafana Cloud',\r\n    type: PluginType.datasource,\r\n    module: 'phantom',\r\n    baseUrl: '',\r\n    info: {\r\n      description: 'Hosted Graphite, Prometheus and Loki',\r\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\r\n      author: { name: 'Grafana Labs' },\r\n      links: [\r\n        {\r\n          url: 'https://grafana.com/products/cloud/',\r\n          name: 'Learn more',\r\n        },\r\n      ],\r\n      screenshots: [],\r\n      updated: '2019-05-10',\r\n      version: '1.0.0',\r\n    },\r\n  };\r\n}\r\n\r\ninterface GetPhantomPluginOptions {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  imgUrl: string;\r\n}\r\n\r\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\r\n  return {\r\n    id: options.id,\r\n    name: options.name,\r\n    type: PluginType.datasource,\r\n    module: 'phantom',\r\n    baseUrl: '',\r\n    info: {\r\n      description: options.description,\r\n      logos: { small: options.imgUrl, large: options.imgUrl },\r\n      author: { name: 'Grafana Labs' },\r\n      links: [\r\n        {\r\n          url: 'https://grafana.com/grafana/plugins/' + options.id,\r\n          name: 'Install now',\r\n        },\r\n      ],\r\n      screenshots: [],\r\n      updated: '2019-05-10',\r\n      version: '1.0.0',\r\n    },\r\n  };\r\n}\r\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\r\nimport config from 'app/core/config';\r\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\r\n\r\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\r\n  const pluginMeta = plugin.meta;\r\n\r\n  const navModel = {\r\n    img: pluginMeta.info.logos.large,\r\n    id: 'datasource-' + dataSource.id,\r\n    subTitle: `Type: ${pluginMeta.name}`,\r\n    url: '',\r\n    text: dataSource.name,\r\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\r\n    children: [\r\n      {\r\n        active: false,\r\n        icon: 'fa fa-fw fa-sliders',\r\n        id: `datasource-settings-${dataSource.id}`,\r\n        text: 'Settings',\r\n        url: `datasources/edit/${dataSource.id}/`,\r\n      },\r\n    ],\r\n  };\r\n\r\n  if (plugin.configPages) {\r\n    for (const page of plugin.configPages) {\r\n      navModel.children.push({\r\n        active: false,\r\n        text: page.title,\r\n        icon: page.icon,\r\n        url: `datasources/edit/${dataSource.id}/?page=${page.id}`,\r\n        id: `datasource-page-${page.id}`,\r\n      });\r\n    }\r\n  }\r\n\r\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\r\n    navModel.children.push({\r\n      active: false,\r\n      icon: 'fa fa-fw fa-th-large',\r\n      id: `datasource-dashboards-${dataSource.id}`,\r\n      text: 'Dashboards',\r\n      url: `datasources/edit/${dataSource.id}/dashboards`,\r\n    });\r\n  }\r\n\r\n  if (config.licenseInfo.hasLicense) {\r\n    navModel.children.push({\r\n      active: false,\r\n      icon: 'fa fa-fw fa-lock',\r\n      id: `datasource-permissions-${dataSource.id}`,\r\n      text: 'Permissions',\r\n      url: `datasources/edit/${dataSource.id}/permissions`,\r\n    });\r\n  }\r\n\r\n  return navModel;\r\n}\r\n\r\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\r\n  const main = buildNavModel(\r\n    {\r\n      access: '',\r\n      basicAuth: false,\r\n      basicAuthUser: '',\r\n      basicAuthPassword: '',\r\n      withCredentials: false,\r\n      database: '',\r\n      id: 1,\r\n      isDefault: false,\r\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\r\n      name: 'Loading',\r\n      orgId: 1,\r\n      password: '',\r\n      readOnly: false,\r\n      type: 'Loading',\r\n      typeLogoUrl: 'public/img/icn-datasource.svg',\r\n      url: '',\r\n      user: '',\r\n    },\r\n    {\r\n      meta: {\r\n        id: '1',\r\n        type: PluginType.datasource,\r\n        name: '',\r\n        info: {\r\n          author: {\r\n            name: '',\r\n            url: '',\r\n          },\r\n          description: '',\r\n          links: [{ name: '', url: '' }],\r\n          logos: {\r\n            large: '',\r\n            small: '',\r\n          },\r\n          screenshots: [],\r\n          updated: '',\r\n          version: '',\r\n        },\r\n        includes: [],\r\n        module: '',\r\n        baseUrl: '',\r\n      },\r\n    } as GenericDataSourcePlugin\r\n  );\r\n\r\n  let node: NavModelItem;\r\n\r\n  // find active page\r\n  for (const child of main.children) {\r\n    if (child.id.indexOf(pageName) > 0) {\r\n      child.active = true;\r\n      node = child;\r\n      break;\r\n    }\r\n  }\r\n\r\n  return {\r\n    main: main,\r\n    node: node,\r\n  };\r\n}\r\n\r\nfunction hasDashboards(includes: PluginInclude[]): boolean {\r\n  return (\r\n    includes.find(include => {\r\n      return include.type === 'dashboard';\r\n    }) !== undefined\r\n  );\r\n}\r\n","import { DataSourceSettings, DataSourcePluginMeta } from '@grafana/data';\r\nimport { DataSourcesState } from '../../../types/datasources';\r\nimport { UrlQueryValue } from '@grafana/runtime';\r\n\r\nexport const getDataSources = (state: DataSourcesState) => {\r\n  const regex = new RegExp(state.searchQuery, 'i');\r\n\r\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\r\n    return regex.test(dataSource.name) || regex.test(dataSource.database);\r\n  });\r\n};\r\n\r\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\r\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\r\n\r\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\r\n    return regex.test(type.name);\r\n  });\r\n};\r\n\r\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings | null => {\r\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\r\n    return state.dataSource;\r\n  }\r\n  return {} as DataSourceSettings;\r\n};\r\n\r\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\r\n  if (state.dataSourceMeta.id === type) {\r\n    return state.dataSourceMeta;\r\n  }\r\n\r\n  return {} as DataSourcePluginMeta;\r\n};\r\n\r\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\r\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\r\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAOA;AAOA;AAAA;AACA;;;;AACA;;AAAA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;;AACA;;AAAA;AACA;;AAAA;AACA;;AAAA;AAEA;AACA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;;AACA;;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAAA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;;;AACA;AACA;;AAAA;AACA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;AACA;;AAAA;AACA;;AAAA;AACA;;;AACA;AACA;AAEA;AAAA;AACA;;;;;AACA;AACA;;AAAA;AACA;;AAAA;AACA;;;;AACA;AACA;AAMA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;AClJA;AAGA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AACA;AACA;;;;;;;;;AAEA;;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AAAA;AACA;AACA;;;;;;;;;AACA;AAEA;AACA;AACA;AACA;;;AAhBA;AAAA;AAAA;AAiBA;;;;;;;;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;AACA;AAEA;AACA;;;;;;;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACpLA;AACA;AAGA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;AC/HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;A","sourceRoot":""}