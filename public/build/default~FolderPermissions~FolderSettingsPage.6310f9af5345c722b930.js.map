{"version":3,"file":"default~FolderPermissions~FolderSettingsPage.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/features/folders/state/actions.ts","webpack:///webpack:///./public/app/features/folders/state/navModel.ts"],"sourcesContent":["import { AppEvents } from '@grafana/data';\r\n\r\nimport { getBackendSrv } from 'app/core/services/backend_srv';\r\nimport { FolderState, ThunkResult } from 'app/types';\r\nimport { DashboardAcl, DashboardAclUpdateDTO, NewDashboardAclItem, PermissionLevel } from 'app/types/acl';\r\n\r\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\r\nimport { buildNavModel } from './navModel';\r\nimport appEvents from 'app/core/app_events';\r\nimport { loadFolder, loadFolderPermissions } from './reducers';\r\n\r\nexport function getFolderByUid(uid: string): ThunkResult<void> {\r\n  return async dispatch => {\r\n    const folder = await getBackendSrv().getFolderByUid(uid);\r\n    dispatch(loadFolder(folder));\r\n    dispatch(updateNavIndex(buildNavModel(folder)));\r\n  };\r\n}\r\n\r\nexport function saveFolder(folder: FolderState): ThunkResult<void> {\r\n  return async dispatch => {\r\n    const res = await getBackendSrv().put(`/api/folders/${folder.uid}`, {\r\n      title: folder.title,\r\n      version: folder.version,\r\n    });\r\n\r\n    // this should be redux action at some point\r\n    appEvents.emit(AppEvents.alertSuccess, ['Folder saved']);\r\n\r\n    dispatch(updateLocation({ path: `${res.url}/settings` }));\r\n  };\r\n}\r\n\r\nexport function deleteFolder(uid: string): ThunkResult<void> {\r\n  return async dispatch => {\r\n    await getBackendSrv().deleteFolder(uid, true);\r\n    dispatch(updateLocation({ path: `dashboards` }));\r\n  };\r\n}\r\n\r\nexport function getFolderPermissions(uid: string): ThunkResult<void> {\r\n  return async dispatch => {\r\n    const permissions = await getBackendSrv().get(`/api/folders/${uid}/permissions`);\r\n    dispatch(loadFolderPermissions(permissions));\r\n  };\r\n}\r\n\r\nfunction toUpdateItem(item: DashboardAcl): DashboardAclUpdateDTO {\r\n  return {\r\n    userId: item.userId,\r\n    teamId: item.teamId,\r\n    role: item.role,\r\n    permission: item.permission,\r\n  };\r\n}\r\n\r\nexport function updateFolderPermission(itemToUpdate: DashboardAcl, level: PermissionLevel): ThunkResult<void> {\r\n  return async (dispatch, getStore) => {\r\n    const folder = getStore().folder;\r\n    const itemsToUpdate = [];\r\n\r\n    for (const item of folder.permissions) {\r\n      if (item.inherited) {\r\n        continue;\r\n      }\r\n\r\n      const updated = toUpdateItem(item);\r\n\r\n      // if this is the item we want to update, update it's permission\r\n      if (itemToUpdate === item) {\r\n        updated.permission = level;\r\n      }\r\n\r\n      itemsToUpdate.push(updated);\r\n    }\r\n\r\n    await getBackendSrv().post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\r\n    await dispatch(getFolderPermissions(folder.uid));\r\n  };\r\n}\r\n\r\nexport function removeFolderPermission(itemToDelete: DashboardAcl): ThunkResult<void> {\r\n  return async (dispatch, getStore) => {\r\n    const folder = getStore().folder;\r\n    const itemsToUpdate = [];\r\n\r\n    for (const item of folder.permissions) {\r\n      if (item.inherited || item === itemToDelete) {\r\n        continue;\r\n      }\r\n      itemsToUpdate.push(toUpdateItem(item));\r\n    }\r\n\r\n    await getBackendSrv().post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\r\n    await dispatch(getFolderPermissions(folder.uid));\r\n  };\r\n}\r\n\r\nexport function addFolderPermission(newItem: NewDashboardAclItem): ThunkResult<void> {\r\n  return async (dispatch, getStore) => {\r\n    const folder = getStore().folder;\r\n    const itemsToUpdate = [];\r\n\r\n    for (const item of folder.permissions) {\r\n      if (item.inherited) {\r\n        continue;\r\n      }\r\n      itemsToUpdate.push(toUpdateItem(item));\r\n    }\r\n\r\n    itemsToUpdate.push({\r\n      userId: newItem.userId,\r\n      teamId: newItem.teamId,\r\n      role: newItem.role,\r\n      permission: newItem.permission,\r\n    });\r\n\r\n    await getBackendSrv().post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\r\n    await dispatch(getFolderPermissions(folder.uid));\r\n  };\r\n}\r\n","import { FolderDTO } from 'app/types';\r\nimport { NavModelItem, NavModel } from '@grafana/data';\r\n\r\nexport function buildNavModel(folder: FolderDTO): NavModelItem {\r\n  return {\r\n    icon: 'fa fa-folder-open',\r\n    id: 'manage-folder',\r\n    subTitle: 'Manage folder dashboards & permissions',\r\n    url: '',\r\n    text: folder.title,\r\n    breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\r\n    children: [\r\n      {\r\n        active: false,\r\n        icon: 'fa fa-fw fa-th-large',\r\n        id: `folder-dashboards-${folder.uid}`,\r\n        text: 'Dashboards',\r\n        url: folder.url,\r\n      },\r\n      {\r\n        active: false,\r\n        icon: 'fa fa-fw fa-lock',\r\n        id: `folder-permissions-${folder.uid}`,\r\n        text: 'Permissions',\r\n        url: `${folder.url}/permissions`,\r\n      },\r\n      {\r\n        active: false,\r\n        icon: 'gicon gicon-cog',\r\n        id: `folder-settings-${folder.uid}`,\r\n        text: 'Settings',\r\n        url: `${folder.url}/settings`,\r\n      },\r\n    ],\r\n  };\r\n}\r\n\r\nexport function getLoadingNav(tabIndex: number): NavModel {\r\n  const main = buildNavModel({\r\n    id: 1,\r\n    uid: 'loading',\r\n    title: 'Loading',\r\n    url: 'url',\r\n    canSave: false,\r\n    version: 0,\r\n  });\r\n\r\n  main.children[tabIndex].active = true;\r\n\r\n  return {\r\n    main: main,\r\n    node: main.children[tabIndex],\r\n  };\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAAA;AACA;;;;AACA;;AAAA;AACA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;;AACA;AACA;AACA;AACA;;AAHA;AAKA;AACA;AAEA;;;;AACA;AACA;AAEA;AAAA;AACA;;;AACA;;AAAA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;;AACA;;AAAA;AACA;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;;;;;;AACA;AACA;;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;AAEA;;AAAA;AACA;;AAAA;;;;AACA;AACA;AAEA;AAAA;AACA;;;;;;AACA;AACA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAEA;;AAAA;AACA;;AAAA;;;;AACA;AACA;AAEA;AAAA;AACA;;;;;;AACA;AACA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAAA;AACA;;AAAA;;;;AACA;AACA;;;;;;;;;;;;;ACrHA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}