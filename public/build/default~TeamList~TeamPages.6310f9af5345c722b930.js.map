{"version":3,"file":"default~TeamList~TeamPages.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/core/components/FilterInput/FilterInput.tsx","webpack:///webpack:///./public/app/features/teams/state/actions.ts","webpack:///webpack:///./public/app/features/teams/state/navModel.ts","webpack:///webpack:///./public/app/features/teams/state/selectors.ts"],"sourcesContent":["import React, { forwardRef } from 'react';\r\nimport { escapeStringForRegex, unEscapeStringFromRegex } from '@grafana/data';\r\n\r\nexport interface Props {\r\n  value: string | undefined;\r\n  placeholder?: string;\r\n  labelClassName?: string;\r\n  inputClassName?: string;\r\n  onChange: (value: string) => void;\r\n}\r\n\r\nexport const FilterInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\r\n  <label className={props.labelClassName}>\r\n    <input\r\n      ref={ref}\r\n      type=\"text\"\r\n      className={props.inputClassName}\r\n      value={unEscapeStringFromRegex(props.value)}\r\n      onChange={event => props.onChange(escapeStringForRegex(event.target.value))}\r\n      placeholder={props.placeholder ? props.placeholder : null}\r\n    />\r\n    <i className=\"gf-form-input-icon fa fa-search\" />\r\n  </label>\r\n));\r\n","import { getBackendSrv } from '@grafana/runtime';\r\n\r\nimport { TeamMember, ThunkResult } from 'app/types';\r\nimport { updateNavIndex } from 'app/core/actions';\r\nimport { buildNavModel } from './navModel';\r\nimport { teamGroupsLoaded, teamLoaded, teamMembersLoaded, teamsLoaded } from './reducers';\r\n\r\nexport function loadTeams(): ThunkResult<void> {\r\n  return async dispatch => {\r\n    const response = await getBackendSrv().get('/api/teams/search', { perpage: 1000, page: 1 });\r\n    dispatch(teamsLoaded(response.teams));\r\n  };\r\n}\r\n\r\nexport function loadTeam(id: number): ThunkResult<void> {\r\n  return async dispatch => {\r\n    const response = await getBackendSrv().get(`/api/teams/${id}`);\r\n    dispatch(teamLoaded(response));\r\n    dispatch(updateNavIndex(buildNavModel(response)));\r\n  };\r\n}\r\n\r\nexport function loadTeamMembers(): ThunkResult<void> {\r\n  return async (dispatch, getStore) => {\r\n    const team = getStore().team.team;\r\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/members`);\r\n    dispatch(teamMembersLoaded(response));\r\n  };\r\n}\r\n\r\nexport function addTeamMember(id: number): ThunkResult<void> {\r\n  return async (dispatch, getStore) => {\r\n    const team = getStore().team.team;\r\n    await getBackendSrv().post(`/api/teams/${team.id}/members`, { userId: id });\r\n    dispatch(loadTeamMembers());\r\n  };\r\n}\r\n\r\nexport function removeTeamMember(id: number): ThunkResult<void> {\r\n  return async (dispatch, getStore) => {\r\n    const team = getStore().team.team;\r\n    await getBackendSrv().delete(`/api/teams/${team.id}/members/${id}`);\r\n    dispatch(loadTeamMembers());\r\n  };\r\n}\r\n\r\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\r\n  return async (dispatch, getStore) => {\r\n    const team = getStore().team.team;\r\n    await getBackendSrv().put(`/api/teams/${team.id}`, { name, email });\r\n    dispatch(loadTeam(team.id));\r\n  };\r\n}\r\n\r\nexport function loadTeamGroups(): ThunkResult<void> {\r\n  return async (dispatch, getStore) => {\r\n    const team = getStore().team.team;\r\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\r\n    dispatch(teamGroupsLoaded(response));\r\n  };\r\n}\r\n\r\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\r\n  return async (dispatch, getStore) => {\r\n    const team = getStore().team.team;\r\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\r\n    dispatch(loadTeamGroups());\r\n  };\r\n}\r\n\r\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\r\n  return async (dispatch, getStore) => {\r\n    const team = getStore().team.team;\r\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups/${encodeURIComponent(groupId)}`);\r\n    dispatch(loadTeamGroups());\r\n  };\r\n}\r\n\r\nexport function deleteTeam(id: number): ThunkResult<void> {\r\n  return async dispatch => {\r\n    await getBackendSrv().delete(`/api/teams/${id}`);\r\n    dispatch(loadTeams());\r\n  };\r\n}\r\n\r\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\r\n  return async dispatch => {\r\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\r\n      permission: member.permission,\r\n    });\r\n    dispatch(loadTeamMembers());\r\n  };\r\n}\r\n","import { Team, TeamPermissionLevel } from 'app/types';\r\nimport config from 'app/core/config';\r\nimport { NavModelItem, NavModel } from '@grafana/data';\r\n\r\nexport function buildNavModel(team: Team): NavModelItem {\r\n  const navModel = {\r\n    img: team.avatarUrl,\r\n    id: 'team-' + team.id,\r\n    subTitle: 'Manage members & settings',\r\n    url: '',\r\n    text: team.name,\r\n    breadcrumbs: [{ title: 'Teams', url: 'org/teams' }],\r\n    children: [\r\n      {\r\n        active: false,\r\n        icon: 'gicon gicon-team',\r\n        id: `team-members-${team.id}`,\r\n        text: 'Members',\r\n        url: `org/teams/edit/${team.id}/members`,\r\n      },\r\n      {\r\n        active: false,\r\n        icon: 'fa fa-fw fa-sliders',\r\n        id: `team-settings-${team.id}`,\r\n        text: 'Settings',\r\n        url: `org/teams/edit/${team.id}/settings`,\r\n      },\r\n    ],\r\n  };\r\n\r\n  if (config.licenseInfo.hasLicense) {\r\n    navModel.children.push({\r\n      active: false,\r\n      icon: 'fa fa-fw fa-refresh',\r\n      id: `team-groupsync-${team.id}`,\r\n      text: 'External group sync',\r\n      url: `org/teams/edit/${team.id}/groupsync`,\r\n    });\r\n  }\r\n\r\n  return navModel;\r\n}\r\n\r\nexport function getTeamLoadingNav(pageName: string): NavModel {\r\n  const main = buildNavModel({\r\n    avatarUrl: 'public/img/user_profile.png',\r\n    id: 1,\r\n    name: 'Loading',\r\n    email: 'loading',\r\n    memberCount: 0,\r\n    permission: TeamPermissionLevel.Member,\r\n  });\r\n\r\n  let node: NavModelItem;\r\n\r\n  // find active page\r\n  for (const child of main.children) {\r\n    if (child.id.indexOf(pageName) > 0) {\r\n      child.active = true;\r\n      node = child;\r\n      break;\r\n    }\r\n  }\r\n\r\n  return {\r\n    main: main,\r\n    node: node,\r\n  };\r\n}\r\n","import { Team, TeamsState, TeamState, TeamMember, OrgRole, TeamPermissionLevel } from 'app/types';\r\nimport { User } from 'app/core/services/context_srv';\r\n\r\nexport const getSearchQuery = (state: TeamsState) => state.searchQuery;\r\nexport const getSearchMemberQuery = (state: TeamState) => state.searchMemberQuery;\r\nexport const getTeamGroups = (state: TeamState) => state.groups;\r\nexport const getTeamsCount = (state: TeamsState) => state.teams.length;\r\n\r\nexport const getTeam = (state: TeamState, currentTeamId: any): Team | null => {\r\n  if (state.team.id === parseInt(currentTeamId, 10)) {\r\n    return state.team;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const getTeams = (state: TeamsState) => {\r\n  const regex = RegExp(state.searchQuery, 'i');\r\n\r\n  return state.teams.filter(team => {\r\n    return regex.test(team.name);\r\n  });\r\n};\r\n\r\nexport const getTeamMembers = (state: TeamState) => {\r\n  const regex = RegExp(state.searchMemberQuery, 'i');\r\n\r\n  return state.members.filter(member => {\r\n    return regex.test(member.login) || regex.test(member.email) || regex.test(member.name);\r\n  });\r\n};\r\n\r\nexport interface Config {\r\n  members: TeamMember[];\r\n  editorsCanAdmin: boolean;\r\n  signedInUser: User;\r\n}\r\n\r\nexport const isSignedInUserTeamAdmin = (config: Config): boolean => {\r\n  const { members, signedInUser, editorsCanAdmin } = config;\r\n  const userInMembers = members.find(m => m.userId === signedInUser.id);\r\n  const permission = userInMembers ? userInMembers.permission : TeamPermissionLevel.Member;\r\n\r\n  return isPermissionTeamAdmin({ permission, signedInUser, editorsCanAdmin });\r\n};\r\n\r\nexport interface PermissionConfig {\r\n  permission: TeamPermissionLevel;\r\n  editorsCanAdmin: boolean;\r\n  signedInUser: User;\r\n}\r\n\r\nexport const isPermissionTeamAdmin = (config: PermissionConfig): boolean => {\r\n  const { permission, signedInUser, editorsCanAdmin } = config;\r\n  const isAdmin = signedInUser.isGrafanaAdmin || signedInUser.orgRole === OrgRole.Admin;\r\n  const userIsTeamAdmin = permission === TeamPermissionLevel.Admin;\r\n  const isSignedInUserTeamAdmin = isAdmin || userIsTeamAdmin;\r\n\r\n  return isSignedInUserTeamAdmin || !editorsCanAdmin;\r\n};\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAEA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AAGA;AACA;AACA;AAEA;AAAA;AACA;;;;AACA;;AAAA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;;AACA;;AAAA;AACA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;;;AACA;AACA;;AAAA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;;;AACA;AACA;;AAAA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;;;AACA;AACA;;AAAA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;;;AACA;AACA;;AAAA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;;;AACA;AACA;;AAAA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;;;AACA;AACA;;AAAA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;;;AACA;AACA;;AAAA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;AACA;;AAAA;AACA;;;;AACA;AACA;AAEA;AAAA;AACA;;;AACA;AACA;AACA;;AAFA;AAGA;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC5FA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;A","sourceRoot":""}