{"version":3,"file":"explore.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./node_modules/lodash/_baseHas.js","webpack:///webpack:///./node_modules/lodash/has.js","webpack:///webpack:///./node_modules/lodash/negate.js","webpack:///webpack:///./node_modules/lodash/omitBy.js","webpack:///webpack:///./node_modules/lodash/pickBy.js","webpack:///webpack:///./public/app/features/explore/ElapsedTime.tsx","webpack:///webpack:///./public/app/features/explore/ErrorContainer.tsx","webpack:///webpack:///./public/app/features/explore/Explore.tsx","webpack:///webpack:///./public/app/features/explore/ExploreGraphPanel.tsx","webpack:///webpack:///./public/app/features/explore/ExploreTimeControls.tsx","webpack:///webpack:///./public/app/features/explore/ExploreToolbar.tsx","webpack:///webpack:///./public/app/features/explore/LiveLogs.tsx","webpack:///webpack:///./public/app/features/explore/LiveTailButton.tsx","webpack:///webpack:///./public/app/features/explore/Logs.tsx","webpack:///webpack:///./public/app/features/explore/LogsContainer.tsx","webpack:///webpack:///./public/app/features/explore/NoDataSourceCallToAction.tsx","webpack:///webpack:///./public/app/features/explore/QueryEditor.tsx","webpack:///webpack:///./public/app/features/explore/QueryRow.tsx","webpack:///webpack:///./public/app/features/explore/QueryRowActions.tsx","webpack:///webpack:///./public/app/features/explore/QueryRows.tsx","webpack:///webpack:///./public/app/features/explore/ResponsiveButton.tsx","webpack:///webpack:///./public/app/features/explore/RunButton.tsx","webpack:///webpack:///./public/app/features/explore/TableContainer.tsx","webpack:///webpack:///./public/app/features/explore/TimeSyncButton.tsx","webpack:///webpack:///./public/app/features/explore/Wrapper.tsx","webpack:///webpack:///./public/app/features/explore/useLiveTailControls.ts","webpack:///webpack:///./public/app/features/explore/utils/LogsCrossFadeTransition.tsx"],"sourcesContent":["/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nmodule.exports = baseHas;\n","var baseHas = require('./_baseHas'),\n    hasPath = require('./_hasPath');\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nmodule.exports = has;\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n","var baseIteratee = require('./_baseIteratee'),\n    negate = require('./negate'),\n    pickBy = require('./pickBy');\n\n/**\n * The opposite of `_.pickBy`; this method creates an object composed of\n * the own and inherited enumerable string keyed properties of `object` that\n * `predicate` doesn't return truthy for. The predicate is invoked with two\n * arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omitBy(object, _.isNumber);\n * // => { 'b': '2' }\n */\nfunction omitBy(object, predicate) {\n  return pickBy(object, negate(baseIteratee(predicate)));\n}\n\nmodule.exports = omitBy;\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    basePickBy = require('./_basePickBy'),\n    getAllKeysIn = require('./_getAllKeysIn');\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pickBy(object, _.isNumber);\n * // => { 'a': 1, 'c': 3 }\n */\nfunction pickBy(object, predicate) {\n  if (object == null) {\n    return {};\n  }\n  var props = arrayMap(getAllKeysIn(object), function(prop) {\n    return [prop];\n  });\n  predicate = baseIteratee(predicate);\n  return basePickBy(object, props, function(value, path) {\n    return predicate(value, path[0]);\n  });\n}\n\nmodule.exports = pickBy;\n","import React, { PureComponent } from 'react';\r\nimport { toDuration } from '@grafana/data';\r\n\r\nconst INTERVAL = 150;\r\n\r\nexport interface Props {\r\n  time?: number;\r\n  // Use this to reset the timer. Any value is allowed just need to be !== from the previous.\r\n  // Keep in mind things like [] !== [] or {} !== {}.\r\n  resetKey?: any;\r\n  className?: string;\r\n  humanize?: boolean;\r\n}\r\n\r\nexport interface State {\r\n  elapsed: number;\r\n}\r\n\r\n/**\r\n * Shows an incremental time ticker of elapsed time from some event.\r\n */\r\nexport default class ElapsedTime extends PureComponent<Props, State> {\r\n  offset: number;\r\n  timer: number;\r\n\r\n  state = {\r\n    elapsed: 0,\r\n  };\r\n\r\n  start() {\r\n    this.offset = Date.now();\r\n    this.timer = window.setInterval(this.tick, INTERVAL);\r\n  }\r\n\r\n  tick = () => {\r\n    const jetzt = Date.now();\r\n    const elapsed = jetzt - this.offset;\r\n    this.setState({ elapsed });\r\n  };\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\r\n    if (nextProps.time) {\r\n      clearInterval(this.timer);\r\n    } else if (this.props.time) {\r\n      this.start();\r\n    }\r\n\r\n    if (nextProps.resetKey !== this.props.resetKey) {\r\n      clearInterval(this.timer);\r\n      this.start();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.start();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  render() {\r\n    const { elapsed } = this.state;\r\n    const { className, time, humanize } = this.props;\r\n    const value = (time || elapsed) / 1000;\r\n    let displayValue = `${value.toFixed(1)}s`;\r\n    if (humanize) {\r\n      const duration = toDuration(elapsed);\r\n      const hours = duration.hours();\r\n      const minutes = duration.minutes();\r\n      const seconds = duration.seconds();\r\n      displayValue = hours ? `${hours}h ${minutes}m ${seconds}s` : minutes ? ` ${minutes}m ${seconds}s` : `${seconds}s`;\r\n    }\r\n    return <span className={`elapsed-time ${className}`}>{displayValue}</span>;\r\n  }\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\nimport { DataQueryError } from '@grafana/data';\r\nimport { FadeIn } from 'app/core/components/Animations/FadeIn';\r\nimport { getFirstQueryErrorWithoutRefId, getValueWithRefId } from 'app/core/utils/explore';\r\n\r\ninterface Props {\r\n  queryErrors?: DataQueryError[];\r\n}\r\n\r\nexport const ErrorContainer: FunctionComponent<Props> = props => {\r\n  const { queryErrors } = props;\r\n  const refId = getValueWithRefId(queryErrors);\r\n  const queryError = refId ? null : getFirstQueryErrorWithoutRefId(queryErrors);\r\n  const showError = queryError ? true : false;\r\n  const duration = showError ? 100 : 10;\r\n  const message = queryError ? queryError.message : null;\r\n\r\n  return (\r\n    <FadeIn in={showError} duration={duration}>\r\n      <div className=\"alert-container\">\r\n        <div className=\"alert-error alert\">\r\n          <div className=\"alert-icon\">\r\n            <i className=\"fa fa-exclamation-triangle\" />\r\n          </div>\r\n          <div className=\"alert-body\">\r\n            <div className=\"alert-title\">{message}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </FadeIn>\r\n  );\r\n};\r\n","// Libraries\r\nimport React from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { css } from 'emotion';\r\nimport { connect } from 'react-redux';\r\nimport AutoSizer from 'react-virtualized-auto-sizer';\r\nimport memoizeOne from 'memoize-one';\r\n\r\n// Services & Utils\r\nimport store from 'app/core/store';\r\n// Components\r\nimport { ErrorBoundaryAlert } from '@grafana/ui';\r\nimport LogsContainer from './LogsContainer';\r\nimport QueryRows from './QueryRows';\r\nimport TableContainer from './TableContainer';\r\n// Actions\r\nimport {\r\n  changeSize,\r\n  initializeExplore,\r\n  modifyQueries,\r\n  scanStart,\r\n  setQueries,\r\n  refreshExplore,\r\n  updateTimeRange,\r\n  toggleGraph,\r\n  addQueryRow,\r\n} from './state/actions';\r\n// Types\r\nimport {\r\n  DataQuery,\r\n  DataSourceApi,\r\n  PanelData,\r\n  RawTimeRange,\r\n  TimeRange,\r\n  GraphSeriesXY,\r\n  TimeZone,\r\n  AbsoluteTimeRange,\r\n  LoadingState,\r\n} from '@grafana/data';\r\n\r\nimport {\r\n  ExploreItemState,\r\n  ExploreUrlState,\r\n  ExploreId,\r\n  ExploreUpdateState,\r\n  ExploreUIState,\r\n  ExploreMode,\r\n} from 'app/types/explore';\r\nimport { StoreState } from 'app/types';\r\nimport {\r\n  ensureQueries,\r\n  DEFAULT_RANGE,\r\n  DEFAULT_UI_STATE,\r\n  getTimeRangeFromUrl,\r\n  getTimeRange,\r\n  lastUsedDatasourceKeyForOrgId,\r\n} from 'app/core/utils/explore';\r\nimport { Emitter } from 'app/core/utils/emitter';\r\nimport { ExploreToolbar } from './ExploreToolbar';\r\nimport { NoDataSourceCallToAction } from './NoDataSourceCallToAction';\r\nimport { getTimeZone } from '../profile/state/selectors';\r\nimport { ErrorContainer } from './ErrorContainer';\r\nimport { scanStopAction } from './state/actionTypes';\r\nimport { ExploreGraphPanel } from './ExploreGraphPanel';\r\n\r\nconst getStyles = memoizeOne(() => {\r\n  return {\r\n    logsMain: css`\r\n      label: logsMain;\r\n      // Is needed for some transition animations to work.\r\n      position: relative;\r\n    `,\r\n    exploreAddButton: css`\r\n      margin-top: 1em;\r\n    `,\r\n  };\r\n});\r\n\r\ninterface ExploreProps {\r\n  changeSize: typeof changeSize;\r\n  datasourceInstance: DataSourceApi;\r\n  datasourceMissing: boolean;\r\n  exploreId: ExploreId;\r\n  initializeExplore: typeof initializeExplore;\r\n  initialized: boolean;\r\n  modifyQueries: typeof modifyQueries;\r\n  update: ExploreUpdateState;\r\n  refreshExplore: typeof refreshExplore;\r\n  scanning?: boolean;\r\n  scanRange?: RawTimeRange;\r\n  scanStart: typeof scanStart;\r\n  scanStopAction: typeof scanStopAction;\r\n  setQueries: typeof setQueries;\r\n  split: boolean;\r\n  queryKeys: string[];\r\n  initialDatasource: string;\r\n  initialQueries: DataQuery[];\r\n  initialRange: TimeRange;\r\n  mode: ExploreMode;\r\n  initialUI: ExploreUIState;\r\n  isLive: boolean;\r\n  syncedTimes: boolean;\r\n  updateTimeRange: typeof updateTimeRange;\r\n  graphResult?: GraphSeriesXY[];\r\n  loading?: boolean;\r\n  absoluteRange: AbsoluteTimeRange;\r\n  showingGraph?: boolean;\r\n  showingTable?: boolean;\r\n  timeZone?: TimeZone;\r\n  onHiddenSeriesChanged?: (hiddenSeries: string[]) => void;\r\n  toggleGraph: typeof toggleGraph;\r\n  queryResponse: PanelData;\r\n  originPanelId: number;\r\n  addQueryRow: typeof addQueryRow;\r\n}\r\n\r\n/**\r\n * Explore provides an area for quick query iteration for a given datasource.\r\n * Once a datasource is selected it populates the query section at the top.\r\n * When queries are run, their results are being displayed in the main section.\r\n * The datasource determines what kind of query editor it brings, and what kind\r\n * of results viewers it supports. The state is managed entirely in Redux.\r\n *\r\n * SPLIT VIEW\r\n *\r\n * Explore can have two Explore areas side-by-side. This is handled in `Wrapper.tsx`.\r\n * Since there can be multiple Explores (e.g., left and right) each action needs\r\n * the `exploreId` as first parameter so that the reducer knows which Explore state\r\n * is affected.\r\n *\r\n * DATASOURCE REQUESTS\r\n *\r\n * A click on Run Query creates transactions for all DataQueries for all expanded\r\n * result viewers. New runs are discarding previous runs. Upon completion a transaction\r\n * saves the result. The result viewers construct their data from the currently existing\r\n * transactions.\r\n *\r\n * The result viewers determine some of the query options sent to the datasource, e.g.,\r\n * `format`, to indicate eventual transformations by the datasources' result transformers.\r\n */\r\nexport class Explore extends React.PureComponent<ExploreProps> {\r\n  el: any;\r\n  exploreEvents: Emitter;\r\n\r\n  constructor(props: ExploreProps) {\r\n    super(props);\r\n    this.exploreEvents = new Emitter();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {\r\n      initialized,\r\n      exploreId,\r\n      initialDatasource,\r\n      initialQueries,\r\n      initialRange,\r\n      mode,\r\n      initialUI,\r\n      originPanelId,\r\n    } = this.props;\r\n    const width = this.el ? this.el.offsetWidth : 0;\r\n\r\n    // initialize the whole explore first time we mount and if browser history contains a change in datasource\r\n    if (!initialized) {\r\n      this.props.initializeExplore(\r\n        exploreId,\r\n        initialDatasource,\r\n        initialQueries,\r\n        initialRange,\r\n        mode,\r\n        width,\r\n        this.exploreEvents,\r\n        initialUI,\r\n        originPanelId\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.exploreEvents.removeAllListeners();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: ExploreProps) {\r\n    this.refreshExplore();\r\n  }\r\n\r\n  getRef = (el: any) => {\r\n    this.el = el;\r\n  };\r\n\r\n  onChangeTime = (rawRange: RawTimeRange) => {\r\n    const { updateTimeRange, exploreId } = this.props;\r\n    updateTimeRange({ exploreId, rawRange });\r\n  };\r\n\r\n  // Use this in help pages to set page to a single query\r\n  onClickExample = (query: DataQuery) => {\r\n    this.props.setQueries(this.props.exploreId, [query]);\r\n  };\r\n\r\n  onClickFilterLabel = (key: string, value: string) => {\r\n    this.onModifyQueries({ type: 'ADD_FILTER', key, value });\r\n  };\r\n\r\n  onClickFilterOutLabel = (key: string, value: string) => {\r\n    this.onModifyQueries({ type: 'ADD_FILTER_OUT', key, value });\r\n  };\r\n\r\n  onClickAddQueryRowButton = () => {\r\n    const { exploreId, queryKeys } = this.props;\r\n    this.props.addQueryRow(exploreId, queryKeys.length);\r\n  };\r\n\r\n  onModifyQueries = (action: any, index?: number) => {\r\n    const { datasourceInstance } = this.props;\r\n    if (datasourceInstance?.modifyQuery) {\r\n      const modifier = (queries: DataQuery, modification: any) =>\r\n        datasourceInstance.modifyQuery!(queries, modification);\r\n      this.props.modifyQueries(this.props.exploreId, action, modifier, index);\r\n    }\r\n  };\r\n\r\n  onResize = (size: { height: number; width: number }) => {\r\n    this.props.changeSize(this.props.exploreId, size);\r\n  };\r\n\r\n  onStartScanning = () => {\r\n    // Scanner will trigger a query\r\n    this.props.scanStart(this.props.exploreId);\r\n  };\r\n\r\n  onStopScanning = () => {\r\n    this.props.scanStopAction({ exploreId: this.props.exploreId });\r\n  };\r\n\r\n  onToggleGraph = (showingGraph: boolean) => {\r\n    const { toggleGraph, exploreId } = this.props;\r\n    toggleGraph(exploreId, showingGraph);\r\n  };\r\n\r\n  onUpdateTimeRange = (absoluteRange: AbsoluteTimeRange) => {\r\n    const { exploreId, updateTimeRange } = this.props;\r\n    updateTimeRange({ exploreId, absoluteRange });\r\n  };\r\n\r\n  refreshExplore = () => {\r\n    const { exploreId, update } = this.props;\r\n\r\n    if (update.queries || update.ui || update.range || update.datasource || update.mode) {\r\n      this.props.refreshExplore(exploreId);\r\n    }\r\n  };\r\n\r\n  renderEmptyState = () => {\r\n    return (\r\n      <div className=\"explore-container\">\r\n        <NoDataSourceCallToAction />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      datasourceInstance,\r\n      datasourceMissing,\r\n      exploreId,\r\n      split,\r\n      queryKeys,\r\n      mode,\r\n      graphResult,\r\n      loading,\r\n      absoluteRange,\r\n      showingGraph,\r\n      showingTable,\r\n      timeZone,\r\n      queryResponse,\r\n      syncedTimes,\r\n      isLive,\r\n    } = this.props;\r\n    const exploreClass = split ? 'explore explore-split' : 'explore';\r\n    const styles = getStyles();\r\n    const StartPage = datasourceInstance?.components?.ExploreStartPage;\r\n    const showStartPage = !queryResponse || queryResponse.state === LoadingState.NotStarted;\r\n\r\n    return (\r\n      <div className={exploreClass} ref={this.getRef}>\r\n        <ExploreToolbar exploreId={exploreId} onChangeTime={this.onChangeTime} />\r\n        {datasourceMissing ? this.renderEmptyState() : null}\r\n        {datasourceInstance && (\r\n          <div className=\"explore-container\">\r\n            <QueryRows exploreEvents={this.exploreEvents} exploreId={exploreId} queryKeys={queryKeys} />\r\n            <div className=\"gf-form\">\r\n              <button\r\n                aria-label=\"Add row button\"\r\n                className={`gf-form-label gf-form-label--btn ${styles.exploreAddButton}`}\r\n                onClick={this.onClickAddQueryRowButton}\r\n                disabled={isLive}\r\n              >\r\n                <i className={'fa fa-fw fa-plus icon-margin-right'} />\r\n                <span className=\"btn-title\">{'\\xA0' + 'Add query'}</span>\r\n              </button>\r\n            </div>\r\n            <ErrorContainer queryErrors={queryResponse.error ? [queryResponse.error] : undefined} />\r\n            <AutoSizer onResize={this.onResize} disableHeight>\r\n              {({ width }) => {\r\n                if (width === 0) {\r\n                  return null;\r\n                }\r\n\r\n                return (\r\n                  <main className={`m-t-2 ${styles.logsMain}`} style={{ width }}>\r\n                    <ErrorBoundaryAlert>\r\n                      {showStartPage && StartPage && (\r\n                        <div className=\"grafana-info-box grafana-info-box--max-lg\">\r\n                          <StartPage\r\n                            onClickExample={this.onClickExample}\r\n                            datasource={datasourceInstance}\r\n                            exploreMode={mode}\r\n                          />\r\n                        </div>\r\n                      )}\r\n                      {!showStartPage && (\r\n                        <>\r\n                          {mode === ExploreMode.Metrics && (\r\n                            <ExploreGraphPanel\r\n                              series={graphResult}\r\n                              width={width}\r\n                              loading={loading}\r\n                              absoluteRange={absoluteRange}\r\n                              isStacked={false}\r\n                              showPanel={true}\r\n                              showingGraph={showingGraph}\r\n                              showingTable={showingTable}\r\n                              timeZone={timeZone}\r\n                              onToggleGraph={this.onToggleGraph}\r\n                              onUpdateTimeRange={this.onUpdateTimeRange}\r\n                              showBars={false}\r\n                              showLines={true}\r\n                            />\r\n                          )}\r\n                          {mode === ExploreMode.Metrics && (\r\n                            <TableContainer width={width} exploreId={exploreId} onClickCell={this.onClickFilterLabel} />\r\n                          )}\r\n                          {mode === ExploreMode.Logs && (\r\n                            <LogsContainer\r\n                              width={width}\r\n                              exploreId={exploreId}\r\n                              syncedTimes={syncedTimes}\r\n                              onClickFilterLabel={this.onClickFilterLabel}\r\n                              onClickFilterOutLabel={this.onClickFilterOutLabel}\r\n                              onStartScanning={this.onStartScanning}\r\n                              onStopScanning={this.onStopScanning}\r\n                            />\r\n                          )}\r\n                        </>\r\n                      )}\r\n                    </ErrorBoundaryAlert>\r\n                  </main>\r\n                );\r\n              }}\r\n            </AutoSizer>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ensureQueriesMemoized = memoizeOne(ensureQueries);\r\nconst getTimeRangeFromUrlMemoized = memoizeOne(getTimeRangeFromUrl);\r\n\r\nfunction mapStateToProps(state: StoreState, { exploreId }: ExploreProps): Partial<ExploreProps> {\r\n  const explore = state.explore;\r\n  const { split, syncedTimes } = explore;\r\n  const item: ExploreItemState = explore[exploreId];\r\n  const timeZone = getTimeZone(state.user);\r\n  const {\r\n    datasourceInstance,\r\n    datasourceMissing,\r\n    initialized,\r\n    queryKeys,\r\n    urlState,\r\n    update,\r\n    isLive,\r\n    supportedModes,\r\n    mode,\r\n    graphResult,\r\n    loading,\r\n    showingGraph,\r\n    showingTable,\r\n    absoluteRange,\r\n    queryResponse,\r\n  } = item;\r\n\r\n  const { datasource, queries, range: urlRange, mode: urlMode, ui, originPanelId } = (urlState ||\r\n    {}) as ExploreUrlState;\r\n  const initialDatasource = datasource || store.get(lastUsedDatasourceKeyForOrgId(state.user.orgId));\r\n  const initialQueries: DataQuery[] = ensureQueriesMemoized(queries);\r\n  const initialRange = urlRange\r\n    ? getTimeRangeFromUrlMemoized(urlRange, timeZone)\r\n    : getTimeRange(timeZone, DEFAULT_RANGE);\r\n\r\n  let newMode: ExploreMode | undefined;\r\n\r\n  if (supportedModes.length) {\r\n    const urlModeIsValid = supportedModes.includes(urlMode);\r\n    const modeStateIsValid = supportedModes.includes(mode);\r\n\r\n    if (modeStateIsValid) {\r\n      newMode = mode;\r\n    } else if (urlModeIsValid) {\r\n      newMode = urlMode;\r\n    } else {\r\n      newMode = supportedModes[0];\r\n    }\r\n  } else {\r\n    newMode = [ExploreMode.Metrics, ExploreMode.Logs].includes(urlMode) ? urlMode : undefined;\r\n  }\r\n\r\n  const initialUI = ui || DEFAULT_UI_STATE;\r\n\r\n  return {\r\n    datasourceInstance,\r\n    datasourceMissing,\r\n    initialized,\r\n    split,\r\n    queryKeys,\r\n    update,\r\n    initialDatasource,\r\n    initialQueries,\r\n    initialRange,\r\n    mode: newMode,\r\n    initialUI,\r\n    isLive,\r\n    graphResult,\r\n    loading,\r\n    showingGraph,\r\n    showingTable,\r\n    absoluteRange,\r\n    queryResponse,\r\n    originPanelId,\r\n    syncedTimes,\r\n    timeZone,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps: Partial<ExploreProps> = {\r\n  changeSize,\r\n  initializeExplore,\r\n  modifyQueries,\r\n  refreshExplore,\r\n  scanStart,\r\n  scanStopAction,\r\n  setQueries,\r\n  updateTimeRange,\r\n  toggleGraph,\r\n  addQueryRow,\r\n};\r\n\r\nexport default hot(module)(\r\n  // @ts-ignore\r\n  connect(mapStateToProps, mapDispatchToProps)(Explore)\r\n) as React.ComponentType<{ exploreId: ExploreId }>;\r\n","import React, { PureComponent } from 'react';\r\nimport { css, cx } from 'emotion';\r\nimport { GrafanaTheme, TimeZone, AbsoluteTimeRange, GraphSeriesXY, dateTimeForTimeZone } from '@grafana/data';\r\n\r\nimport {\r\n  selectThemeVariant,\r\n  Themeable,\r\n  GraphWithLegend,\r\n  LegendDisplayMode,\r\n  withTheme,\r\n  Collapse,\r\n  GraphSeriesToggler,\r\n  GraphSeriesTogglerAPI,\r\n  Chart,\r\n} from '@grafana/ui';\r\n\r\nconst MAX_NUMBER_OF_TIME_SERIES = 20;\r\n\r\nconst getStyles = (theme: GrafanaTheme) => ({\r\n  timeSeriesDisclaimer: css`\r\n    label: time-series-disclaimer;\r\n    width: 300px;\r\n    margin: ${theme.spacing.sm} auto;\r\n    padding: 10px 0;\r\n    border-radius: ${theme.border.radius.md};\r\n    text-align: center;\r\n    background-color: ${selectThemeVariant({ light: theme.colors.white, dark: theme.colors.dark4 }, theme.type)};\r\n  `,\r\n  disclaimerIcon: css`\r\n    label: disclaimer-icon;\r\n    color: ${theme.colors.yellow};\r\n    margin-right: ${theme.spacing.xs};\r\n  `,\r\n  showAllTimeSeries: css`\r\n    label: show-all-time-series;\r\n    cursor: pointer;\r\n    color: ${theme.colors.linkExternal};\r\n  `,\r\n});\r\n\r\ninterface Props extends Themeable {\r\n  series?: GraphSeriesXY[];\r\n  width: number;\r\n  absoluteRange: AbsoluteTimeRange;\r\n  loading?: boolean;\r\n  showPanel: boolean;\r\n  showBars: boolean;\r\n  showLines: boolean;\r\n  isStacked: boolean;\r\n  showingGraph?: boolean;\r\n  showingTable?: boolean;\r\n  timeZone?: TimeZone;\r\n  onUpdateTimeRange: (absoluteRange: AbsoluteTimeRange) => void;\r\n  onToggleGraph?: (showingGraph: boolean) => void;\r\n  onHiddenSeriesChanged?: (hiddenSeries: string[]) => void;\r\n}\r\n\r\ninterface State {\r\n  hiddenSeries: string[];\r\n  showAllTimeSeries: boolean;\r\n}\r\n\r\nclass UnThemedExploreGraphPanel extends PureComponent<Props, State> {\r\n  state: State = {\r\n    hiddenSeries: [],\r\n    showAllTimeSeries: false,\r\n  };\r\n\r\n  onShowAllTimeSeries = () => {\r\n    this.setState({\r\n      showAllTimeSeries: true,\r\n    });\r\n  };\r\n\r\n  onClickGraphButton = () => {\r\n    const { onToggleGraph, showingGraph } = this.props;\r\n    if (onToggleGraph) {\r\n      onToggleGraph(showingGraph ?? false);\r\n    }\r\n  };\r\n\r\n  onChangeTime = (from: number, to: number) => {\r\n    const { onUpdateTimeRange } = this.props;\r\n    onUpdateTimeRange({ from, to });\r\n  };\r\n\r\n  renderGraph = () => {\r\n    const {\r\n      width,\r\n      series,\r\n      onHiddenSeriesChanged,\r\n      timeZone,\r\n      absoluteRange,\r\n      showPanel,\r\n      showingGraph,\r\n      showingTable,\r\n      showBars,\r\n      showLines,\r\n      isStacked,\r\n    } = this.props;\r\n    const { showAllTimeSeries } = this.state;\r\n\r\n    if (!series) {\r\n      return null;\r\n    }\r\n\r\n    const timeRange = {\r\n      from: dateTimeForTimeZone(timeZone, absoluteRange.from),\r\n      to: dateTimeForTimeZone(timeZone, absoluteRange.to),\r\n      raw: {\r\n        from: dateTimeForTimeZone(timeZone, absoluteRange.from),\r\n        to: dateTimeForTimeZone(timeZone, absoluteRange.to),\r\n      },\r\n    };\r\n    const height = showPanel === false ? 100 : showingGraph && showingTable ? 200 : 400;\r\n    const lineWidth = showLines ? 1 : 5;\r\n    const seriesToShow = showAllTimeSeries ? series : series.slice(0, MAX_NUMBER_OF_TIME_SERIES);\r\n\r\n    return (\r\n      <GraphSeriesToggler series={seriesToShow} onHiddenSeriesChanged={onHiddenSeriesChanged}>\r\n        {({ onSeriesToggle, toggledSeries }: GraphSeriesTogglerAPI) => {\r\n          return (\r\n            <GraphWithLegend\r\n              displayMode={LegendDisplayMode.List}\r\n              height={height}\r\n              isLegendVisible={true}\r\n              placement={'under'}\r\n              width={width}\r\n              timeRange={timeRange}\r\n              timeZone={timeZone}\r\n              showBars={showBars}\r\n              showLines={showLines}\r\n              showPoints={false}\r\n              onToggleSort={() => {}}\r\n              series={toggledSeries}\r\n              isStacked={isStacked}\r\n              lineWidth={lineWidth}\r\n              onSeriesToggle={onSeriesToggle}\r\n              onHorizontalRegionSelected={this.onChangeTime}\r\n            >\r\n              {/* For logs we are using mulit mode until we refactor logs histogram to use barWidth instead of lineWidth to render bars */}\r\n              <Chart.Tooltip mode={showBars ? 'multi' : 'single'} />\r\n            </GraphWithLegend>\r\n          );\r\n        }}\r\n      </GraphSeriesToggler>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { series, showPanel, showingGraph, loading, theme } = this.props;\r\n    const { showAllTimeSeries } = this.state;\r\n    const style = getStyles(theme);\r\n\r\n    return (\r\n      <>\r\n        {series && series.length > MAX_NUMBER_OF_TIME_SERIES && !showAllTimeSeries && (\r\n          <div className={cx([style.timeSeriesDisclaimer])}>\r\n            <i className={cx(['fa fa-fw fa-warning', style.disclaimerIcon])} />\r\n            {`Showing only ${MAX_NUMBER_OF_TIME_SERIES} time series. `}\r\n            <span\r\n              className={cx([style.showAllTimeSeries])}\r\n              onClick={this.onShowAllTimeSeries}\r\n            >{`Show all ${series.length}`}</span>\r\n          </div>\r\n        )}\r\n\r\n        {showPanel && (\r\n          <Collapse\r\n            label=\"Graph\"\r\n            collapsible\r\n            isOpen={showingGraph}\r\n            loading={loading}\r\n            onToggle={this.onClickGraphButton}\r\n          >\r\n            {this.renderGraph()}\r\n          </Collapse>\r\n        )}\r\n\r\n        {!showPanel && this.renderGraph()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport const ExploreGraphPanel = withTheme(UnThemedExploreGraphPanel);\r\nExploreGraphPanel.displayName = 'ExploreGraphPanel';\r\n","// Libaries\r\nimport React, { Component } from 'react';\r\n\r\n// Types\r\nimport { ExploreId } from 'app/types';\r\nimport { TimeRange, TimeZone, RawTimeRange, dateTimeForTimeZone } from '@grafana/data';\r\n\r\n// State\r\n\r\n// Components\r\nimport { TimeSyncButton } from './TimeSyncButton';\r\nimport { TimePickerWithHistory } from 'app/core/components/TimePicker/TimePickerWithHistory';\r\n\r\n// Utils & Services\r\nimport { getShiftedTimeRange, getZoomedTimeRange } from 'app/core/utils/timePicker';\r\n\r\nexport interface Props {\r\n  exploreId: ExploreId;\r\n  hideText?: boolean;\r\n  range: TimeRange;\r\n  timeZone: TimeZone;\r\n  splitted: boolean;\r\n  syncedTimes: boolean;\r\n  onChangeTimeSync: () => void;\r\n  onChangeTime: (range: RawTimeRange) => void;\r\n}\r\n\r\nexport class ExploreTimeControls extends Component<Props> {\r\n  onMoveTimePicker = (direction: number) => {\r\n    const { range, onChangeTime, timeZone } = this.props;\r\n    const { from, to } = getShiftedTimeRange(direction, range);\r\n    const nextTimeRange = {\r\n      from: dateTimeForTimeZone(timeZone, from),\r\n      to: dateTimeForTimeZone(timeZone, to),\r\n    };\r\n\r\n    onChangeTime(nextTimeRange);\r\n  };\r\n\r\n  onMoveForward = () => this.onMoveTimePicker(1);\r\n  onMoveBack = () => this.onMoveTimePicker(-1);\r\n\r\n  onChangeTimePicker = (timeRange: TimeRange) => {\r\n    this.props.onChangeTime(timeRange.raw);\r\n  };\r\n\r\n  onZoom = () => {\r\n    const { range, onChangeTime, timeZone } = this.props;\r\n    const { from, to } = getZoomedTimeRange(range, 2);\r\n    const nextTimeRange = {\r\n      from: dateTimeForTimeZone(timeZone, from),\r\n      to: dateTimeForTimeZone(timeZone, to),\r\n    };\r\n\r\n    onChangeTime(nextTimeRange);\r\n  };\r\n\r\n  render() {\r\n    const { range, timeZone, splitted, syncedTimes, onChangeTimeSync, hideText } = this.props;\r\n    const timeSyncButton = splitted ? <TimeSyncButton onClick={onChangeTimeSync} isSynced={syncedTimes} /> : undefined;\r\n    const timePickerCommonProps = {\r\n      value: range,\r\n      timeZone,\r\n      onMoveBackward: this.onMoveBack,\r\n      onMoveForward: this.onMoveForward,\r\n      onZoom: this.onZoom,\r\n      hideText,\r\n    };\r\n\r\n    return (\r\n      <TimePickerWithHistory\r\n        {...timePickerCommonProps}\r\n        timeSyncButton={timeSyncButton}\r\n        isSynced={syncedTimes}\r\n        onChange={this.onChangeTimePicker}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import omitBy from 'lodash/omitBy';\r\nimport React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { hot } from 'react-hot-loader';\r\nimport memoizeOne from 'memoize-one';\r\nimport classNames from 'classnames';\r\nimport { css } from 'emotion';\r\n\r\nimport { ExploreId, ExploreItemState, ExploreMode } from 'app/types/explore';\r\nimport { ToggleButtonGroup, ToggleButton, Tooltip, ButtonSelect, SetInterval } from '@grafana/ui';\r\nimport { RawTimeRange, TimeZone, TimeRange, DataQuery } from '@grafana/data';\r\nimport { DataSourcePicker } from 'app/core/components/Select/DataSourcePicker';\r\nimport { StoreState } from 'app/types/store';\r\nimport {\r\n  changeDatasource,\r\n  clearQueries,\r\n  splitClose,\r\n  runQueries,\r\n  splitOpen,\r\n  syncTimes,\r\n  changeRefreshInterval,\r\n  changeMode,\r\n} from './state/actions';\r\nimport { updateLocation } from 'app/core/actions';\r\nimport { getTimeZone } from '../profile/state/selectors';\r\nimport { getDashboardSrv } from '../dashboard/services/DashboardSrv';\r\nimport kbn from '../../core/utils/kbn';\r\nimport { ExploreTimeControls } from './ExploreTimeControls';\r\nimport { LiveTailButton } from './LiveTailButton';\r\nimport { ResponsiveButton } from './ResponsiveButton';\r\nimport { RunButton } from './RunButton';\r\nimport { LiveTailControls } from './useLiveTailControls';\r\nimport { getExploreDatasources } from './state/selectors';\r\nimport { setDashboardQueriesToUpdateOnLoad } from '../dashboard/state/actions';\r\n\r\nconst getStyles = memoizeOne(() => {\r\n  return {\r\n    liveTailButtons: css`\r\n      margin-left: 10px;\r\n      @media (max-width: 1110px) {\r\n        margin-left: 4px;\r\n      }\r\n    `,\r\n  };\r\n});\r\n\r\ninterface OwnProps {\r\n  exploreId: ExploreId;\r\n  onChangeTime: (range: RawTimeRange, changedByScanner?: boolean) => void;\r\n}\r\n\r\ninterface StateProps {\r\n  datasourceMissing: boolean;\r\n  loading: boolean;\r\n  range: TimeRange;\r\n  timeZone: TimeZone;\r\n  splitted: boolean;\r\n  syncedTimes: boolean;\r\n  refreshInterval?: string;\r\n  supportedModes: ExploreMode[];\r\n  selectedMode: ExploreMode;\r\n  hasLiveOption: boolean;\r\n  isLive: boolean;\r\n  isPaused: boolean;\r\n  originPanelId?: number;\r\n  queries: DataQuery[];\r\n  datasourceLoading?: boolean;\r\n  containerWidth: number;\r\n  datasourceName?: string;\r\n}\r\n\r\ninterface DispatchProps {\r\n  changeDatasource: typeof changeDatasource;\r\n  clearAll: typeof clearQueries;\r\n  runQueries: typeof runQueries;\r\n  closeSplit: typeof splitClose;\r\n  split: typeof splitOpen;\r\n  syncTimes: typeof syncTimes;\r\n  changeRefreshInterval: typeof changeRefreshInterval;\r\n  changeMode: typeof changeMode;\r\n  updateLocation: typeof updateLocation;\r\n  setDashboardQueriesToUpdateOnLoad: typeof setDashboardQueriesToUpdateOnLoad;\r\n}\r\n\r\ntype Props = StateProps & DispatchProps & OwnProps;\r\n\r\nexport class UnConnectedExploreToolbar extends PureComponent<Props> {\r\n  onChangeDatasource = async (option: { value: any }) => {\r\n    this.props.changeDatasource(this.props.exploreId, option.value);\r\n  };\r\n\r\n  onClearAll = () => {\r\n    this.props.clearAll(this.props.exploreId);\r\n  };\r\n\r\n  onRunQuery = () => {\r\n    return this.props.runQueries(this.props.exploreId);\r\n  };\r\n\r\n  onChangeRefreshInterval = (item: string) => {\r\n    const { changeRefreshInterval, exploreId } = this.props;\r\n    changeRefreshInterval(exploreId, item);\r\n  };\r\n\r\n  onModeChange = (mode: ExploreMode) => {\r\n    const { changeMode, exploreId } = this.props;\r\n    changeMode(exploreId, mode);\r\n  };\r\n\r\n  onChangeTimeSync = () => {\r\n    const { syncTimes, exploreId } = this.props;\r\n    syncTimes(exploreId);\r\n  };\r\n\r\n  returnToPanel = async ({ withChanges = false } = {}) => {\r\n    const { originPanelId, queries } = this.props;\r\n\r\n    const dashboardSrv = getDashboardSrv();\r\n    const dash = dashboardSrv.getCurrent();\r\n    const titleSlug = kbn.slugifyForUrl(dash.title);\r\n\r\n    if (withChanges) {\r\n      this.props.setDashboardQueriesToUpdateOnLoad(originPanelId, this.cleanQueries(queries));\r\n    }\r\n\r\n    const dashViewOptions = {\r\n      fullscreen: withChanges || dash.meta.fullscreen,\r\n      edit: withChanges || dash.meta.isEditing,\r\n    };\r\n\r\n    this.props.updateLocation({\r\n      path: `/d/${dash.uid}/:${titleSlug}`,\r\n      query: {\r\n        ...omitBy(dashViewOptions, v => !v),\r\n        panelId: originPanelId,\r\n      },\r\n    });\r\n  };\r\n\r\n  // Remove explore specific parameters from queries\r\n  private cleanQueries(queries: DataQuery[]) {\r\n    return queries.map((query: DataQuery & { context?: string }) => {\r\n      delete query.context;\r\n      delete query.key;\r\n      return query;\r\n    });\r\n  }\r\n\r\n  getSelectedDatasource = () => {\r\n    const { datasourceName } = this.props;\r\n    const exploreDatasources = getExploreDatasources();\r\n    return datasourceName ? exploreDatasources.find(datasource => datasource.name === datasourceName) : undefined;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      datasourceMissing,\r\n      closeSplit,\r\n      exploreId,\r\n      loading,\r\n      range,\r\n      timeZone,\r\n      splitted,\r\n      syncedTimes,\r\n      refreshInterval,\r\n      onChangeTime,\r\n      split,\r\n      supportedModes,\r\n      selectedMode,\r\n      hasLiveOption,\r\n      isLive,\r\n      isPaused,\r\n      originPanelId,\r\n      datasourceLoading,\r\n      containerWidth,\r\n    } = this.props;\r\n\r\n    const styles = getStyles();\r\n    const originDashboardIsEditable = originPanelId && Number.isInteger(originPanelId);\r\n    const panelReturnClasses = classNames('btn', 'navbar-button', {\r\n      'btn--radius-right-0': originDashboardIsEditable,\r\n      'navbar-button navbar-button--border-right-0': originDashboardIsEditable,\r\n    });\r\n\r\n    const showSmallDataSourcePicker = (splitted ? containerWidth < 700 : containerWidth < 800) || false;\r\n    const showSmallTimePicker = splitted || containerWidth < 1210;\r\n\r\n    return (\r\n      <div className={splitted ? 'explore-toolbar splitted' : 'explore-toolbar'}>\r\n        <div className=\"explore-toolbar-item\">\r\n          <div className=\"explore-toolbar-header\">\r\n            <div className=\"explore-toolbar-header-title\">\r\n              {exploreId === 'left' && (\r\n                <span className=\"navbar-page-btn\">\r\n                  <i className=\"gicon gicon-explore\" />\r\n                  Explore\r\n                </span>\r\n              )}\r\n            </div>\r\n            {splitted && (\r\n              <a className=\"explore-toolbar-header-close\" onClick={() => closeSplit(exploreId)}>\r\n                <i className=\"fa fa-times fa-fw\" />\r\n              </a>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"explore-toolbar-item\">\r\n          <div className=\"explore-toolbar-content\">\r\n            {!datasourceMissing ? (\r\n              <div className=\"explore-toolbar-content-item\">\r\n                <div\r\n                  className={classNames(\r\n                    'explore-ds-picker',\r\n                    showSmallDataSourcePicker ? 'explore-ds-picker--small' : ''\r\n                  )}\r\n                >\r\n                  <DataSourcePicker\r\n                    onChange={this.onChangeDatasource}\r\n                    datasources={getExploreDatasources()}\r\n                    current={this.getSelectedDatasource()}\r\n                    showLoading={datasourceLoading}\r\n                    hideTextValue={showSmallDataSourcePicker}\r\n                  />\r\n                </div>\r\n                {supportedModes.length > 1 ? (\r\n                  <div className=\"query-type-toggle\">\r\n                    <ToggleButtonGroup label=\"\" transparent={true}>\r\n                      <ToggleButton\r\n                        key={ExploreMode.Metrics}\r\n                        value={ExploreMode.Metrics}\r\n                        onChange={this.onModeChange}\r\n                        selected={selectedMode === ExploreMode.Metrics}\r\n                      >\r\n                        {'Metrics'}\r\n                      </ToggleButton>\r\n                      <ToggleButton\r\n                        key={ExploreMode.Logs}\r\n                        value={ExploreMode.Logs}\r\n                        onChange={this.onModeChange}\r\n                        selected={selectedMode === ExploreMode.Logs}\r\n                      >\r\n                        {'Logs'}\r\n                      </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                  </div>\r\n                ) : null}\r\n              </div>\r\n            ) : null}\r\n\r\n            {originPanelId && Number.isInteger(originPanelId) && !splitted && (\r\n              <div className=\"explore-toolbar-content-item\">\r\n                <Tooltip content={'Return to panel'} placement=\"bottom\">\r\n                  <button className={panelReturnClasses} onClick={() => this.returnToPanel()}>\r\n                    <i className=\"fa fa-arrow-left\" />\r\n                  </button>\r\n                </Tooltip>\r\n                {originDashboardIsEditable && (\r\n                  <ButtonSelect\r\n                    className=\"navbar-button--attached btn--radius-left-0$\"\r\n                    options={[{ label: 'Return to panel with changes', value: '' }]}\r\n                    onChange={() => this.returnToPanel({ withChanges: true })}\r\n                    maxMenuHeight={380}\r\n                  />\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            {exploreId === 'left' && !splitted ? (\r\n              <div className=\"explore-toolbar-content-item explore-icon-align\">\r\n                <ResponsiveButton\r\n                  splitted={splitted}\r\n                  title=\"Split\"\r\n                  onClick={split}\r\n                  iconClassName=\"fa fa-fw fa-columns icon-margin-right\"\r\n                  disabled={isLive}\r\n                />\r\n              </div>\r\n            ) : null}\r\n            {!isLive && (\r\n              <div className=\"explore-toolbar-content-item\">\r\n                <ExploreTimeControls\r\n                  exploreId={exploreId}\r\n                  range={range}\r\n                  timeZone={timeZone}\r\n                  onChangeTime={onChangeTime}\r\n                  splitted={splitted}\r\n                  syncedTimes={syncedTimes}\r\n                  onChangeTimeSync={this.onChangeTimeSync}\r\n                  hideText={showSmallTimePicker}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            {!isLive && (\r\n              <div className=\"explore-toolbar-content-item explore-icon-align\">\r\n                <ResponsiveButton\r\n                  splitted={splitted}\r\n                  title=\"Clear All\"\r\n                  onClick={this.onClearAll}\r\n                  iconClassName=\"fa fa-fw fa-trash icon-margin-right\"\r\n                />\r\n              </div>\r\n            )}\r\n            <div className=\"explore-toolbar-content-item\">\r\n              <RunButton\r\n                refreshInterval={refreshInterval}\r\n                onChangeRefreshInterval={this.onChangeRefreshInterval}\r\n                splitted={splitted}\r\n                loading={loading || (isLive && !isPaused)}\r\n                onRun={this.onRunQuery}\r\n                showDropdown={!isLive}\r\n              />\r\n              {refreshInterval && <SetInterval func={this.onRunQuery} interval={refreshInterval} loading={loading} />}\r\n            </div>\r\n\r\n            {hasLiveOption && (\r\n              <div className={`explore-toolbar-content-item ${styles.liveTailButtons}`}>\r\n                <LiveTailControls exploreId={exploreId}>\r\n                  {controls => (\r\n                    <LiveTailButton\r\n                      splitted={splitted}\r\n                      isLive={isLive}\r\n                      isPaused={isPaused}\r\n                      start={controls.start}\r\n                      pause={controls.pause}\r\n                      resume={controls.resume}\r\n                      stop={controls.stop}\r\n                    />\r\n                  )}\r\n                </LiveTailControls>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState, { exploreId }: OwnProps): StateProps => {\r\n  const splitted = state.explore.split;\r\n  const syncedTimes = state.explore.syncedTimes;\r\n  const exploreItem: ExploreItemState = state.explore[exploreId];\r\n  const {\r\n    datasourceInstance,\r\n    datasourceMissing,\r\n    range,\r\n    refreshInterval,\r\n    loading,\r\n    supportedModes,\r\n    mode,\r\n    isLive,\r\n    isPaused,\r\n    originPanelId,\r\n    queries,\r\n    datasourceLoading,\r\n    containerWidth,\r\n  } = exploreItem;\r\n\r\n  const hasLiveOption = datasourceInstance?.meta?.streaming && mode === ExploreMode.Logs;\r\n\r\n  return {\r\n    datasourceMissing,\r\n    datasourceName: datasourceInstance?.name,\r\n    loading,\r\n    range,\r\n    timeZone: getTimeZone(state.user),\r\n    splitted,\r\n    refreshInterval,\r\n    supportedModes,\r\n    selectedMode: supportedModes.includes(mode) ? mode : supportedModes[0],\r\n    hasLiveOption,\r\n    isLive,\r\n    isPaused,\r\n    originPanelId,\r\n    queries,\r\n    syncedTimes,\r\n    datasourceLoading,\r\n    containerWidth,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps: DispatchProps = {\r\n  changeDatasource,\r\n  updateLocation,\r\n  changeRefreshInterval,\r\n  clearAll: clearQueries,\r\n  runQueries,\r\n  closeSplit: splitClose,\r\n  split: splitOpen,\r\n  syncTimes,\r\n  changeMode: changeMode,\r\n  setDashboardQueriesToUpdateOnLoad,\r\n};\r\n\r\nexport const ExploreToolbar = hot(module)(connect(mapStateToProps, mapDispatchToProps)(UnConnectedExploreToolbar));\r\n","import React, { PureComponent } from 'react';\r\nimport { css, cx } from 'emotion';\r\nimport tinycolor from 'tinycolor2';\r\n\r\nimport { Themeable, withTheme, getLogRowStyles } from '@grafana/ui';\r\nimport { GrafanaTheme, LogRowModel, TimeZone } from '@grafana/data';\r\n\r\nimport ElapsedTime from './ElapsedTime';\r\n\r\nconst getStyles = (theme: GrafanaTheme) => ({\r\n  logsRowsLive: css`\r\n    label: logs-rows-live;\r\n    font-family: ${theme.typography.fontFamily.monospace};\r\n    font-size: ${theme.typography.size.sm};\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    height: 65vh;\r\n    overflow-y: auto;\r\n    :first-child {\r\n      margin-top: auto !important;\r\n    }\r\n  `,\r\n  logsRowFade: css`\r\n    label: logs-row-fresh;\r\n    color: ${theme.colors.text};\r\n    background-color: ${tinycolor(theme.colors.blueLight)\r\n      .setAlpha(0.25)\r\n      .toString()};\r\n    animation: fade 1s ease-out 1s 1 normal forwards;\r\n    @keyframes fade {\r\n      from {\r\n        background-color: ${tinycolor(theme.colors.blueLight)\r\n          .setAlpha(0.25)\r\n          .toString()};\r\n      }\r\n      to {\r\n        background-color: transparent;\r\n      }\r\n    }\r\n  `,\r\n  logsRowsIndicator: css`\r\n    font-size: ${theme.typography.size.md};\r\n    padding-top: ${theme.spacing.sm};\r\n    display: flex;\r\n    align-items: center;\r\n  `,\r\n  button: css`\r\n    margin-right: ${theme.spacing.sm};\r\n  `,\r\n  fullWidth: css`\r\n    width: 100%;\r\n  `,\r\n});\r\n\r\nexport interface Props extends Themeable {\r\n  logRows?: LogRowModel[];\r\n  timeZone: TimeZone;\r\n  stopLive: () => void;\r\n  onPause: () => void;\r\n  onResume: () => void;\r\n  isPaused: boolean;\r\n}\r\n\r\ninterface State {\r\n  logRowsToRender?: LogRowModel[];\r\n}\r\n\r\nclass LiveLogs extends PureComponent<Props, State> {\r\n  private liveEndDiv: HTMLDivElement | null = null;\r\n  private scrollContainerRef = React.createRef<HTMLTableSectionElement>();\r\n  private lastScrollPos: number | null = null;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      logRowsToRender: props.logRows,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props) {\r\n    if (!prevProps.isPaused && this.props.isPaused) {\r\n      // So we paused the view and we changed the content size, but we want to keep the relative offset from the bottom.\r\n      if (this.lastScrollPos && this.scrollContainerRef.current) {\r\n        // There is last scroll pos from when user scrolled up a bit so go to that position.\r\n        const { clientHeight, scrollHeight } = this.scrollContainerRef.current;\r\n        const scrollTop = scrollHeight - (this.lastScrollPos + clientHeight);\r\n        this.scrollContainerRef.current.scrollTo(0, scrollTop);\r\n        this.lastScrollPos = null;\r\n      } else {\r\n        // We do not have any position to jump to su the assumption is user just clicked pause. We can just scroll\r\n        // to the bottom.\r\n        if (this.liveEndDiv) {\r\n          this.liveEndDiv.scrollIntoView(false);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps: Props, state: State) {\r\n    if (!nextProps.isPaused) {\r\n      return {\r\n        // We update what we show only if not paused. We keep any background subscriptions running and keep updating\r\n        // our state, but we do not show the updates, this allows us start again showing correct result after resuming\r\n        // without creating a gap in the log results.\r\n        logRowsToRender: nextProps.logRows,\r\n      };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle pausing when user scrolls up so that we stop resetting his position to the bottom when new row arrives.\r\n   * We do not need to throttle it here much, adding new rows should be throttled/buffered itself in the query epics\r\n   * and after you pause we remove the handler and add it after you manually resume, so this should not be fired often.\r\n   */\r\n  onScroll = (event: React.SyntheticEvent) => {\r\n    const { isPaused, onPause } = this.props;\r\n    const { scrollTop, clientHeight, scrollHeight } = event.currentTarget;\r\n    const distanceFromBottom = scrollHeight - (scrollTop + clientHeight);\r\n    if (distanceFromBottom >= 5 && !isPaused) {\r\n      onPause();\r\n      this.lastScrollPos = distanceFromBottom;\r\n    }\r\n  };\r\n\r\n  rowsToRender = () => {\r\n    const { isPaused } = this.props;\r\n    let { logRowsToRender: rowsToRender = [] } = this.state;\r\n    if (!isPaused) {\r\n      // A perf optimisation here. Show just 100 rows when streaming and full length when the streaming is paused.\r\n      rowsToRender = rowsToRender.slice(-100);\r\n    }\r\n    return rowsToRender;\r\n  };\r\n\r\n  render() {\r\n    const { theme, timeZone, onPause, onResume, isPaused } = this.props;\r\n    const styles = getStyles(theme);\r\n    const showUtc = timeZone === 'utc';\r\n    const { logsRow, logsRowLocalTime, logsRowMessage } = getLogRowStyles(theme);\r\n\r\n    return (\r\n      <div>\r\n        <table className={styles.fullWidth}>\r\n          <tbody\r\n            onScroll={isPaused ? undefined : this.onScroll}\r\n            className={cx(['logs-rows', styles.logsRowsLive])}\r\n            ref={this.scrollContainerRef}\r\n          >\r\n            {this.rowsToRender().map((row: LogRowModel) => {\r\n              return (\r\n                <tr className={cx(logsRow, styles.logsRowFade)} key={row.uid}>\r\n                  {showUtc && (\r\n                    <td className={cx(logsRowLocalTime)} title={`Local: ${row.timeLocal} (${row.timeFromNow})`}>\r\n                      {row.timeUtc}\r\n                    </td>\r\n                  )}\r\n                  {!showUtc && (\r\n                    <td className={cx(logsRowLocalTime)} title={`${row.timeUtc} (${row.timeFromNow})`}>\r\n                      {row.timeLocal}\r\n                    </td>\r\n                  )}\r\n                  <td className={cx(logsRowMessage)}>{row.entry}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n            <tr\r\n              ref={element => {\r\n                this.liveEndDiv = element;\r\n                // This is triggered on every update so on every new row. It keeps the view scrolled at the bottom by\r\n                // default.\r\n                if (this.liveEndDiv && !isPaused) {\r\n                  this.liveEndDiv.scrollIntoView(false);\r\n                }\r\n              }}\r\n            />\r\n          </tbody>\r\n        </table>\r\n        <div className={cx([styles.logsRowsIndicator])}>\r\n          <button onClick={isPaused ? onResume : onPause} className={cx('btn btn-secondary', styles.button)}>\r\n            <i className={cx('fa', isPaused ? 'fa-play' : 'fa-pause')} />\r\n            &nbsp;\r\n            {isPaused ? 'Resume' : 'Pause'}\r\n          </button>\r\n          <button onClick={this.props.stopLive} className={cx('btn btn-inverse', styles.button)}>\r\n            <i className={'fa fa-stop'} />\r\n            &nbsp; Exit live mode\r\n          </button>\r\n          {isPaused || (\r\n            <span>\r\n              Last line received: <ElapsedTime resetKey={this.props.logRows} humanize={true} /> ago\r\n            </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport const LiveLogsWithTheme = withTheme(LiveLogs);\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport tinycolor from 'tinycolor2';\r\nimport { css } from 'emotion';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { useTheme, Tooltip, stylesFactory, selectThemeVariant } from '@grafana/ui';\r\nimport { GrafanaTheme } from '@grafana/data';\r\n\r\n//Components\r\nimport { ResponsiveButton } from './ResponsiveButton';\r\n\r\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\r\n  const bgColor = selectThemeVariant({ light: theme.colors.gray5, dark: theme.colors.dark1 }, theme.type);\r\n  const orangeLighter = tinycolor(theme.colors.orangeDark)\r\n    .lighten(10)\r\n    .toString();\r\n  const pulseTextColor = tinycolor(theme.colors.orangeDark)\r\n    .desaturate(90)\r\n    .toString();\r\n  return {\r\n    noRightBorderStyle: css`\r\n      label: noRightBorderStyle;\r\n      border-right: 0;\r\n    `,\r\n    liveButton: css`\r\n      label: liveButton;\r\n      margin: 0;\r\n    `,\r\n    isLive: css`\r\n      label: isLive;\r\n      border-color: ${theme.colors.orangeDark};\r\n      color: ${theme.colors.orangeDark};\r\n      background: transparent;\r\n      &:focus {\r\n        background: transparent;\r\n        border-color: ${theme.colors.orangeDark};\r\n        color: ${theme.colors.orangeDark};\r\n      }\r\n      &:hover {\r\n        background-color: ${bgColor};\r\n      }\r\n      &:active,\r\n      &:hover {\r\n        border-color: ${orangeLighter};\r\n        color: ${orangeLighter};\r\n      }\r\n    `,\r\n    isPaused: css`\r\n      label: isPaused;\r\n      border-color: ${theme.colors.orangeDark};\r\n      background: transparent;\r\n      animation: pulse 3s ease-out 0s infinite normal forwards;\r\n      &:focus {\r\n        background: transparent;\r\n        border-color: ${theme.colors.orangeDark};\r\n      }\r\n      &:hover {\r\n        background-color: ${bgColor};\r\n      }\r\n      &:active,\r\n      &:hover {\r\n        border-color: ${orangeLighter};\r\n      }\r\n      @keyframes pulse {\r\n        0% {\r\n          color: ${pulseTextColor};\r\n        }\r\n        50% {\r\n          color: ${theme.colors.orangeDark};\r\n        }\r\n        100% {\r\n          color: ${pulseTextColor};\r\n        }\r\n      }\r\n    `,\r\n    stopButtonEnter: css`\r\n      label: stopButtonEnter;\r\n      width: 0;\r\n      opacity: 0;\r\n      overflow: hidden;\r\n    `,\r\n    stopButtonEnterActive: css`\r\n      label: stopButtonEnterActive;\r\n      opacity: 1;\r\n      width: 32px;\r\n    `,\r\n    stopButtonExit: css`\r\n      label: stopButtonExit;\r\n      width: 32px;\r\n      opacity: 1;\r\n      overflow: hidden;\r\n    `,\r\n    stopButtonExitActive: css`\r\n      label: stopButtonExitActive;\r\n      opacity: 0;\r\n      width: 0;\r\n    `,\r\n  };\r\n});\r\n\r\nconst defaultLiveTooltip = () => {\r\n  return <>Live</>;\r\n};\r\n\r\ntype LiveTailButtonProps = {\r\n  splitted: boolean;\r\n  start: () => void;\r\n  stop: () => void;\r\n  pause: () => void;\r\n  resume: () => void;\r\n  isLive: boolean;\r\n  isPaused: boolean;\r\n};\r\nexport function LiveTailButton(props: LiveTailButtonProps) {\r\n  const { start, pause, resume, isLive, isPaused, stop, splitted } = props;\r\n  const theme = useTheme();\r\n  const styles = getStyles(theme);\r\n\r\n  const onClickMain = isLive ? (isPaused ? resume : pause) : start;\r\n\r\n  return (\r\n    <>\r\n      <Tooltip content={defaultLiveTooltip} placement=\"bottom\">\r\n        <ResponsiveButton\r\n          splitted={splitted}\r\n          buttonClassName={classNames('btn navbar-button', styles.liveButton, {\r\n            [`btn--radius-right-0 explore-active-button-glow ${styles.noRightBorderStyle}`]: isLive,\r\n            [styles.isLive]: isLive && !isPaused,\r\n            [styles.isPaused]: isLive && isPaused,\r\n          })}\r\n          iconClassName={classNames(\r\n            'fa',\r\n            isPaused || !isLive ? 'fa-play' : 'fa-pause',\r\n            isLive && 'icon-brand-gradient'\r\n          )}\r\n          onClick={onClickMain}\r\n          title={'\\xa0Live'}\r\n        />\r\n      </Tooltip>\r\n      <CSSTransition\r\n        mountOnEnter={true}\r\n        unmountOnExit={true}\r\n        timeout={500}\r\n        in={isLive}\r\n        classNames={{\r\n          enter: styles.stopButtonEnter,\r\n          enterActive: styles.stopButtonEnterActive,\r\n          exit: styles.stopButtonExit,\r\n          exitActive: styles.stopButtonExitActive,\r\n        }}\r\n      >\r\n        <div>\r\n          <button\r\n            className={`btn navbar-button navbar-button--attached explore-active-button-glow ${styles.isLive}`}\r\n            onClick={stop}\r\n          >\r\n            <i className={classNames('fa fa-stop icon-brand-gradient')} />\r\n          </button>\r\n        </div>\r\n      </CSSTransition>\r\n    </>\r\n  );\r\n}\r\n","import React, { PureComponent } from 'react';\r\n\r\nimport {\r\n  rangeUtil,\r\n  RawTimeRange,\r\n  LogLevel,\r\n  TimeZone,\r\n  AbsoluteTimeRange,\r\n  LogsMetaKind,\r\n  LogsDedupStrategy,\r\n  LogRowModel,\r\n  LogsDedupDescription,\r\n  LogsMetaItem,\r\n  GraphSeriesXY,\r\n  LinkModel,\r\n  Field,\r\n} from '@grafana/data';\r\nimport { Switch, LogLabels, ToggleButtonGroup, ToggleButton, LogRows } from '@grafana/ui';\r\nimport store from 'app/core/store';\r\n\r\nimport { ExploreGraphPanel } from './ExploreGraphPanel';\r\n\r\nconst SETTINGS_KEYS = {\r\n  showLabels: 'grafana.explore.logs.showLabels',\r\n  showTime: 'grafana.explore.logs.showTime',\r\n  wrapLogMessage: 'grafana.explore.logs.wrapLogMessage',\r\n};\r\n\r\nfunction renderMetaItem(value: any, kind: LogsMetaKind) {\r\n  if (kind === LogsMetaKind.LabelsMap) {\r\n    return (\r\n      <span className=\"logs-meta-item__labels\">\r\n        <LogLabels labels={value} />\r\n      </span>\r\n    );\r\n  }\r\n  return value;\r\n}\r\n\r\ninterface Props {\r\n  logRows?: LogRowModel[];\r\n  logsMeta?: LogsMetaItem[];\r\n  logsSeries?: GraphSeriesXY[];\r\n  dedupedRows?: LogRowModel[];\r\n\r\n  width: number;\r\n  highlighterExpressions?: string[];\r\n  loading: boolean;\r\n  absoluteRange: AbsoluteTimeRange;\r\n  timeZone: TimeZone;\r\n  scanning?: boolean;\r\n  scanRange?: RawTimeRange;\r\n  dedupStrategy: LogsDedupStrategy;\r\n  onChangeTime: (range: AbsoluteTimeRange) => void;\r\n  onClickFilterLabel?: (key: string, value: string) => void;\r\n  onClickFilterOutLabel?: (key: string, value: string) => void;\r\n  onStartScanning?: () => void;\r\n  onStopScanning?: () => void;\r\n  onDedupStrategyChange: (dedupStrategy: LogsDedupStrategy) => void;\r\n  onToggleLogLevel: (hiddenLogLevels: LogLevel[]) => void;\r\n  getRowContext?: (row: LogRowModel, options?: any) => Promise<any>;\r\n  getFieldLinks: (field: Field, rowIndex: number) => Array<LinkModel<Field>>;\r\n}\r\n\r\ninterface State {\r\n  showLabels: boolean;\r\n  showTime: boolean;\r\n  wrapLogMessage: boolean;\r\n}\r\n\r\nexport class Logs extends PureComponent<Props, State> {\r\n  state = {\r\n    showLabels: store.getBool(SETTINGS_KEYS.showLabels, false),\r\n    showTime: store.getBool(SETTINGS_KEYS.showTime, true),\r\n    wrapLogMessage: store.getBool(SETTINGS_KEYS.wrapLogMessage, true),\r\n  };\r\n\r\n  onChangeDedup = (dedup: LogsDedupStrategy) => {\r\n    const { onDedupStrategyChange } = this.props;\r\n    if (this.props.dedupStrategy === dedup) {\r\n      return onDedupStrategyChange(LogsDedupStrategy.none);\r\n    }\r\n    return onDedupStrategyChange(dedup);\r\n  };\r\n\r\n  onChangeLabels = (event?: React.SyntheticEvent) => {\r\n    const target = event && (event.target as HTMLInputElement);\r\n    if (target) {\r\n      const showLabels = target.checked;\r\n      this.setState({\r\n        showLabels,\r\n      });\r\n      store.set(SETTINGS_KEYS.showLabels, showLabels);\r\n    }\r\n  };\r\n\r\n  onChangeTime = (event?: React.SyntheticEvent) => {\r\n    const target = event && (event.target as HTMLInputElement);\r\n    if (target) {\r\n      const showTime = target.checked;\r\n      this.setState({\r\n        showTime,\r\n      });\r\n      store.set(SETTINGS_KEYS.showTime, showTime);\r\n    }\r\n  };\r\n\r\n  onChangewrapLogMessage = (event?: React.SyntheticEvent) => {\r\n    const target = event && (event.target as HTMLInputElement);\r\n    if (target) {\r\n      const wrapLogMessage = target.checked;\r\n      this.setState({\r\n        wrapLogMessage,\r\n      });\r\n      store.set(SETTINGS_KEYS.wrapLogMessage, wrapLogMessage);\r\n    }\r\n  };\r\n\r\n  onToggleLogLevel = (hiddenRawLevels: string[]) => {\r\n    const hiddenLogLevels: LogLevel[] = hiddenRawLevels.map(level => LogLevel[level as LogLevel]);\r\n    this.props.onToggleLogLevel(hiddenLogLevels);\r\n  };\r\n\r\n  onClickScan = (event: React.SyntheticEvent) => {\r\n    event.preventDefault();\r\n    if (this.props.onStartScanning) {\r\n      this.props.onStartScanning();\r\n    }\r\n  };\r\n\r\n  onClickStopScan = (event: React.SyntheticEvent) => {\r\n    event.preventDefault();\r\n    if (this.props.onStopScanning) {\r\n      this.props.onStopScanning();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      logRows,\r\n      logsMeta,\r\n      logsSeries,\r\n      highlighterExpressions,\r\n      loading = false,\r\n      onClickFilterLabel,\r\n      onClickFilterOutLabel,\r\n      timeZone,\r\n      scanning,\r\n      scanRange,\r\n      width,\r\n      dedupedRows,\r\n      absoluteRange,\r\n      onChangeTime,\r\n      getFieldLinks,\r\n    } = this.props;\r\n\r\n    if (!logRows) {\r\n      return null;\r\n    }\r\n\r\n    const { showLabels, showTime, wrapLogMessage } = this.state;\r\n    const { dedupStrategy } = this.props;\r\n    const hasData = logRows && logRows.length > 0;\r\n    const dedupCount = dedupedRows\r\n      ? dedupedRows.reduce((sum, row) => (row.duplicates ? sum + row.duplicates : sum), 0)\r\n      : 0;\r\n    const meta = logsMeta ? [...logsMeta] : [];\r\n\r\n    if (dedupStrategy !== LogsDedupStrategy.none) {\r\n      meta.push({\r\n        label: 'Dedup count',\r\n        value: dedupCount,\r\n        kind: LogsMetaKind.Number,\r\n      });\r\n    }\r\n\r\n    const scanText = scanRange ? `Scanning ${rangeUtil.describeTimeRange(scanRange)}` : 'Scanning...';\r\n    const series = logsSeries ? logsSeries : [];\r\n\r\n    return (\r\n      <div className=\"logs-panel\">\r\n        <div className=\"logs-panel-graph\">\r\n          <ExploreGraphPanel\r\n            series={series}\r\n            width={width}\r\n            onHiddenSeriesChanged={this.onToggleLogLevel}\r\n            loading={loading}\r\n            absoluteRange={absoluteRange}\r\n            isStacked={true}\r\n            showPanel={false}\r\n            showingGraph={true}\r\n            showingTable={true}\r\n            timeZone={timeZone}\r\n            showBars={true}\r\n            showLines={false}\r\n            onUpdateTimeRange={onChangeTime}\r\n          />\r\n        </div>\r\n        <div className=\"logs-panel-options\">\r\n          <div className=\"logs-panel-controls\">\r\n            <Switch label=\"Time\" checked={showTime} onChange={this.onChangeTime} transparent />\r\n            <Switch label=\"Unique labels\" checked={showLabels} onChange={this.onChangeLabels} transparent />\r\n            <Switch label=\"Wrap lines\" checked={wrapLogMessage} onChange={this.onChangewrapLogMessage} transparent />\r\n            <ToggleButtonGroup label=\"Dedup\" transparent={true}>\r\n              {Object.keys(LogsDedupStrategy).map((dedupType: string, i) => (\r\n                <ToggleButton\r\n                  key={i}\r\n                  value={dedupType}\r\n                  onChange={this.onChangeDedup}\r\n                  selected={dedupStrategy === dedupType}\r\n                  // @ts-ignore\r\n                  tooltip={LogsDedupDescription[dedupType]}\r\n                >\r\n                  {dedupType}\r\n                </ToggleButton>\r\n              ))}\r\n            </ToggleButtonGroup>\r\n          </div>\r\n        </div>\r\n\r\n        {hasData && meta && (\r\n          <div className=\"logs-panel-meta\">\r\n            {meta.map(item => (\r\n              <div className=\"logs-panel-meta__item\" key={item.label}>\r\n                <span className=\"logs-panel-meta__label\">{item.label}:</span>\r\n                <span className=\"logs-panel-meta__value\">{renderMetaItem(item.value, item.kind)}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        <LogRows\r\n          logRows={logRows}\r\n          deduplicatedRows={dedupedRows}\r\n          dedupStrategy={dedupStrategy}\r\n          getRowContext={this.props.getRowContext}\r\n          highlighterExpressions={highlighterExpressions}\r\n          rowLimit={logRows ? logRows.length : undefined}\r\n          onClickFilterLabel={onClickFilterLabel}\r\n          onClickFilterOutLabel={onClickFilterOutLabel}\r\n          showLabels={showLabels}\r\n          showTime={showTime}\r\n          wrapLogMessage={wrapLogMessage}\r\n          timeZone={timeZone}\r\n          getFieldLinks={getFieldLinks}\r\n        />\r\n\r\n        {!loading && !hasData && !scanning && (\r\n          <div className=\"logs-panel-nodata\">\r\n            No logs found.\r\n            <a className=\"link\" onClick={this.onClickScan}>\r\n              Scan for older logs\r\n            </a>\r\n          </div>\r\n        )}\r\n\r\n        {scanning && (\r\n          <div className=\"logs-panel-nodata\">\r\n            <span>{scanText}</span>\r\n            <a className=\"link\" onClick={this.onClickStopScan}>\r\n              Stop scan\r\n            </a>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\nimport { Collapse } from '@grafana/ui';\r\n\r\nimport {\r\n  DataSourceApi,\r\n  RawTimeRange,\r\n  LogLevel,\r\n  TimeZone,\r\n  AbsoluteTimeRange,\r\n  LogRowModel,\r\n  LogsDedupStrategy,\r\n  TimeRange,\r\n  LogsMetaItem,\r\n  GraphSeriesXY,\r\n} from '@grafana/data';\r\n\r\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\r\nimport { StoreState } from 'app/types';\r\n\r\nimport { changeDedupStrategy, updateTimeRange } from './state/actions';\r\nimport { toggleLogLevelAction } from 'app/features/explore/state/actionTypes';\r\nimport { deduplicatedRowsSelector } from 'app/features/explore/state/selectors';\r\nimport { getTimeZone } from '../profile/state/selectors';\r\nimport { LiveLogsWithTheme } from './LiveLogs';\r\nimport { Logs } from './Logs';\r\nimport { LogsCrossFadeTransition } from './utils/LogsCrossFadeTransition';\r\nimport { LiveTailControls } from './useLiveTailControls';\r\nimport { getLinksFromLogsField } from '../panel/panellinks/linkSuppliers';\r\n\r\ninterface LogsContainerProps {\r\n  datasourceInstance?: DataSourceApi;\r\n  exploreId: ExploreId;\r\n  loading: boolean;\r\n\r\n  logsHighlighterExpressions?: string[];\r\n  logRows?: LogRowModel[];\r\n  logsMeta?: LogsMetaItem[];\r\n  logsSeries?: GraphSeriesXY[];\r\n  dedupedRows?: LogRowModel[];\r\n\r\n  onClickFilterLabel?: (key: string, value: string) => void;\r\n  onClickFilterOutLabel?: (key: string, value: string) => void;\r\n  onStartScanning: () => void;\r\n  onStopScanning: () => void;\r\n  timeZone: TimeZone;\r\n  scanning?: boolean;\r\n  scanRange?: RawTimeRange;\r\n  toggleLogLevelAction: typeof toggleLogLevelAction;\r\n  changeDedupStrategy: typeof changeDedupStrategy;\r\n  dedupStrategy: LogsDedupStrategy;\r\n  width: number;\r\n  isLive: boolean;\r\n  updateTimeRange: typeof updateTimeRange;\r\n  range: TimeRange;\r\n  syncedTimes: boolean;\r\n  absoluteRange: AbsoluteTimeRange;\r\n  isPaused: boolean;\r\n}\r\n\r\nexport class LogsContainer extends PureComponent<LogsContainerProps> {\r\n  onChangeTime = (absoluteRange: AbsoluteTimeRange) => {\r\n    const { exploreId, updateTimeRange } = this.props;\r\n    updateTimeRange({ exploreId, absoluteRange });\r\n  };\r\n\r\n  handleDedupStrategyChange = (dedupStrategy: LogsDedupStrategy) => {\r\n    this.props.changeDedupStrategy(this.props.exploreId, dedupStrategy);\r\n  };\r\n\r\n  handleToggleLogLevel = (hiddenLogLevels: LogLevel[]) => {\r\n    const { exploreId } = this.props;\r\n    this.props.toggleLogLevelAction({\r\n      exploreId,\r\n      hiddenLogLevels,\r\n    });\r\n  };\r\n\r\n  getLogRowContext = async (row: LogRowModel, options?: any): Promise<any> => {\r\n    const { datasourceInstance } = this.props;\r\n\r\n    if (datasourceInstance?.getLogRowContext) {\r\n      return datasourceInstance.getLogRowContext(row, options);\r\n    }\r\n\r\n    return [];\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      loading,\r\n      logsHighlighterExpressions,\r\n      logRows,\r\n      logsMeta,\r\n      logsSeries,\r\n      dedupedRows,\r\n      onClickFilterLabel,\r\n      onClickFilterOutLabel,\r\n      onStartScanning,\r\n      onStopScanning,\r\n      absoluteRange,\r\n      timeZone,\r\n      scanning,\r\n      range,\r\n      width,\r\n      isLive,\r\n      exploreId,\r\n    } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <LogsCrossFadeTransition visible={isLive}>\r\n          <Collapse label=\"Logs\" loading={false} isOpen>\r\n            <LiveTailControls exploreId={exploreId}>\r\n              {controls => (\r\n                <LiveLogsWithTheme\r\n                  logRows={logRows}\r\n                  timeZone={timeZone}\r\n                  stopLive={controls.stop}\r\n                  isPaused={this.props.isPaused}\r\n                  onPause={controls.pause}\r\n                  onResume={controls.resume}\r\n                />\r\n              )}\r\n            </LiveTailControls>\r\n          </Collapse>\r\n        </LogsCrossFadeTransition>\r\n        <LogsCrossFadeTransition visible={!isLive}>\r\n          <Collapse label=\"Logs\" loading={loading} isOpen>\r\n            <Logs\r\n              dedupStrategy={this.props.dedupStrategy || LogsDedupStrategy.none}\r\n              logRows={logRows}\r\n              logsMeta={logsMeta}\r\n              logsSeries={logsSeries}\r\n              dedupedRows={dedupedRows}\r\n              highlighterExpressions={logsHighlighterExpressions}\r\n              loading={loading}\r\n              onChangeTime={this.onChangeTime}\r\n              onClickFilterLabel={onClickFilterLabel}\r\n              onClickFilterOutLabel={onClickFilterOutLabel}\r\n              onStartScanning={onStartScanning}\r\n              onStopScanning={onStopScanning}\r\n              onDedupStrategyChange={this.handleDedupStrategyChange}\r\n              onToggleLogLevel={this.handleToggleLogLevel}\r\n              absoluteRange={absoluteRange}\r\n              timeZone={timeZone}\r\n              scanning={scanning}\r\n              scanRange={range.raw}\r\n              width={width}\r\n              getRowContext={this.getLogRowContext}\r\n              getFieldLinks={getLinksFromLogsField}\r\n            />\r\n          </Collapse>\r\n        </LogsCrossFadeTransition>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState, { exploreId }: { exploreId: string }) {\r\n  const explore = state.explore;\r\n  // @ts-ignore\r\n  const item: ExploreItemState = explore[exploreId];\r\n  const {\r\n    logsHighlighterExpressions,\r\n    logsResult,\r\n    loading,\r\n    scanning,\r\n    datasourceInstance,\r\n    isLive,\r\n    isPaused,\r\n    range,\r\n    absoluteRange,\r\n    dedupStrategy,\r\n  } = item;\r\n  const dedupedRows = deduplicatedRowsSelector(item);\r\n  const timeZone = getTimeZone(state.user);\r\n\r\n  return {\r\n    loading,\r\n    logsHighlighterExpressions,\r\n    logRows: logsResult && logsResult.rows,\r\n    logsMeta: logsResult && logsResult.meta,\r\n    logsSeries: logsResult && logsResult.series,\r\n    scanning,\r\n    timeZone,\r\n    dedupStrategy,\r\n    dedupedRows,\r\n    datasourceInstance,\r\n    isLive,\r\n    isPaused,\r\n    range,\r\n    absoluteRange,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  changeDedupStrategy,\r\n  toggleLogLevelAction,\r\n  updateTimeRange,\r\n};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(LogsContainer));\r\n","import React, { useContext } from 'react';\r\nimport { css } from 'emotion';\r\nimport { ThemeContext, LinkButton, CallToActionCard } from '@grafana/ui';\r\n\r\nexport const NoDataSourceCallToAction = () => {\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const message =\r\n    'Explore requires at least one data source. Once you have added a data source, you can query it here.';\r\n  const footer = (\r\n    <>\r\n      <i className=\"fa fa-rocket\" />\r\n      <> ProTip: You can also define data sources through configuration files. </>\r\n      <a\r\n        href=\"http://docs.grafana.org/administration/provisioning/#datasources?utm_source=explore\"\r\n        target=\"_blank\"\r\n        rel=\"noopener\"\r\n        className=\"text-link\"\r\n      >\r\n        Learn more\r\n      </a>\r\n    </>\r\n  );\r\n\r\n  const ctaElement = (\r\n    <LinkButton size=\"lg\" href=\"/datasources/new\" icon=\"gicon gicon-datasources\">\r\n      Add data source\r\n    </LinkButton>\r\n  );\r\n\r\n  const cardClassName = css`\r\n    max-width: ${theme.breakpoints.lg};\r\n    margin-top: ${theme.spacing.md};\r\n    align-self: center;\r\n  `;\r\n\r\n  return (\r\n    <CallToActionCard\r\n      callToActionElement={ctaElement}\r\n      className={cardClassName}\r\n      footer={footer}\r\n      message={message}\r\n      theme={theme}\r\n    />\r\n  );\r\n};\r\n","// Libraries\r\nimport React, { PureComponent } from 'react';\r\n\r\n// Services\r\nimport { getAngularLoader, AngularComponent } from '@grafana/runtime';\r\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\r\n\r\n// Types\r\nimport { Emitter } from 'app/core/utils/emitter';\r\nimport { DataQuery } from '@grafana/data';\r\nimport { TimeRange } from '@grafana/data';\r\nimport 'app/features/plugins/plugin_loader';\r\nimport { dateTime } from '@grafana/data';\r\n\r\ninterface QueryEditorProps {\r\n  error?: any;\r\n  datasource: any;\r\n  onExecuteQuery?: () => void;\r\n  onQueryChange?: (value: DataQuery) => void;\r\n  initialQuery: DataQuery;\r\n  exploreEvents: Emitter;\r\n  range: TimeRange;\r\n  textEditModeEnabled?: boolean;\r\n}\r\n\r\nexport default class QueryEditor extends PureComponent<QueryEditorProps, any> {\r\n  element: any;\r\n  component: AngularComponent;\r\n  angularScope: any;\r\n\r\n  async componentDidMount() {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    const { datasource, initialQuery, exploreEvents, range } = this.props;\r\n    this.initTimeSrv(range);\r\n\r\n    const loader = getAngularLoader();\r\n    const template = '<plugin-component type=\"query-ctrl\"> </plugin-component>';\r\n    const target = { datasource: datasource.name, ...initialQuery };\r\n    const scopeProps = {\r\n      ctrl: {\r\n        datasource,\r\n        target,\r\n        refresh: () => {\r\n          setTimeout(() => {\r\n            this.props.onQueryChange?.(target);\r\n            this.props.onExecuteQuery?.();\r\n          }, 1);\r\n        },\r\n        onQueryChange: () => {\r\n          setTimeout(() => {\r\n            this.props.onQueryChange?.(target);\r\n          }, 1);\r\n        },\r\n        events: exploreEvents,\r\n        panel: { datasource, targets: [target] },\r\n        dashboard: {},\r\n      },\r\n    };\r\n\r\n    this.component = loader.load(this.element, scopeProps, template);\r\n    this.angularScope = scopeProps.ctrl;\r\n\r\n    setTimeout(() => {\r\n      this.props.onQueryChange?.(target);\r\n      this.props.onExecuteQuery?.();\r\n    }, 1);\r\n  }\r\n\r\n  componentDidUpdate(prevProps: QueryEditorProps) {\r\n    const hasToggledEditorMode = prevProps.textEditModeEnabled !== this.props.textEditModeEnabled;\r\n    const hasNewError = prevProps.error !== this.props.error;\r\n\r\n    if (this.component) {\r\n      if (hasToggledEditorMode && this.angularScope && this.angularScope.toggleEditorMode) {\r\n        this.angularScope.toggleEditorMode();\r\n      }\r\n\r\n      if (hasNewError || hasToggledEditorMode) {\r\n        // Some query controllers listen to data error events and need a digest\r\n        // for some reason this needs to be done in next tick\r\n        setTimeout(this.component.digest);\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.component) {\r\n      this.component.destroy();\r\n    }\r\n  }\r\n\r\n  initTimeSrv(range: TimeRange) {\r\n    const timeSrv = getTimeSrv();\r\n    timeSrv.init({\r\n      time: {\r\n        from: dateTime(range.from),\r\n        to: dateTime(range.to),\r\n      },\r\n      refresh: false,\r\n      getTimezone: () => 'utc',\r\n      timeRangeUpdated: () => console.log('refreshDashboard!'),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"gf-form-query\" ref={element => (this.element = element)} style={{ width: '100%' }} />;\r\n  }\r\n}\r\n","// Libraries\r\nimport React, { PureComponent } from 'react';\r\nimport debounce from 'lodash/debounce';\r\nimport has from 'lodash/has';\r\nimport { hot } from 'react-hot-loader';\r\n// @ts-ignore\r\nimport { connect } from 'react-redux';\r\n// Components\r\nimport QueryEditor from './QueryEditor';\r\nimport { QueryRowActions } from './QueryRowActions';\r\n// Actions\r\nimport { changeQuery, modifyQueries, runQueries } from './state/actions';\r\n// Types\r\nimport { StoreState } from 'app/types';\r\nimport {\r\n  DataQuery,\r\n  DataSourceApi,\r\n  PanelData,\r\n  HistoryItem,\r\n  TimeRange,\r\n  AbsoluteTimeRange,\r\n  LoadingState,\r\n} from '@grafana/data';\r\n\r\nimport { ExploreItemState, ExploreId, ExploreMode } from 'app/types/explore';\r\nimport { Emitter } from 'app/core/utils/emitter';\r\nimport { highlightLogsExpressionAction, removeQueryRowAction } from './state/actionTypes';\r\n\r\ninterface PropsFromParent {\r\n  exploreId: ExploreId;\r\n  index: number;\r\n  exploreEvents: Emitter;\r\n}\r\n\r\ninterface QueryRowProps extends PropsFromParent {\r\n  changeQuery: typeof changeQuery;\r\n  className?: string;\r\n  exploreId: ExploreId;\r\n  datasourceInstance: DataSourceApi;\r\n  highlightLogsExpressionAction: typeof highlightLogsExpressionAction;\r\n  history: HistoryItem[];\r\n  query: DataQuery;\r\n  modifyQueries: typeof modifyQueries;\r\n  range: TimeRange;\r\n  absoluteRange: AbsoluteTimeRange;\r\n  removeQueryRowAction: typeof removeQueryRowAction;\r\n  runQueries: typeof runQueries;\r\n  queryResponse: PanelData;\r\n  mode: ExploreMode;\r\n  latency: number;\r\n}\r\n\r\ninterface QueryRowState {\r\n  textEditModeEnabled: boolean;\r\n}\r\n\r\n// Empty function to override blur execution on query field\r\nconst noopOnBlur = () => {};\r\n\r\nexport class QueryRow extends PureComponent<QueryRowProps, QueryRowState> {\r\n  state: QueryRowState = {\r\n    textEditModeEnabled: false,\r\n  };\r\n\r\n  onRunQuery = () => {\r\n    const { exploreId } = this.props;\r\n    this.props.runQueries(exploreId);\r\n  };\r\n\r\n  onChange = (query: DataQuery, override?: boolean) => {\r\n    const { datasourceInstance, exploreId, index } = this.props;\r\n    this.props.changeQuery(exploreId, query, index, override);\r\n    if (query && !override && datasourceInstance.getHighlighterExpression && index === 0) {\r\n      // Live preview of log search matches. Only use on first row for now\r\n      this.updateLogsHighlights(query);\r\n    }\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    console.log('QueryRow will unmount');\r\n  }\r\n\r\n  onClickToggleDisabled = () => {\r\n    const { exploreId, index, query } = this.props;\r\n    const newQuery = {\r\n      ...query,\r\n      hide: !query.hide,\r\n    };\r\n    this.props.changeQuery(exploreId, newQuery, index, true);\r\n  };\r\n\r\n  onClickRemoveButton = () => {\r\n    const { exploreId, index } = this.props;\r\n    this.props.removeQueryRowAction({ exploreId, index });\r\n    this.props.runQueries(exploreId);\r\n  };\r\n\r\n  onClickToggleEditorMode = () => {\r\n    this.setState({ textEditModeEnabled: !this.state.textEditModeEnabled });\r\n  };\r\n\r\n  updateLogsHighlights = debounce((value: DataQuery) => {\r\n    const { datasourceInstance } = this.props;\r\n    if (datasourceInstance.getHighlighterExpression) {\r\n      const { exploreId } = this.props;\r\n      const expressions = datasourceInstance.getHighlighterExpression(value);\r\n      this.props.highlightLogsExpressionAction({ exploreId, expressions });\r\n    }\r\n  }, 500);\r\n\r\n  render() {\r\n    const {\r\n      datasourceInstance,\r\n      history,\r\n      query,\r\n      exploreEvents,\r\n      range,\r\n      absoluteRange,\r\n      queryResponse,\r\n      mode,\r\n      latency,\r\n    } = this.props;\r\n\r\n    const canToggleEditorModes =\r\n      mode === ExploreMode.Metrics && has(datasourceInstance, 'components.QueryCtrl.prototype.toggleEditorMode');\r\n    const isNotStarted = queryResponse.state === LoadingState.NotStarted;\r\n    const queryErrors = queryResponse.error && queryResponse.error.refId === query.refId ? [queryResponse.error] : [];\r\n    let QueryField;\r\n\r\n    if (mode === ExploreMode.Metrics && datasourceInstance.components?.ExploreMetricsQueryField) {\r\n      QueryField = datasourceInstance.components.ExploreMetricsQueryField;\r\n    } else if (mode === ExploreMode.Logs && datasourceInstance.components?.ExploreLogsQueryField) {\r\n      QueryField = datasourceInstance.components.ExploreLogsQueryField;\r\n    } else {\r\n      QueryField = datasourceInstance.components?.ExploreQueryField;\r\n    }\r\n\r\n    return (\r\n      <div className=\"query-row\">\r\n        <div className=\"query-row-field flex-shrink-1\">\r\n          {QueryField ? (\r\n            <QueryField\r\n              datasource={datasourceInstance}\r\n              query={query}\r\n              history={history}\r\n              onRunQuery={this.onRunQuery}\r\n              onBlur={noopOnBlur}\r\n              onChange={this.onChange}\r\n              data={queryResponse}\r\n              absoluteRange={absoluteRange}\r\n            />\r\n          ) : (\r\n            <QueryEditor\r\n              error={queryErrors}\r\n              datasource={datasourceInstance}\r\n              onQueryChange={this.onChange}\r\n              onExecuteQuery={this.onRunQuery}\r\n              initialQuery={query}\r\n              exploreEvents={exploreEvents}\r\n              range={range}\r\n              textEditModeEnabled={this.state.textEditModeEnabled}\r\n            />\r\n          )}\r\n        </div>\r\n        <QueryRowActions\r\n          canToggleEditorModes={canToggleEditorModes}\r\n          isDisabled={query.hide}\r\n          isNotStarted={isNotStarted}\r\n          latency={latency}\r\n          onClickToggleEditorMode={this.onClickToggleEditorMode}\r\n          onClickToggleDisabled={this.onClickToggleDisabled}\r\n          onClickRemoveButton={this.onClickRemoveButton}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState, { exploreId, index }: QueryRowProps) {\r\n  const explore = state.explore;\r\n  const item: ExploreItemState = explore[exploreId];\r\n  const { datasourceInstance, history, queries, range, absoluteRange, mode, queryResponse, latency } = item;\r\n  const query = queries[index];\r\n\r\n  return {\r\n    datasourceInstance,\r\n    history,\r\n    query,\r\n    range,\r\n    absoluteRange,\r\n    queryResponse,\r\n    mode,\r\n    latency,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  changeQuery,\r\n  highlightLogsExpressionAction,\r\n  modifyQueries,\r\n  removeQueryRowAction,\r\n  runQueries,\r\n};\r\n\r\nexport default hot(module)(\r\n  connect(mapStateToProps, mapDispatchToProps)(QueryRow) as React.ComponentType<PropsFromParent>\r\n);\r\n","import React from 'react';\r\n\r\nfunction formatLatency(value: number) {\r\n  return `${(value / 1000).toFixed(1)}s`;\r\n}\r\n\r\nexport type Props = {\r\n  canToggleEditorModes: boolean;\r\n  isDisabled?: boolean;\r\n  isNotStarted: boolean;\r\n  latency: number;\r\n  onClickToggleEditorMode: () => void;\r\n  onClickToggleDisabled: () => void;\r\n  onClickRemoveButton: () => void;\r\n};\r\n\r\nexport function QueryRowActions(props: Props) {\r\n  const {\r\n    canToggleEditorModes,\r\n    onClickToggleEditorMode,\r\n    onClickToggleDisabled,\r\n    onClickRemoveButton,\r\n    isDisabled,\r\n    isNotStarted,\r\n    latency,\r\n  } = props;\r\n\r\n  return (\r\n    <div className=\"gf-form-inline flex-shrink-0\">\r\n      {canToggleEditorModes && (\r\n        <div className=\"gf-form\">\r\n          <button\r\n            aria-label=\"Edit mode button\"\r\n            className=\"gf-form-label gf-form-label--btn\"\r\n            onClick={onClickToggleEditorMode}\r\n          >\r\n            <i className=\"fa fa-pencil\" />\r\n          </button>\r\n        </div>\r\n      )}\r\n      <div className=\"gf-form\">\r\n        <button disabled className=\"gf-form-label\" title=\"Query row latency\">\r\n          {formatLatency(latency)}\r\n        </button>\r\n      </div>\r\n      <div className=\"gf-form\">\r\n        <button\r\n          disabled={isNotStarted}\r\n          className=\"gf-form-label gf-form-label--btn\"\r\n          onClick={onClickToggleDisabled}\r\n          title=\"Disable/enable query\"\r\n        >\r\n          <i className={isDisabled ? 'fa fa-eye-slash' : 'fa fa-eye'} />\r\n        </button>\r\n      </div>\r\n      <div className=\"gf-form\">\r\n        <button className=\"gf-form-label gf-form-label--btn\" onClick={onClickRemoveButton} title=\"Remove query\">\r\n          <i className=\"fa fa-minus\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// Libraries\r\nimport React, { PureComponent } from 'react';\r\n\r\n// Components\r\nimport QueryRow from './QueryRow';\r\n\r\n// Types\r\nimport { Emitter } from 'app/core/utils/emitter';\r\nimport { ExploreId } from 'app/types/explore';\r\n\r\ninterface QueryRowsProps {\r\n  className?: string;\r\n  exploreEvents: Emitter;\r\n  exploreId: ExploreId;\r\n  queryKeys: string[];\r\n}\r\n\r\nexport default class QueryRows extends PureComponent<QueryRowsProps> {\r\n  render() {\r\n    const { className = '', exploreEvents, exploreId, queryKeys } = this.props;\r\n    return (\r\n      <div className={className}>\r\n        {queryKeys.map((key, index) => {\r\n          return <QueryRow key={key} exploreEvents={exploreEvents} exploreId={exploreId} index={index} />;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { forwardRef } from 'react';\r\n\r\nexport enum IconSide {\r\n  left = 'left',\r\n  right = 'right',\r\n}\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\r\n  splitted: boolean;\r\n  title: string;\r\n  onClick: () => void;\r\n  buttonClassName?: string;\r\n  iconClassName?: string;\r\n  iconSide?: IconSide;\r\n  disabled?: boolean;\r\n}\r\n\r\nfunction formatBtnTitle(title: string, iconSide?: string): string {\r\n  return iconSide === IconSide.left ? '\\xA0' + title : iconSide === IconSide.right ? title + '\\xA0' : title;\r\n}\r\n\r\nexport const ResponsiveButton = forwardRef<HTMLDivElement, Props>((props, ref) => {\r\n  const defaultProps = {\r\n    iconSide: IconSide.left,\r\n  };\r\n\r\n  props = { ...defaultProps, ...props };\r\n  const { title, onClick, buttonClassName, iconClassName, splitted, iconSide, disabled, ...divElementProps } = props;\r\n\r\n  return (\r\n    <div ref={ref} {...divElementProps}>\r\n      <button\r\n        className={`btn navbar-button ${buttonClassName ? buttonClassName : ''}`}\r\n        onClick={onClick}\r\n        disabled={disabled || false}\r\n      >\r\n        {iconClassName && iconSide === IconSide.left ? <i className={`${iconClassName}`} /> : null}\r\n        <span className=\"btn-title\">{!splitted ? formatBtnTitle(title, iconSide) : ''}</span>\r\n        {iconClassName && iconSide === IconSide.right ? <i className={`${iconClassName}`} /> : null}\r\n      </button>\r\n    </div>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport { RefreshPicker } from '@grafana/ui';\r\nimport memoizeOne from 'memoize-one';\r\nimport { css } from 'emotion';\r\nimport classNames from 'classnames';\r\n\r\nimport { ResponsiveButton } from './ResponsiveButton';\r\n\r\nconst getStyles = memoizeOne(() => {\r\n  return {\r\n    selectButtonOverride: css`\r\n      label: selectButtonOverride;\r\n      .select-button-value {\r\n        color: white !important;\r\n      }\r\n    `,\r\n  };\r\n});\r\n\r\ntype Props = {\r\n  splitted: boolean;\r\n  loading: boolean;\r\n  onRun: () => void;\r\n  refreshInterval?: string;\r\n  onChangeRefreshInterval: (interval: string) => void;\r\n  showDropdown: boolean;\r\n};\r\n\r\nexport function RunButton(props: Props) {\r\n  const { splitted, loading, onRun, onChangeRefreshInterval, refreshInterval, showDropdown } = props;\r\n  const styles = getStyles();\r\n  const runButton = (\r\n    <ResponsiveButton\r\n      splitted={splitted}\r\n      title=\"Run Query\"\r\n      onClick={onRun}\r\n      buttonClassName={classNames('navbar-button--secondary', { 'btn--radius-right-0': showDropdown })}\r\n      iconClassName={loading ? 'fa fa-spinner fa-fw fa-spin run-icon' : 'fa fa-refresh fa-fw'}\r\n    />\r\n  );\r\n\r\n  if (showDropdown) {\r\n    return (\r\n      <RefreshPicker\r\n        onIntervalChanged={onChangeRefreshInterval}\r\n        value={refreshInterval}\r\n        buttonSelectClassName={`navbar-button--secondary ${styles.selectButtonOverride}`}\r\n        refreshButton={runButton}\r\n      />\r\n    );\r\n  }\r\n  return runButton;\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\nimport { DataFrame } from '@grafana/data';\r\nimport { Table, Collapse } from '@grafana/ui';\r\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\r\nimport { StoreState } from 'app/types';\r\nimport { toggleTable } from './state/actions';\r\nimport { config } from 'app/core/config';\r\nimport { PANEL_BORDER } from 'app/core/constants';\r\n\r\ninterface TableContainerProps {\r\n  exploreId: ExploreId;\r\n  loading: boolean;\r\n  width: number;\r\n  onClickCell: (key: string, value: string) => void;\r\n  showingTable: boolean;\r\n  tableResult?: DataFrame;\r\n  toggleTable: typeof toggleTable;\r\n}\r\n\r\nexport class TableContainer extends PureComponent<TableContainerProps> {\r\n  onClickTableButton = () => {\r\n    this.props.toggleTable(this.props.exploreId, this.props.showingTable);\r\n  };\r\n\r\n  getTableHeight() {\r\n    const { tableResult } = this.props;\r\n\r\n    if (!tableResult || tableResult.length === 0) {\r\n      return 200;\r\n    }\r\n\r\n    // tries to estimate table height\r\n    return Math.max(Math.min(600, tableResult.length * 35) + 35);\r\n  }\r\n\r\n  render() {\r\n    const { loading, onClickCell, showingTable, tableResult, width } = this.props;\r\n\r\n    const height = this.getTableHeight();\r\n    const tableWidth = width - config.theme.panelPadding * 2 - PANEL_BORDER;\r\n\r\n    return (\r\n      <Collapse label=\"Table\" loading={loading} collapsible isOpen={showingTable} onToggle={this.onClickTableButton}>\r\n        {tableResult && <Table data={tableResult} width={tableWidth} height={height} onCellClick={onClickCell} />}\r\n      </Collapse>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState, { exploreId }: { exploreId: string }) {\r\n  const explore = state.explore;\r\n  // @ts-ignore\r\n  const item: ExploreItemState = explore[exploreId];\r\n  const { loading: loadingInState, showingTable, tableResult } = item;\r\n  const loading = tableResult && tableResult.length > 0 ? false : loadingInState;\r\n  return { loading, showingTable, tableResult };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  toggleTable,\r\n};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(TableContainer));\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport { css } from 'emotion';\r\n\r\nimport { Tooltip, useTheme, stylesFactory } from '@grafana/ui';\r\nimport { GrafanaTheme } from '@grafana/data';\r\n\r\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\r\n  return {\r\n    timePickerSynced: css`\r\n      label: timePickerSynced;\r\n      border-color: ${theme.colors.orangeDark};\r\n      background-image: none;\r\n      background-color: transparent;\r\n      color: ${theme.colors.orangeDark};\r\n      &:focus,\r\n      :hover {\r\n        color: ${theme.colors.orangeDark};\r\n        background-image: none;\r\n        background-color: transparent;\r\n      }\r\n    `,\r\n    noRightBorderStyle: css`\r\n      label: noRightBorderStyle;\r\n      border-right: 0;\r\n    `,\r\n    /*\r\n     * Required top-padding, otherwise is fa-link icon in active state\r\n     * cut off on top due to fontAwesome icon position\r\n     */\r\n    topPadding: css`\r\n      label: topPadding;\r\n      padding-top: 1px;\r\n    `,\r\n  };\r\n});\r\n\r\ninterface TimeSyncButtonProps {\r\n  isSynced: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\nexport function TimeSyncButton(props: TimeSyncButtonProps) {\r\n  const { onClick, isSynced } = props;\r\n  const theme = useTheme();\r\n  const styles = getStyles(theme);\r\n\r\n  const syncTimesTooltip = () => {\r\n    const { isSynced } = props;\r\n    const tooltip = isSynced ? 'Unsync all views' : 'Sync all views to this time range';\r\n    return <>{tooltip}</>;\r\n  };\r\n\r\n  return (\r\n    <Tooltip content={syncTimesTooltip} placement=\"bottom\">\r\n      <button\r\n        className={classNames('btn navbar-button navbar-button--attached', {\r\n          [`explore-active-button-glow ${styles.timePickerSynced}`]: isSynced,\r\n        })}\r\n        aria-label={isSynced ? 'Synced times' : 'Unsynced times'}\r\n        onClick={() => onClick()}\r\n      >\r\n        <i className={classNames('fa fa-link', styles.topPadding, isSynced && 'icon-brand-gradient')} />\r\n      </button>\r\n    </Tooltip>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { StoreState } from 'app/types';\r\nimport { ExploreId } from 'app/types/explore';\r\n\r\nimport Explore from './Explore';\r\nimport { CustomScrollbar, ErrorBoundaryAlert } from '@grafana/ui';\r\nimport { resetExploreAction } from './state/actionTypes';\r\n\r\ninterface WrapperProps {\r\n  split: boolean;\r\n  resetExploreAction: typeof resetExploreAction;\r\n}\r\n\r\nexport class Wrapper extends Component<WrapperProps> {\r\n  componentWillUnmount() {\r\n    this.props.resetExploreAction({});\r\n  }\r\n\r\n  render() {\r\n    const { split } = this.props;\r\n\r\n    return (\r\n      <div className=\"page-scrollbar-wrapper\">\r\n        <CustomScrollbar autoHeightMin={'100%'} autoHeightMax={''} className=\"custom-scrollbar--page\">\r\n          <div className=\"explore-wrapper\">\r\n            <ErrorBoundaryAlert style=\"page\">\r\n              <Explore exploreId={ExploreId.left} />\r\n            </ErrorBoundaryAlert>\r\n            {split && (\r\n              <ErrorBoundaryAlert style=\"page\">\r\n                <Explore exploreId={ExploreId.right} />\r\n              </ErrorBoundaryAlert>\r\n            )}\r\n          </div>\r\n        </CustomScrollbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n  const { split } = state.explore;\r\n  return { split };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  resetExploreAction,\r\n};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(Wrapper));\r\n","import React, { useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { changeRefreshInterval, runQueries } from './state/actions';\r\nimport { setPausedStateAction } from './state/actionTypes';\r\nimport { RefreshPicker } from '@grafana/ui';\r\nimport { ExploreId } from '../../types';\r\n\r\n/**\r\n * Hook that gives you all the functions needed to control the live tailing.\r\n */\r\nexport function useLiveTailControls(exploreId: ExploreId) {\r\n  const dispatch = useDispatch();\r\n\r\n  const pause = useCallback(() => {\r\n    dispatch(setPausedStateAction({ exploreId, isPaused: true }));\r\n  }, [exploreId, dispatch]);\r\n\r\n  const resume = useCallback(() => {\r\n    dispatch(setPausedStateAction({ exploreId, isPaused: false }));\r\n  }, [exploreId, dispatch]);\r\n\r\n  const stop = useCallback(() => {\r\n    // We need to pause here first because there is transition where we are not live but live logs are still shown\r\n    // to cross fade with the normal view. This will prevent reordering of the logs in the live view during the\r\n    // transition.\r\n    pause();\r\n\r\n    // TODO referencing this from perspective of refresh picker when there is designated button for it now is not\r\n    //  great. Needs a bit of refactoring.\r\n    dispatch(changeRefreshInterval(exploreId, RefreshPicker.offOption.value));\r\n    dispatch(runQueries(exploreId));\r\n  }, [exploreId, dispatch, pause]);\r\n\r\n  const start = useCallback(() => {\r\n    dispatch(changeRefreshInterval(exploreId, RefreshPicker.liveOption.value));\r\n  }, [exploreId, dispatch]);\r\n\r\n  return {\r\n    pause,\r\n    resume,\r\n    stop,\r\n    start,\r\n  };\r\n}\r\n\r\ntype Props = {\r\n  exploreId: ExploreId;\r\n  children: (controls: ReturnType<typeof useLiveTailControls>) => React.ReactElement;\r\n};\r\n\r\n/**\r\n * If you can't use the hook you can use this as a render prop pattern.\r\n */\r\nexport function LiveTailControls(props: Props) {\r\n  const controls = useLiveTailControls(props.exploreId);\r\n  return props.children(controls);\r\n}\r\n","import React from 'react';\r\nimport memoizeOne from 'memoize-one';\r\nimport { css } from 'emotion';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nconst transitionDuration = 500;\r\n// We add a bit of delay to the transition as another perf optimisation. As at the start we need to render\r\n// quite a bit of new rows, if we start transition at the same time there can be frame rate drop. This gives time\r\n// for react to first render them and then do the animation.\r\nconst transitionDelay = 100;\r\n\r\nconst getStyles = memoizeOne(() => {\r\n  return {\r\n    logsEnter: css`\r\n      label: logsEnter;\r\n      position: absolute;\r\n      opacity: 0;\r\n      height: auto;\r\n      width: 100%;\r\n    `,\r\n    logsEnterActive: css`\r\n      label: logsEnterActive;\r\n      opacity: 1;\r\n      transition: opacity ${transitionDuration}ms ease-out ${transitionDelay}ms;\r\n    `,\r\n    logsExit: css`\r\n      label: logsExit;\r\n      position: absolute;\r\n      opacity: 1;\r\n      height: auto;\r\n      width: 100%;\r\n    `,\r\n    logsExitActive: css`\r\n      label: logsExitActive;\r\n      opacity: 0;\r\n      transition: opacity ${transitionDuration}ms ease-out ${transitionDelay}ms;\r\n    `,\r\n  };\r\n});\r\n\r\ntype Props = {\r\n  children: React.ReactNode;\r\n  visible: boolean;\r\n};\r\n\r\n/**\r\n * Cross fade transition component that is tied a bit too much to the logs containers so not very useful elsewhere\r\n * right now.\r\n */\r\nexport function LogsCrossFadeTransition(props: Props) {\r\n  const { visible, children } = props;\r\n  const styles = getStyles();\r\n  return (\r\n    <CSSTransition\r\n      in={visible}\r\n      mountOnEnter={true}\r\n      unmountOnExit={true}\r\n      timeout={transitionDuration + transitionDelay}\r\n      classNames={{\r\n        enter: styles.logsEnter,\r\n        enterActive: styles.logsEnterActive,\r\n        exit: styles.logsExit,\r\n        exitActive: styles.logsExitActive,\r\n      }}\r\n    >\r\n      {children}\r\n    </CSSTransition>\r\n  );\r\n}\r\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AAEA;AAeA;;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;;AAqCA;AA9CA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;AC3EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AAYA;AASA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAGA;AACA;AAwCA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AAAA;AAIA;AAAA;AA0CA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAjHA;;AACA;AAEA;AACA;AAUA;AAEA;AACA;AACA;AAWA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AA6EA;AAAA;;AACA;AAiBA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAOA;AAEA;AAiBA;AAGA;AAgBA;AAMA;AACA;AAAA;;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC7cA;AACA;AACA;AAEA;AAYA;AAEA;AACA;AASA;AAKA;AAKA;AAwBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAaA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAoBA;AAGA;AAGA;;AAoCA;AAlCA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAOA;AAYA;AAGA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC1LA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAaA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAuBA;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AA0CA;AAAA;AAAA;AAAA;AACA;;AACA;;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;;;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;;;;AACA;AAWA;AACA;AACA;AACA;AACA;;AAyLA;AAtMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AAGA;AAEA;AAKA;AACA;AACA;AAEA;AAMA;AAQA;AAEA;AACA;AAQA;AAcA;AAEA;AACA;AACA;AAGA;AAWA;AAEA;AASA;AAEA;AAaA;AAEA;AAQA;AACA;AAQA;AAGA;AAEA;AAmBA;AACA;AAAA;;AAEA;AAAA;;AACA;AACA;AACA;AAEA;AAeA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AC3YA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAYA;AAKA;AAMA;AAPA;AACA;AAKA;AACA;AAOA;AAMA;AAGA;AAGA;AAeA;AAAA;AAKA;AAAA;AAJA;AACA;AACA;AAyCA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA2BA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AAEA;AAKA;AAKA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;;AAEA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AAKA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxMA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AAmBA;AA4BA;AAMA;AAKA;AAMA;AAKA;AACA;AAEA;AACA;AACA;AAWA;;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAUA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;AClKA;AAEA;AAeA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAiCA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAoIA;AAlIA;AAAA;AACA;AAkBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AASA;AAIA;AAAA;AAAA;AACA;AAMA;AAgBA;;AAGA;AAMA;AAEA;AACA;AAOA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3QA;AACA;AACA;AACA;AAEA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgCA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AACA;AAEA;AACA;AACA;AAEA;;AACA;;AAuEA;AArEA;AAAA;AACA;AAoBA;AAEA;AACA;AACA;AAcA;AACA;AACA;AA2BA;AACA;AAAA;;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;AC3MA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAWA;AAMA;AAMA;AASA;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAaA;AAAA;AAAA;;AAqFA;AAhFA;;;;;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA;AACA;AACA;;;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAUA;AAEA;AA8BA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAoEA;AAlGA;AACA;AACA;AA8BA;;AACA;AAYA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAyBA;AAWA;AACA;AAAA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AC5MA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAYA;AAEA;AASA;AAEA;AAEA;AAKA;AAIA;AACA;AAIA;AACA;AAMA;AAGA;AACA;AACA;AAKA;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AAEA;AACA;AAaA;AAAA;AAAA;;AAWA;AAVA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;AC5BA;AAEA;AAAA;AACA;AACA;AACA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAMA;AACA;AAWA;AACA;AACA;AACA;AAUA;AACA;AAQA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAYA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAyBA;AAvBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AAAA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAaA;AAIA;;;AAGA;AACA;AAIA;AACA;AAOA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAIA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAOA;AAAA;AAAA;;AAyBA;AAxBA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAOA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACpDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAKA;AAOA;AAKA;AACA;AAOA;;;AAGA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAKA;;;;;;A","sourceRoot":""}