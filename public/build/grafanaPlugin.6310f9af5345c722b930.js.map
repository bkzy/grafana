{"version":3,"file":"grafanaPlugin.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/plugins/datasource/grafana/datasource.ts","webpack:///webpack:///./public/app/plugins/datasource/grafana/module.ts"],"sourcesContent":["import _ from 'lodash';\r\nimport { BackendSrv } from 'app/core/services/backend_srv';\r\nimport { TemplateSrv } from 'app/features/templating/template_srv';\r\n\r\nclass GrafanaDatasource {\r\n  /** @ngInject */\r\n  constructor(private backendSrv: BackendSrv, private templateSrv: TemplateSrv) {}\r\n\r\n  query(options: any) {\r\n    return this.backendSrv\r\n      .get('/api/tsdb/testdata/random-walk', {\r\n        from: options.range.from.valueOf(),\r\n        to: options.range.to.valueOf(),\r\n        intervalMs: options.intervalMs,\r\n        maxDataPoints: options.maxDataPoints,\r\n      })\r\n      .then((res: any) => {\r\n        const data: any[] = [];\r\n\r\n        if (res.results) {\r\n          _.forEach(res.results, queryRes => {\r\n            for (const series of queryRes.series) {\r\n              data.push({\r\n                target: series.name,\r\n                datapoints: series.points,\r\n              });\r\n            }\r\n          });\r\n        }\r\n\r\n        return { data: data };\r\n      });\r\n  }\r\n\r\n  metricFindQuery(options: any) {\r\n    return Promise.resolve({ data: [] });\r\n  }\r\n\r\n  annotationQuery(options: any) {\r\n    const params: any = {\r\n      from: options.range.from.valueOf(),\r\n      to: options.range.to.valueOf(),\r\n      limit: options.annotation.limit,\r\n      tags: options.annotation.tags,\r\n      matchAny: options.annotation.matchAny,\r\n    };\r\n\r\n    if (options.annotation.type === 'dashboard') {\r\n      // if no dashboard id yet return\r\n      if (!options.dashboard.id) {\r\n        return Promise.resolve([]);\r\n      }\r\n      // filter by dashboard id\r\n      params.dashboardId = options.dashboard.id;\r\n      // remove tags filter if any\r\n      delete params.tags;\r\n    } else {\r\n      // require at least one tag\r\n      if (!_.isArray(options.annotation.tags) || options.annotation.tags.length === 0) {\r\n        return Promise.resolve([]);\r\n      }\r\n      const delimiter = '__delimiter__';\r\n      const tags = [];\r\n      for (const t of params.tags) {\r\n        const renderedValues = this.templateSrv.replace(t, {}, (value: any) => {\r\n          if (typeof value === 'string') {\r\n            return value;\r\n          }\r\n\r\n          return value.join(delimiter);\r\n        });\r\n        for (const tt of renderedValues.split(delimiter)) {\r\n          tags.push(tt);\r\n        }\r\n      }\r\n      params.tags = tags;\r\n    }\r\n\r\n    return this.backendSrv.get('/api/annotations', params);\r\n  }\r\n}\r\n\r\nexport { GrafanaDatasource };\r\n","import { GrafanaDatasource } from './datasource';\r\nimport { QueryCtrl } from 'app/plugins/sdk';\r\n\r\nclass GrafanaQueryCtrl extends QueryCtrl {\r\n  static templateUrl = 'partials/query.editor.html';\r\n}\r\n\r\nclass GrafanaAnnotationsQueryCtrl {\r\n  annotation: any;\r\n\r\n  types = [\r\n    { text: 'Dashboard', value: 'dashboard' },\r\n    { text: 'Tags', value: 'tags' },\r\n  ];\r\n\r\n  constructor() {\r\n    this.annotation.type = this.annotation.type || 'tags';\r\n    this.annotation.limit = this.annotation.limit || 100;\r\n  }\r\n\r\n  static templateUrl = 'partials/annotations.editor.html';\r\n}\r\n\r\nexport {\r\n  GrafanaDatasource,\r\n  GrafanaDatasource as Datasource,\r\n  GrafanaQueryCtrl as QueryCtrl,\r\n  GrafanaAnnotationsQueryCtrl as AnnotationsQueryCtrl,\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AAAA;AACA;AACA;;;;;;;;;AACA;;;;;;;;;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AAEA;AAAA;AAAA;;AAEA;AADA;AACA;AAAA;AAEA;AAQA;AALA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAEA;;;;;A","sourceRoot":""}