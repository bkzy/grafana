{"version":3,"file":"inputDatasourcePlugin.6310f9af5345c722b930.js","sources":["webpack:///webpack:///./public/app/plugins/datasource/input/InputConfigEditor.tsx","webpack:///webpack:///./public/app/plugins/datasource/input/InputDatasource.ts","webpack:///webpack:///./public/app/plugins/datasource/input/InputQueryEditor.tsx","webpack:///webpack:///./public/app/plugins/datasource/input/module.ts","webpack:///webpack:///./public/app/plugins/datasource/input/utils.ts"],"sourcesContent":["// Libraries\r\nimport React, { PureComponent } from 'react';\r\n\r\n// Types\r\nimport { InputOptions } from './types';\r\n\r\nimport { TableInputCSV } from '@grafana/ui';\r\nimport { DataSourcePluginOptionsEditorProps, DataFrame, MutableDataFrame } from '@grafana/data';\r\nimport { dataFrameToCSV } from './utils';\r\n\r\ninterface Props extends DataSourcePluginOptionsEditorProps<InputOptions> {}\r\n\r\ninterface State {\r\n  text: string;\r\n}\r\n\r\nexport class InputConfigEditor extends PureComponent<Props, State> {\r\n  state = {\r\n    text: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { options } = this.props;\r\n    if (options.jsonData.data) {\r\n      const text = dataFrameToCSV(options.jsonData.data);\r\n      this.setState({ text });\r\n    }\r\n  }\r\n\r\n  onSeriesParsed = (data: DataFrame[], text: string) => {\r\n    const { options, onOptionsChange } = this.props;\r\n    if (!data) {\r\n      data = [new MutableDataFrame()];\r\n    }\r\n    // data is a property on 'jsonData'\r\n    const jsonData = {\r\n      ...options.jsonData,\r\n      data,\r\n    };\r\n\r\n    onOptionsChange({\r\n      ...options,\r\n      jsonData,\r\n    });\r\n    this.setState({ text });\r\n  };\r\n\r\n  render() {\r\n    const { text } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"gf-form-group\">\r\n          <h4>Shared Data:</h4>\r\n          <span>Enter CSV</span>\r\n          <TableInputCSV text={text} onSeriesParsed={this.onSeriesParsed} width={'100%'} height={200} />\r\n        </div>\r\n\r\n        <div className=\"grafana-info-box\">\r\n          This data is stored in the datasource json and is returned to every user in the initial request for any\r\n          datasource. This is an appropriate place to enter a few values. Large datasets will perform better in other\r\n          datasources.\r\n          <br />\r\n          <br />\r\n          <b>NOTE:</b> Changes to this data will only be reflected after a browser refresh.\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// Types\r\nimport {\r\n  DataQueryRequest,\r\n  DataQueryResponse,\r\n  DataSourceApi,\r\n  DataSourceInstanceSettings,\r\n  MetricFindValue,\r\n  DataFrame,\r\n  DataFrameDTO,\r\n  toDataFrame,\r\n} from '@grafana/data';\r\n\r\nimport { InputQuery, InputOptions } from './types';\r\n\r\nexport class InputDatasource extends DataSourceApi<InputQuery, InputOptions> {\r\n  data: DataFrame[] = [];\r\n\r\n  constructor(instanceSettings: DataSourceInstanceSettings<InputOptions>) {\r\n    super(instanceSettings);\r\n\r\n    if (instanceSettings.jsonData.data) {\r\n      this.data = instanceSettings.jsonData.data.map(v => toDataFrame(v));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert a query to a simple text string\r\n   */\r\n  getQueryDisplayText(query: InputQuery): string {\r\n    if (query.data) {\r\n      return 'Panel Data: ' + describeDataFrame(query.data);\r\n    }\r\n    return `Shared Data From: ${this.name} (${describeDataFrame(this.data)})`;\r\n  }\r\n\r\n  metricFindQuery(query: string, options?: any): Promise<MetricFindValue[]> {\r\n    return new Promise((resolve, reject) => {\r\n      const names = [];\r\n      for (const series of this.data) {\r\n        for (const field of series.fields) {\r\n          // TODO, match query/options?\r\n          names.push({\r\n            text: field.name,\r\n          });\r\n        }\r\n      }\r\n      resolve(names);\r\n    });\r\n  }\r\n\r\n  query(options: DataQueryRequest<InputQuery>): Promise<DataQueryResponse> {\r\n    const results: DataFrame[] = [];\r\n    for (const query of options.targets) {\r\n      if (query.hide) {\r\n        continue;\r\n      }\r\n      let data = this.data;\r\n      if (query.data) {\r\n        data = query.data.map(v => toDataFrame(v));\r\n      }\r\n      for (let i = 0; i < data.length; i++) {\r\n        results.push({\r\n          ...data[i],\r\n          refId: query.refId,\r\n        });\r\n      }\r\n    }\r\n    return Promise.resolve({ data: results });\r\n  }\r\n\r\n  testDatasource() {\r\n    return new Promise((resolve, reject) => {\r\n      let rowCount = 0;\r\n      let info = `${this.data.length} Series:`;\r\n      for (const series of this.data) {\r\n        const length = series.length;\r\n        info += ` [${series.fields.length} Fields, ${length} Rows]`;\r\n        rowCount += length;\r\n      }\r\n\r\n      if (rowCount > 0) {\r\n        resolve({\r\n          status: 'success',\r\n          message: info,\r\n        });\r\n      }\r\n      reject({\r\n        status: 'error',\r\n        message: 'No Data Entered',\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nfunction getLength(data?: DataFrameDTO | DataFrame) {\r\n  if (!data || !data.fields || !data.fields.length) {\r\n    return 0;\r\n  }\r\n  if (data.hasOwnProperty('length')) {\r\n    return (data as DataFrame).length;\r\n  }\r\n  return data.fields[0].values.length;\r\n}\r\n\r\nexport function describeDataFrame(data: Array<DataFrameDTO | DataFrame>): string {\r\n  if (!data || !data.length) {\r\n    return '';\r\n  }\r\n  if (data.length > 1) {\r\n    const count = data.reduce((acc, series) => {\r\n      return acc + getLength(series);\r\n    }, 0);\r\n    return `${data.length} Series, ${count} Rows`;\r\n  }\r\n  const series = data[0];\r\n  if (!series.fields) {\r\n    return 'Missing Fields';\r\n  }\r\n  const length = getLength(series);\r\n  return `${series.fields.length} Fields, ${length} Rows`;\r\n}\r\n\r\nexport default InputDatasource;\r\n","// Libraries\r\nimport React, { PureComponent } from 'react';\r\n\r\n// Types\r\nimport { InputDatasource, describeDataFrame } from './InputDatasource';\r\nimport { InputQuery, InputOptions } from './types';\r\n\r\nimport { FormLabel, Select, TableInputCSV } from '@grafana/ui';\r\nimport { DataFrame, toCSV, SelectableValue, MutableDataFrame, QueryEditorProps } from '@grafana/data';\r\n\r\nimport { dataFrameToCSV } from './utils';\r\n\r\ntype Props = QueryEditorProps<InputDatasource, InputQuery, InputOptions>;\r\n\r\nconst options = [\r\n  { value: 'panel', label: 'Panel', description: 'Save data in the panel configuration.' },\r\n  { value: 'shared', label: 'Shared', description: 'Save data in the shared datasource object.' },\r\n];\r\n\r\ninterface State {\r\n  text: string;\r\n}\r\n\r\nexport class InputQueryEditor extends PureComponent<Props, State> {\r\n  state = {\r\n    text: '',\r\n  };\r\n\r\n  onComponentDidMount() {\r\n    const { query } = this.props;\r\n    const text = dataFrameToCSV(query.data);\r\n    this.setState({ text });\r\n  }\r\n\r\n  onSourceChange = (item: SelectableValue<string>) => {\r\n    const { datasource, query, onChange, onRunQuery } = this.props;\r\n    let data: DataFrame[] | undefined = undefined;\r\n    if (item.value === 'panel') {\r\n      if (query.data) {\r\n        return;\r\n      }\r\n      data = [...datasource.data];\r\n      if (!data) {\r\n        data = [new MutableDataFrame()];\r\n      }\r\n      this.setState({ text: toCSV(data) });\r\n    }\r\n    onChange({ ...query, data });\r\n    onRunQuery();\r\n  };\r\n\r\n  onSeriesParsed = (data: DataFrame[], text: string) => {\r\n    const { query, onChange, onRunQuery } = this.props;\r\n    this.setState({ text });\r\n    if (!data) {\r\n      data = [new MutableDataFrame()];\r\n    }\r\n    onChange({ ...query, data });\r\n    onRunQuery();\r\n  };\r\n\r\n  render() {\r\n    const { datasource, query } = this.props;\r\n    const { id, name } = datasource;\r\n    const { text } = this.state;\r\n\r\n    const selected = query.data ? options[0] : options[1];\r\n    return (\r\n      <div>\r\n        <div className=\"gf-form\">\r\n          <FormLabel width={4}>Data</FormLabel>\r\n          <Select width={6} options={options} value={selected} onChange={this.onSourceChange} />\r\n\r\n          <div className=\"btn btn-link\">\r\n            {query.data ? (\r\n              describeDataFrame(query.data)\r\n            ) : (\r\n              <a href={`datasources/edit/${id}/`}>\r\n                {name}: {describeDataFrame(datasource.data)} &nbsp;&nbsp;\r\n                <i className=\"fa fa-pencil-square-o\" />\r\n              </a>\r\n            )}\r\n          </div>\r\n        </div>\r\n        {query.data && <TableInputCSV text={text} onSeriesParsed={this.onSeriesParsed} width={'100%'} height={200} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { DataSourcePlugin } from '@grafana/data';\r\n\r\nimport { InputDatasource } from './InputDatasource';\r\n\r\nimport { InputQueryEditor } from './InputQueryEditor';\r\nimport { InputConfigEditor } from './InputConfigEditor';\r\nimport { InputOptions, InputQuery } from './types';\r\n\r\nexport const plugin = new DataSourcePlugin<InputDatasource, InputQuery, InputOptions>(InputDatasource)\r\n  .setConfigEditor(InputConfigEditor)\r\n  .setQueryEditor(InputQueryEditor);\r\n","import { toDataFrame, DataFrameDTO, toCSV } from '@grafana/data';\r\n\r\nexport function dataFrameToCSV(dto?: DataFrameDTO[]) {\r\n  if (!dto || !dto.length) {\r\n    return '';\r\n  }\r\n  return toCSV(dto.map(v => toDataFrame(v)));\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAKA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAIA;AACA;;AAuBA;AA/CA;AACA;AACA;AACA;AACA;AACA;AACA;AAoBA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;;AAIA;AACA;AACA;AACA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;ACpEA;AACA;AAaA;AAAA;AAGA;AAAA;AAFA;AAKA;AACA;AACA;;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;;AACA;;AACA;AAAA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AACA;;;;;;;;;AACA;AACA;AACA;AAEA;;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;;;;;;;;;AACA;AACA;AAEA;AAAA;AACA;;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;AC1HA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA6BA;AA5DA;AACA;AACA;AACA;AACA;AA6BA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAKA;;AAAA;;AACA;AAKA;AAGA;AACA;AAAA;;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}